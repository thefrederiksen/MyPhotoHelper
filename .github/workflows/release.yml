name: Release with AutoUpdater.NET

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: windows-latest
    permissions:
      contents: write
      actions: read
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    
    - name: Extract version from tag
      id: version
      run: |
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
        echo "VERSION=$VERSION" >> $env:GITHUB_OUTPUT
        echo "Building version: $VERSION"
      shell: pwsh
    
    - name: Update version in project file
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $versionWithBuild = "$version.0"
        $csprojPath = "src/MyPhotoHelper/MyPhotoHelper.csproj"
        
        Write-Host "Updating project file with version: $versionWithBuild"
        
        $csproj = Get-Content $csprojPath -Raw
        
        # Update all version fields
        $csproj = $csproj -replace '<AssemblyVersion>[\d\.]+</AssemblyVersion>', "<AssemblyVersion>$versionWithBuild</AssemblyVersion>"
        $csproj = $csproj -replace '<FileVersion>[\d\.]+</FileVersion>', "<FileVersion>$versionWithBuild</FileVersion>"
        $csproj = $csproj -replace '<ProductVersion>[\d\.]+</ProductVersion>', "<ProductVersion>$versionWithBuild</ProductVersion>"
        $csproj = $csproj -replace '<Version>[\d\.]+</Version>', "<Version>$versionWithBuild</Version>"
        $csproj = $csproj -replace '<AssemblyInformationalVersion>[\d\.]+</AssemblyInformationalVersion>', "<AssemblyInformationalVersion>$version</AssemblyInformationalVersion>"
        $csproj = $csproj -replace '<InformationalVersion>[\d\.]+</InformationalVersion>', "<InformationalVersion>$version</InformationalVersion>"
        
        $csproj | Set-Content $csprojPath -NoNewline
        Write-Host "✅ Project file updated with version $versionWithBuild"
      shell: pwsh
    
    - name: Restore dependencies
      run: dotnet restore src/MyPhotoHelper.sln
    
    - name: Build and Publish
      run: |
        dotnet publish src/MyPhotoHelper/MyPhotoHelper.csproj `
          -c Release `
          -r win-x64 `
          --self-contained false `
          -o publish `
          -p:PublishReadyToRun=true
    
    - name: Install Inno Setup
      run: |
        choco install innosetup -y
        $env:PATH += ";C:\Program Files (x86)\Inno Setup 6"
        echo "PATH=$env:PATH" >> $env:GITHUB_ENV
      shell: pwsh
    
    - name: Update version in installer script
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        (Get-Content installer.iss) -replace 'AppVersion=.*', "AppVersion=$version" | Set-Content installer.iss
      shell: pwsh
    
    - name: Create Installer
      run: |
        & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss
      shell: pwsh
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: MyPhotoHelper v${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: |
          Output/MyPhotoHelper-Setup.exe
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ## MyPhotoHelper v${{ steps.version.outputs.VERSION }}
          
          ### What's New
          - Flexible settings system with key-value architecture
          - Improved auto-update system using AutoUpdater.NET
          - Enhanced database management and performance
          - Streamlined installer with optional Windows startup
          
          ### Installation
          1. Download `MyPhotoHelper-Setup.exe` below
          2. Run the installer (no admin rights required)
          3. Choose your preferences during installation:
             - Desktop shortcut (optional)
             - Start with Windows (optional)
          4. The application will automatically check for updates
          
          ### Features
          - **Easy Installation**: One-click installer, no UAC prompts
          - **Auto Updates**: Automatic update notifications
          - **System Integration**: Optional Windows startup and desktop shortcuts
          - **User-Friendly**: Installs to your user folder, clean uninstall
          
          ### System Requirements
          - Windows 10 or later
          - .NET 9 Runtime (automatically installed if needed)
          
          ### Notes
          - AI features are temporarily disabled during system upgrade
          - Core photo management features remain fully functional
          - Automatic migration from previous versions
    
    - name: Verify release was created successfully
      if: success()
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $releaseUrl = "https://api.github.com/repos/thefrederiksen/MyPhotoHelper/releases/tags/v$version"
        Write-Host "Verifying release exists at: $releaseUrl"
        
        # Wait a moment for GitHub to process the release
        Start-Sleep -Seconds 10
        
        try {
          $response = Invoke-RestMethod -Uri $releaseUrl -Headers @{ "User-Agent" = "GitHub-Actions" }
          Write-Host "✅ Release verified: $($response.name)"
          
          # Check that the installer asset exists
          $installerAsset = $response.assets | Where-Object { $_.name -eq "MyPhotoHelper-Setup.exe" }
          if ($installerAsset) {
            Write-Host "✅ Installer asset found: $($installerAsset.browser_download_url)"
            echo "RELEASE_VERIFIED=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "❌ Installer asset not found!"
            exit 1
          }
        } catch {
          Write-Host "❌ Failed to verify release: $($_.Exception.Message)"
          exit 1
        }
      shell: pwsh
      id: verify_release
    
    - name: Update XML for AutoUpdater (AFTER successful release)
      if: success() && steps.verify_release.outputs.RELEASE_VERIFIED == 'true'
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        Write-Host "Updating update.xml with verified release info"
        
        $xml = @"
        <?xml version="1.0" encoding="UTF-8"?>
        <item>
            <version>$version.0</version>
            <url>https://github.com/thefrederiksen/MyPhotoHelper/releases/download/v$version/MyPhotoHelper-Setup.exe</url>
            <changelog>https://github.com/thefrederiksen/MyPhotoHelper/releases/latest</changelog>
            <mandatory>false</mandatory>
        </item>
        "@
        $xml | Out-File -FilePath update.xml -Encoding UTF8
        Write-Host "✅ update.xml updated successfully"
      shell: pwsh
    
    - name: Update main branch with version and XML
      if: success() && steps.verify_release.outputs.RELEASE_VERIFIED == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git checkout main
        
        # Add both the updated project file and update.xml
        git add src/MyPhotoHelper/MyPhotoHelper.csproj
        git add update.xml
        
        # Commit both changes (fail if there's an error)
        git commit -m "Update version to v${{ steps.version.outputs.VERSION }} and AutoUpdater XML [skip ci]"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "❌ Failed to commit version updates" -ForegroundColor Red
          exit 1
        }
        
        # Push to main (fail if there's an error)
        git push origin main
        if ($LASTEXITCODE -ne 0) {
          Write-Host "❌ Failed to push version updates to main branch" -ForegroundColor Red
          Write-Host "This might be due to branch protection rules. Please check repository settings." -ForegroundColor Yellow
          exit 1
        }
        
        Write-Host "✅ Version and update.xml successfully committed to main branch" -ForegroundColor Green
      shell: pwsh