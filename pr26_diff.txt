diff --git a/.claude/settings.local.json b/.claude/settings.local.json
index 49f632c..e5fa7e3 100644
--- a/.claude/settings.local.json
+++ b/.claude/settings.local.json
@@ -3,7 +3,11 @@
   "permissions": {
     "allow": [
       "*",
-      "Bash(miscellaneous/start-app.bat)"
+      "Bash(miscellaneous/start-app.bat)",
+      "Bash(gh pr list:*)",
+      "Bash(git pull:*)",
+      "Bash(gh issue list:*)",
+      "Bash(git branch:*)"
     ],
     "deny": []
   }
diff --git a/src/MyPhotoHelper/BlazorServerStarter.cs b/src/MyPhotoHelper/BlazorServerStarter.cs
index 84f033d..b0a186d 100644
--- a/src/MyPhotoHelper/BlazorServerStarter.cs
+++ b/src/MyPhotoHelper/BlazorServerStarter.cs
@@ -280,6 +280,9 @@ private void ConfigureServices(WebApplicationBuilder builder, IPathService pathS
             // Gallery update notification service
             builder.Services.AddSingleton<IGalleryUpdateService, GalleryUpdateService>();
             
+            // Image viewer service for full-screen viewing
+            builder.Services.AddScoped<IImageViewerService, ImageViewerService>();
+            
             // Directory monitoring service
             builder.Services.AddSingleton<DirectoryMonitoringService>();
             builder.Services.AddSingleton<IDirectoryMonitoringService>(provider => provider.GetRequiredService<DirectoryMonitoringService>());
diff --git a/src/MyPhotoHelper/Components/Shared/FullScreenViewer.razor b/src/MyPhotoHelper/Components/Shared/FullScreenViewer.razor
new file mode 100644
index 0000000..f045a09
--- /dev/null
+++ b/src/MyPhotoHelper/Components/Shared/FullScreenViewer.razor
@@ -0,0 +1,512 @@
+@using MyPhotoHelper.Services
+@using MyPhotoHelper.Models
+@inject IImageViewerService ImageViewerService
+@inject IPhotoPathService PhotoPathService
+@inject IJSRuntime JSRuntime
+@implements IDisposable
+
+@if (ImageViewerService.IsViewerOpen && ImageViewerService.CurrentImage != null)
+{
+    <div class="viewer-overlay" @onclick="HandleBackdropClick" @onkeydown="HandleKeyDown" tabindex="0" @ref="overlayElement">
+        <!-- Top bar with photo counter and close button -->
+        <div class="viewer-top-bar" @onmouseover="ShowControls" style="opacity: @(controlsVisible ? "1" : "0")">
+            <div class="viewer-photo-counter">
+                Photo @(ImageViewerService.CurrentImageIndex + 1) of @ImageViewerService.PhotoCollection?.Count
+            </div>
+            <button class="viewer-close-btn" @onclick="CloseViewer" @onclick:stopPropagation="true" title="Close (ESC)">
+                <span class="oi oi-x" aria-hidden="true"></span>
+            </button>
+        </div>
+        
+        <!-- Main image container -->
+        <div class="viewer-image-container" @onclick:stopPropagation="true" @onmousemove="ShowControls">
+            @if (isLoading)
+            {
+                <div class="viewer-loading">
+                    <div class="spinner-border text-light" role="status">
+                        <span class="visually-hidden">Loading...</span>
+                    </div>
+                </div>
+            }
+            <img src="@currentImageUrl" 
+                 class="viewer-image @(isLoading ? "hidden" : "")" 
+                 @onload="OnImageLoaded"
+                 @onerror="OnImageError"
+                 alt="@ImageViewerService.CurrentImage.RelativePath" />
+        </div>
+        
+        <!-- Navigation buttons -->
+        @if (ImageViewerService.CurrentImageIndex > 0)
+        {
+            <button class="viewer-nav-button viewer-nav-prev" 
+                    @onclick="NavigatePrevious" 
+                    @onclick:stopPropagation="true"
+                    @onmouseover="ShowControls"
+                    style="opacity: @(controlsVisible ? "1" : "0")"
+                    title="Previous (←)">
+                <span class="oi oi-chevron-left" aria-hidden="true"></span>
+            </button>
+        }
+        
+        @if (ImageViewerService.CurrentImageIndex < (ImageViewerService.PhotoCollection?.Count - 1))
+        {
+            <button class="viewer-nav-button viewer-nav-next" 
+                    @onclick="NavigateNext" 
+                    @onclick:stopPropagation="true"
+                    @onmouseover="ShowControls"
+                    style="opacity: @(controlsVisible ? "1" : "0")"
+                    title="Next (→)">
+                <span class="oi oi-chevron-right" aria-hidden="true"></span>
+            </button>
+        }
+        
+        <!-- Bottom bar with photo information -->
+        <div class="viewer-bottom-bar" @onmouseover="ShowControls" style="opacity: @(controlsVisible ? "1" : "0")">
+            <div class="viewer-photo-info">
+                <div class="viewer-photo-name">@System.IO.Path.GetFileName(ImageViewerService.CurrentImage.RelativePath)</div>
+                <div class="viewer-photo-date">
+                    @if (ImageViewerService.CurrentImage.tbl_image_metadata?.DateTaken.HasValue == true)
+                    {
+                        @ImageViewerService.CurrentImage.tbl_image_metadata.DateTaken.Value.ToString("MMMM d, yyyy 'at' h:mm tt")
+                    }
+                    else
+                    {
+                        @ImageViewerService.CurrentImage.DateCreated.ToString("MMMM d, yyyy 'at' h:mm tt")
+                    }
+                </div>
+            </div>
+            <div class="viewer-actions">
+                <button class="viewer-action-btn" @onclick="OpenInExplorer" @onclick:stopPropagation="true" title="Open folder">
+                    <span class="oi oi-folder" aria-hidden="true"></span>
+                </button>
+                <button class="viewer-action-btn" @onclick="OpenExternal" @onclick:stopPropagation="true" title="Open in default app">
+                    <span class="oi oi-external-link" aria-hidden="true"></span>
+                </button>
+            </div>
+        </div>
+    </div>
+}
+
+<style>
+    .viewer-overlay {
+        position: fixed;
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        background-color: rgba(0, 0, 0, 0.95);
+        z-index: 9999;
+        display: flex;
+        align-items: center;
+        justify-content: center;
+        animation: fadeIn 0.2s ease-in;
+        outline: none;
+    }
+    
+    @@keyframes fadeIn {
+        from { opacity: 0; }
+        to { opacity: 1; }
+    }
+    
+    .viewer-top-bar {
+        position: fixed;
+        top: 0;
+        left: 0;
+        right: 0;
+        height: 60px;
+        background: linear-gradient(to bottom, rgba(0, 0, 0, 0.8), transparent);
+        display: flex;
+        justify-content: space-between;
+        align-items: center;
+        padding: 0 2rem;
+        z-index: 10001;
+        transition: opacity 0.3s ease;
+    }
+    
+    .viewer-photo-counter {
+        color: white;
+        font-size: 1rem;
+        font-weight: 500;
+    }
+    
+    .viewer-close-btn {
+        background: none;
+        border: none;
+        color: white;
+        font-size: 1.5rem;
+        cursor: pointer;
+        padding: 0.5rem;
+        opacity: 0.8;
+        transition: opacity 0.2s ease;
+    }
+    
+    .viewer-close-btn:hover {
+        opacity: 1;
+    }
+    
+    .viewer-image-container {
+        position: relative;
+        max-width: 90vw;
+        max-height: 90vh;
+        display: flex;
+        align-items: center;
+        justify-content: center;
+    }
+    
+    .viewer-loading {
+        position: absolute;
+        top: 50%;
+        left: 50%;
+        transform: translate(-50%, -50%);
+    }
+    
+    .viewer-image {
+        max-width: 100%;
+        max-height: 90vh;
+        object-fit: contain;
+        transition: opacity 0.3s ease;
+    }
+    
+    .viewer-image.hidden {
+        opacity: 0;
+    }
+    
+    .viewer-nav-button {
+        position: fixed;
+        top: 50%;
+        transform: translateY(-50%);
+        background: rgba(255, 255, 255, 0.1);
+        border: 1px solid rgba(255, 255, 255, 0.2);
+        color: white;
+        font-size: 2rem;
+        cursor: pointer;
+        padding: 1rem 0.75rem;
+        opacity: 0.7;
+        transition: all 0.2s ease;
+        z-index: 10001;
+    }
+    
+    .viewer-nav-button:hover {
+        background: rgba(255, 255, 255, 0.2);
+        opacity: 1;
+    }
+    
+    .viewer-nav-prev {
+        left: 2rem;
+    }
+    
+    .viewer-nav-next {
+        right: 2rem;
+    }
+    
+    .viewer-bottom-bar {
+        position: fixed;
+        bottom: 0;
+        left: 0;
+        right: 0;
+        height: 80px;
+        background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
+        display: flex;
+        justify-content: space-between;
+        align-items: center;
+        padding: 0 2rem;
+        z-index: 10001;
+        transition: opacity 0.3s ease;
+    }
+    
+    .viewer-photo-info {
+        color: white;
+    }
+    
+    .viewer-photo-name {
+        font-size: 1.1rem;
+        font-weight: 500;
+        margin-bottom: 0.25rem;
+    }
+    
+    .viewer-photo-date {
+        font-size: 0.9rem;
+        opacity: 0.8;
+    }
+    
+    .viewer-actions {
+        display: flex;
+        gap: 1rem;
+    }
+    
+    .viewer-action-btn {
+        background: rgba(255, 255, 255, 0.1);
+        border: 1px solid rgba(255, 255, 255, 0.2);
+        color: white;
+        font-size: 1.2rem;
+        cursor: pointer;
+        padding: 0.5rem 0.75rem;
+        border-radius: 0.25rem;
+        opacity: 0.8;
+        transition: all 0.2s ease;
+    }
+    
+    .viewer-action-btn:hover {
+        background: rgba(255, 255, 255, 0.2);
+        opacity: 1;
+    }
+    
+    /* Mobile responsive styles */
+    @@media (max-width: 768px) {
+        .viewer-nav-button {
+            font-size: 1.5rem;
+            padding: 0.75rem 0.5rem;
+        }
+        
+        .viewer-nav-prev {
+            left: 0.5rem;
+        }
+        
+        .viewer-nav-next {
+            right: 0.5rem;
+        }
+        
+        .viewer-top-bar,
+        .viewer-bottom-bar {
+            padding: 0 1rem;
+        }
+        
+        .viewer-photo-name {
+            font-size: 0.9rem;
+        }
+        
+        .viewer-photo-date {
+            font-size: 0.8rem;
+        }
+    }
+</style>
+
+@code {
+    private ElementReference overlayElement;
+    private string currentImageUrl = "";
+    private bool isLoading = true;
+    private bool controlsVisible = true;
+    private System.Timers.Timer? hideControlsTimer;
+    
+    protected override async Task OnInitializedAsync()
+    {
+        ImageViewerService.OnStateChanged += OnViewerStateChanged;
+        
+        if (ImageViewerService.IsViewerOpen)
+        {
+            await LoadCurrentImage();
+            await FocusOverlay();
+        }
+        
+        // Initialize auto-hide timer
+        hideControlsTimer = new System.Timers.Timer(3000);
+        hideControlsTimer.Elapsed += (s, e) => HideControls();
+        hideControlsTimer.AutoReset = false;
+        hideControlsTimer.Start();
+    }
+    
+    private async Task LoadCurrentImage()
+    {
+        if (ImageViewerService.CurrentImage == null)
+            return;
+            
+        isLoading = true;
+        StateHasChanged();
+        
+        try
+        {
+            var fullPath = await PhotoPathService.GetFullPathAsync(ImageViewerService.CurrentImage.RelativePath);
+            currentImageUrl = $"/api/images/photo/{ImageViewerService.CurrentImage.ImageId}?t={DateTime.Now.Ticks}";
+            
+            // Preload next and previous images
+            _ = PreloadAdjacentImages();
+        }
+        catch (Exception ex)
+        {
+            Logger.Error($"Error loading image: {ex.Message}");
+            currentImageUrl = "/images/placeholder.png";
+        }
+    }
+    
+    private async Task PreloadAdjacentImages()
+    {
+        if (ImageViewerService.PhotoCollection == null)
+            return;
+            
+        var tasks = new List<Task>();
+        
+        // Preload next image
+        if (ImageViewerService.CurrentImageIndex < ImageViewerService.PhotoCollection.Count - 1)
+        {
+            var nextImage = ImageViewerService.PhotoCollection[ImageViewerService.CurrentImageIndex + 1];
+            tasks.Add(PreloadImage($"/api/images/photo/{nextImage.ImageId}"));
+        }
+        
+        // Preload previous image
+        if (ImageViewerService.CurrentImageIndex > 0)
+        {
+            var prevImage = ImageViewerService.PhotoCollection[ImageViewerService.CurrentImageIndex - 1];
+            tasks.Add(PreloadImage($"/api/images/photo/{prevImage.ImageId}"));
+        }
+        
+        await Task.WhenAll(tasks);
+    }
+    
+    private async Task PreloadImage(string url)
+    {
+        try
+        {
+            await JSRuntime.InvokeVoidAsync("eval", $"new Image().src = '{url}'");
+        }
+        catch { }
+    }
+    
+    private void OnImageLoaded()
+    {
+        isLoading = false;
+        StateHasChanged();
+    }
+    
+    private void OnImageError()
+    {
+        isLoading = false;
+        currentImageUrl = "/images/placeholder.png";
+        StateHasChanged();
+    }
+    
+    private async Task NavigateNext()
+    {
+        ImageViewerService.NavigateNext();
+        await LoadCurrentImage();
+        ShowControls();
+    }
+    
+    private async Task NavigatePrevious()
+    {
+        ImageViewerService.NavigatePrevious();
+        await LoadCurrentImage();
+        ShowControls();
+    }
+    
+    private void CloseViewer()
+    {
+        ImageViewerService.CloseViewer();
+    }
+    
+    private void HandleBackdropClick()
+    {
+        CloseViewer();
+    }
+    
+    private async Task HandleKeyDown(KeyboardEventArgs e)
+    {
+        switch (e.Key)
+        {
+            case "Escape":
+                CloseViewer();
+                break;
+            case "ArrowRight":
+                await NavigateNext();
+                break;
+            case "ArrowLeft":
+                await NavigatePrevious();
+                break;
+        }
+    }
+    
+    private async Task FocusOverlay()
+    {
+        try
+        {
+            await overlayElement.FocusAsync();
+        }
+        catch { }
+    }
+    
+    private void ShowControls()
+    {
+        controlsVisible = true;
+        StateHasChanged();
+        
+        // Reset the timer
+        hideControlsTimer?.Stop();
+        hideControlsTimer?.Start();
+    }
+    
+    private void HideControls()
+    {
+        InvokeAsync(() =>
+        {
+            controlsVisible = false;
+            StateHasChanged();
+        });
+    }
+    
+    private async Task OpenInExplorer()
+    {
+        if (ImageViewerService.CurrentImage == null)
+            return;
+            
+        try
+        {
+            var fullPath = await PhotoPathService.GetFullPathAsync(ImageViewerService.CurrentImage.RelativePath);
+            var directory = System.IO.Path.GetDirectoryName(fullPath);
+            
+            if (!string.IsNullOrEmpty(directory))
+            {
+                System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
+                {
+                    FileName = directory,
+                    UseShellExecute = true
+                });
+            }
+        }
+        catch (Exception ex)
+        {
+            Logger.Error($"Error opening folder: {ex.Message}");
+        }
+    }
+    
+    private async Task OpenExternal()
+    {
+        if (ImageViewerService.CurrentImage == null)
+            return;
+            
+        try
+        {
+            var fullPath = await PhotoPathService.GetFullPathAsync(ImageViewerService.CurrentImage.RelativePath);
+            
+            if (System.IO.File.Exists(fullPath))
+            {
+                System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
+                {
+                    FileName = fullPath,
+                    UseShellExecute = true
+                });
+            }
+        }
+        catch (Exception ex)
+        {
+            Logger.Error($"Error opening image: {ex.Message}");
+        }
+    }
+    
+    private void OnViewerStateChanged()
+    {
+        InvokeAsync(async () =>
+        {
+            if (ImageViewerService.IsViewerOpen)
+            {
+                await LoadCurrentImage();
+                await FocusOverlay();
+            }
+            StateHasChanged();
+        });
+    }
+    
+    public void Dispose()
+    {
+        ImageViewerService.OnStateChanged -= OnViewerStateChanged;
+        hideControlsTimer?.Dispose();
+    }
+}
\ No newline at end of file
diff --git a/src/MyPhotoHelper/Components/Shared/ImageViewer.razor b/src/MyPhotoHelper/Components/Shared/ImageViewer.razor
index 2a959e2..5f9a230 100644
--- a/src/MyPhotoHelper/Components/Shared/ImageViewer.razor
+++ b/src/MyPhotoHelper/Components/Shared/ImageViewer.razor
@@ -6,6 +6,7 @@
 @inject IPhotoPathService PhotoPathService
 @inject IToastService ToastService
 @inject IGalleryUpdateService GalleryUpdateService
+@inject IImageViewerService ImageViewerService
 @inject MyPhotoHelperDbContext DbContext
 @implements IDisposable
 
@@ -98,6 +99,9 @@
     [Parameter] public string ContainerClass { get; set; } = "thumbnail-container";
     [Parameter] public int ThumbnailSize { get; set; } = 150;
     [Parameter] public RenderFragment? AdditionalContent { get; set; }
+    [Parameter] public bool UseFullScreenViewer { get; set; } = false;
+    [Parameter] public List<tbl_images>? PhotoCollection { get; set; }
+    [Parameter] public int PhotoIndex { get; set; } = 0;
     
     // Check if this image is a screenshot by looking at the analysis data
     private bool IsScreenshot => Photo.tbl_image_analysis?.ImageCategory == "screenshot";
@@ -115,23 +119,32 @@
             
             if (Photo != null)
             {
-                // Get the full path from settings
-                var fullPath = await GetFullPath();
-                Logger.Info($"Full path resolved to: {fullPath}");
-                
-                if (!string.IsNullOrEmpty(fullPath) && System.IO.File.Exists(fullPath))
+                // If using full-screen viewer, open it instead of external app
+                if (UseFullScreenViewer && PhotoCollection != null)
                 {
-                    Logger.Info($"File exists, opening: {fullPath}");
-                    System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
-                    {
-                        FileName = fullPath,
-                        UseShellExecute = true
-                    });
-                    Logger.Info($"Process.Start executed successfully");
+                    Logger.Info($"Opening full-screen viewer for photo: {Photo.RelativePath}");
+                    ImageViewerService.OpenViewer(PhotoCollection, PhotoIndex);
                 }
                 else
                 {
-                    Logger.Error($"File not found or path empty: {fullPath}");
+                    // Get the full path from settings
+                    var fullPath = await GetFullPath();
+                    Logger.Info($"Full path resolved to: {fullPath}");
+                    
+                    if (!string.IsNullOrEmpty(fullPath) && System.IO.File.Exists(fullPath))
+                    {
+                        Logger.Info($"File exists, opening: {fullPath}");
+                        System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
+                        {
+                            FileName = fullPath,
+                            UseShellExecute = true
+                        });
+                        Logger.Info($"Process.Start executed successfully");
+                    }
+                    else
+                    {
+                        Logger.Error($"File not found or path empty: {fullPath}");
+                    }
                 }
                 
                 // Also trigger the callback if provided
diff --git a/src/MyPhotoHelper/Controllers/ImagesController.cs b/src/MyPhotoHelper/Controllers/ImagesController.cs
index e402353..d33f69b 100644
--- a/src/MyPhotoHelper/Controllers/ImagesController.cs
+++ b/src/MyPhotoHelper/Controllers/ImagesController.cs
@@ -34,6 +34,90 @@ public ImagesController(MyPhotoHelperDbContext context, IPathService pathService
         }
     }
 
+    [HttpGet("photo/{id}")]
+    public async Task<IActionResult> GetPhoto(int id)
+    {
+        try
+        {
+            var image = await _context.tbl_images
+                .Include(img => img.ScanDirectory)
+                .AsNoTracking()
+                .FirstOrDefaultAsync(img => img.ImageId == id && img.IsDeleted == 0 && img.FileExists == 1);
+
+            if (image == null)
+            {
+                Logger.Error($"Image not found with ID: {id}");
+                return NotFound();
+            }
+
+            if (image.ScanDirectory == null)
+            {
+                Logger.Error($"Scan directory not loaded for image {id}");
+                return NotFound("Scan directory not found");
+            }
+
+            // Normalize the path to handle any path separator issues
+            var normalizedRelativePath = image.RelativePath.Replace('/', Path.DirectorySeparatorChar).Replace('\\', Path.DirectorySeparatorChar);
+            var fullPath = Path.Combine(image.ScanDirectory.DirectoryPath, normalizedRelativePath);
+            
+            if (!System.IO.File.Exists(fullPath))
+            {
+                Logger.Error($"File not found at path: {fullPath}");
+                return NotFound("File not found");
+            }
+
+            // Check if this is a HEIC file and convert if necessary
+            var extension = (image.FileExtension ?? "").ToLowerInvariant();
+            var isHeicFile = extension == ".heic" || extension == ".heif";
+
+            if (isHeicFile && _pythonEnv != null)
+            {
+                try
+                {
+                    Logger.Info($"Converting HEIC file for full view: {image.FileName}");
+                    
+                    // Convert HEIC to JPEG for display
+                    var heicBytes = await _thumbnailCacheService.GetCachedHeicThumbnailAsync(fullPath, 2000); // Larger size for full view
+                    
+                    if (heicBytes != null)
+                    {
+                        Logger.Info($"Successfully converted HEIC file for {image.FileName}");
+                        return File(heicBytes, "image/jpeg");
+                    }
+                }
+                catch (Exception ex)
+                {
+                    Logger.Error($"HEIC conversion failed for {image.FileName}: {ex.Message}");
+                }
+            }
+
+            // Return the original file
+            var fileBytes = await System.IO.File.ReadAllBytesAsync(fullPath);
+            var contentType = GetContentType(extension);
+            return File(fileBytes, contentType);
+        }
+        catch (Exception ex)
+        {
+            Logger.Error($"Error serving photo {id}: {ex.Message}");
+            return StatusCode(500);
+        }
+    }
+
+    private string GetContentType(string extension)
+    {
+        return extension?.ToLowerInvariant() switch
+        {
+            ".jpg" or ".jpeg" => "image/jpeg",
+            ".png" => "image/png",
+            ".gif" => "image/gif",
+            ".bmp" => "image/bmp",
+            ".webp" => "image/webp",
+            ".svg" => "image/svg+xml",
+            ".heic" or ".heif" => "image/heic",
+            _ => "application/octet-stream"
+        };
+    }
+
     [HttpGet("{id}/thumbnail")]
     public async Task<IActionResult> GetThumbnail(int id)
     {
@@ -299,19 +383,4 @@ public async Task<IActionResult> GetImage(int id)
             return StatusCode(500);
         }
     }
-
-    private string GetContentType(string extension)
-    {
-        return extension.ToLower() switch
-        {
-            ".jpg" or ".jpeg" => "image/jpeg",
-            ".png" => "image/png",
-            ".gif" => "image/gif",
-            ".bmp" => "image/bmp",
-            ".webp" => "image/webp",
-            ".heic" => "image/heic",
-            ".heif" => "image/heif",
-            _ => "application/octet-stream"
-        };
-    }
 }
\ No newline at end of file
diff --git a/src/MyPhotoHelper/Pages/Gallery.razor b/src/MyPhotoHelper/Pages/Gallery.razor
index 494c300..0c51928 100644
--- a/src/MyPhotoHelper/Pages/Gallery.razor
+++ b/src/MyPhotoHelper/Pages/Gallery.razor
@@ -3,6 +3,9 @@
 
 <PageTitle>Gallery - MyPhotoHelper</PageTitle>
 
+<!-- Full-screen viewer component -->
+<FullScreenViewer />
+
 <AppErrorBoundary>
     <ChildContent>
         <div class="w-full gallery-page">
@@ -180,11 +183,16 @@
                                     else
                                     {
                                         <div class="photo-grid">
-                                            @foreach (var photo in monthGroup.Photos)
+                                            @for (int i = 0; i < monthGroup.Photos.Count; i++)
                                             {
+                                                var index = i; // Capture for closure
+                                                var photo = monthGroup.Photos[index];
                                                 <ImageViewer Photo="photo" 
                                                            ContainerClass="@(isCompactView ? "thumbnail-container-compact" : "thumbnail-container")"
-                                                           ShowTime="true" />
+                                                           ShowTime="true"
+                                                           UseFullScreenViewer="true"
+                                                           PhotoCollection="monthGroup.Photos"
+                                                           PhotoIndex="index" />
                                             }
                                         </div>
                                     }
diff --git a/src/MyPhotoHelper/Pages/Gallery.razor.cs b/src/MyPhotoHelper/Pages/Gallery.razor.cs
index c84c502..9c4a7f8 100644
--- a/src/MyPhotoHelper/Pages/Gallery.razor.cs
+++ b/src/MyPhotoHelper/Pages/Gallery.razor.cs
@@ -16,6 +16,7 @@ public partial class Gallery : ComponentBase, IDisposable
         [Inject] private IBackgroundPhotoLoader BackgroundPhotoLoader { get; set; } = null!;
         [Inject] private IGalleryStateService GalleryStateService { get; set; } = null!;
         [Inject] private IGalleryUpdateService GalleryUpdateService { get; set; } = null!;
+        [Inject] private IImageViewerService ImageViewerService { get; set; } = null!;
         [Inject] private ILogger<Gallery> _logger { get; set; } = null!;
 
         private class YearGroup
diff --git a/src/MyPhotoHelper/Services/ImageViewerService.cs b/src/MyPhotoHelper/Services/ImageViewerService.cs
new file mode 100644
index 0000000..30472e3
--- /dev/null
+++ b/src/MyPhotoHelper/Services/ImageViewerService.cs
@@ -0,0 +1,125 @@
+using MyPhotoHelper.Models;
+
+namespace MyPhotoHelper.Services
+{
+    public interface IImageViewerService
+    {
+        event Action? OnStateChanged;
+        
+        bool IsViewerOpen { get; }
+        int CurrentImageIndex { get; }
+        List<tbl_images>? PhotoCollection { get; }
+        tbl_images? CurrentImage { get; }
+        
+        void OpenViewer(List<tbl_images> photos, int startIndex = 0);
+        void CloseViewer();
+        void NavigateNext();
+        void NavigatePrevious();
+        void NavigateToIndex(int index);
+    }
+    
+    public class ImageViewerService : IImageViewerService
+    {
+        public event Action? OnStateChanged;
+        
+        private bool _isViewerOpen;
+        private int _currentImageIndex;
+        private List<tbl_images>? _photoCollection;
+        
+        public bool IsViewerOpen 
+        { 
+            get => _isViewerOpen;
+            private set
+            {
+                if (_isViewerOpen != value)
+                {
+                    _isViewerOpen = value;
+                    OnStateChanged?.Invoke();
+                }
+            }
+        }
+        
+        public int CurrentImageIndex 
+        { 
+            get => _currentImageIndex;
+            private set
+            {
+                if (_currentImageIndex != value)
+                {
+                    _currentImageIndex = value;
+                    OnStateChanged?.Invoke();
+                }
+            }
+        }
+        
+        public List<tbl_images>? PhotoCollection 
+        { 
+            get => _photoCollection;
+            private set
+            {
+                _photoCollection = value;
+                OnStateChanged?.Invoke();
+            }
+        }
+        
+        public tbl_images? CurrentImage 
+        {
+            get
+            {
+                if (PhotoCollection == null || CurrentImageIndex < 0 || CurrentImageIndex >= PhotoCollection.Count)
+                    return null;
+                return PhotoCollection[CurrentImageIndex];
+            }
+        }
+        
+        public void OpenViewer(List<tbl_images> photos, int startIndex = 0)
+        {
+            if (photos == null || photos.Count == 0)
+                return;
+                
+            PhotoCollection = photos;
+            CurrentImageIndex = Math.Max(0, Math.Min(startIndex, photos.Count - 1));
+            IsViewerOpen = true;
+        }
+        
+        public void CloseViewer()
+        {
+            IsViewerOpen = false;
+            PhotoCollection = null;
+            CurrentImageIndex = 0;
+        }
+        
+        public void NavigateNext()
+        {
+            if (PhotoCollection == null || PhotoCollection.Count == 0)
+                return;
+                
+            if (CurrentImageIndex < PhotoCollection.Count - 1)
+            {
+                CurrentImageIndex++;
+            }
+        }
+        
+        public void NavigatePrevious()
+        {
+            if (PhotoCollection == null || PhotoCollection.Count == 0)
+                return;
+                
+            if (CurrentImageIndex > 0)
+            {
+                CurrentImageIndex--;
+            }
+        }
+        
+        public void NavigateToIndex(int index)
+        {
+            if (PhotoCollection == null || PhotoCollection.Count == 0)
+                return;
+                
+            if (index >= 0 && index < PhotoCollection.Count)
+            {
+                CurrentImageIndex = index;
+            }
+        }
+    }
+}
\ No newline at end of file
