@using FaceVault.Services
@using FaceVault.Models
@inject IFileOpenService FileOpenService
@inject IJSRuntime JSRuntime
@inject ILogger<ImageViewer> Logger

<div class="col-6 col-sm-4 col-md-3 col-lg-2">
    <div class="card border-0 shadow-sm photo-card">
        <div class="photo-container position-relative" @onclick="() => OpenImage()" @onclick:stopPropagation="true">
            <ImageThumbnail Photo="Photo" />
            
            <!-- Photo overlay with info and dropdown -->
            <div class="photo-overlay">
                <div class="d-flex justify-content-between align-items-start h-100">
                    <div class="flex-grow-1 overlay-click-area">
                        <div class="d-flex flex-column align-items-center justify-content-center h-100">
                            <span class="oi oi-external-link mb-1" aria-hidden="true"></span>
                            <small class="text-white">
                                @if (ShowTime && Photo.DateTaken.HasValue)
                                {
                                    @Photo.DateTaken.Value.ToString("HH:mm")
                                }
                                else if (ShowTime)
                                {
                                    @Photo.DateCreated.ToString("HH:mm")
                                }
                            </small>
                        </div>
                    </div>
                    
                    <!-- Custom Dropdown Menu -->
                    <div class="custom-dropdown" @onclick:stopPropagation="true">
                        <button class="btn btn-sm btn-outline-light dropdown-btn" type="button" 
                                @onclick="ToggleDropdown" 
                                @onclick:stopPropagation="true" title="More options">
                            <span class="oi oi-menu" aria-hidden="true"></span>
                        </button>
                        @if (isDropdownOpen)
                        {
                            <div class="custom-dropdown-menu">
                                <button class="custom-dropdown-item" @onclick="HandleOpenImage" @onclick:stopPropagation="true">
                                    <span class="oi oi-external-link me-2" aria-hidden="true"></span>
                                    Open Image
                                </button>
                                <button class="custom-dropdown-item" @onclick="HandleCopyPath" @onclick:stopPropagation="true">
                                    <span class="oi oi-clipboard me-2" aria-hidden="true"></span>
                                    Copy Path
                                </button>
                                <button class="custom-dropdown-item" @onclick="HandleOpenLocation" @onclick:stopPropagation="true">
                                    <span class="oi oi-folder-open me-2" aria-hidden="true"></span>
                                    Open Location
                                </button>
                                <hr class="dropdown-divider my-1" />
                                <button class="custom-dropdown-item" @onclick="HandleShowProperties" @onclick:stopPropagation="true">
                                    <span class="oi oi-info me-2" aria-hidden="true"></span>
                                    Properties
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Image Properties Dialog -->
<ImagePropertiesDialog Image="@Photo" IsVisible="@showPropertiesDialog" OnClose="ClosePropertiesDialog" />

@code {
    [Parameter] public Models.Image Photo { get; set; } = default!;
    [Parameter] public bool ShowTime { get; set; } = true;
    [Parameter] public EventCallback<Models.Image> OnImageClick { get; set; }
    
    private bool isDropdownOpen = false;
    private bool showPropertiesDialog = false;

    private void OpenImage()
    {
        try
        {
            if (Photo?.FilePath != null)
            {
                Logger.LogInformation("Opening image: {FilePath}", Photo.FilePath);
                FileOpenService.OpenInDefaultViewer(Photo.FilePath);
                
                // Also trigger the callback if provided
                if (OnImageClick.HasDelegate)
                {
                    OnImageClick.InvokeAsync(Photo);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error opening image: {FilePath}", Photo?.FilePath);
        }
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
        StateHasChanged();
    }

    private void HandleOpenImage()
    {
        try
        {
            OpenImage();
        }
        finally
        {
            CloseDropdown();
        }
    }

    private async Task HandleCopyPath()
    {
        try
        {
            if (Photo?.FilePath != null)
            {
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Photo.FilePath);
                Logger.LogInformation("Copied path to clipboard: {FilePath}", Photo.FilePath);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error copying image path to clipboard");
        }
        finally
        {
            CloseDropdown();
        }
    }

    private void HandleOpenLocation()
    {
        try
        {
            if (Photo?.FilePath != null && File.Exists(Photo.FilePath))
            {
                var directory = Path.GetDirectoryName(Photo.FilePath);
                if (!string.IsNullOrEmpty(directory))
                {
                    System.Diagnostics.Process.Start("explorer.exe", $"/select,\"{Photo.FilePath}\"");
                    Logger.LogInformation("Opened location for: {FilePath}", Photo.FilePath);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error opening image location: {FilePath}", Photo?.FilePath);
        }
        finally
        {
            CloseDropdown();
        }
    }

    private void CloseDropdown()
    {
        isDropdownOpen = false;
        StateHasChanged();
    }

    private void HandleShowProperties()
    {
        try
        {
            showPropertiesDialog = true;
            StateHasChanged();
        }
        finally
        {
            CloseDropdown();
        }
    }

    private void ClosePropertiesDialog()
    {
        showPropertiesDialog = false;
        StateHasChanged();
    }
}

<style>
    .photo-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        cursor: pointer;
    }

    .photo-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2) !important;
    }

    .photo-container {
        aspect-ratio: 1;
        overflow: hidden;
        border-radius: 0.375rem;
    }

    .photo-thumbnail {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .photo-card:hover .photo-thumbnail {
        transform: scale(1.05);
    }

    .photo-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
        color: white;
        padding: 0.5rem;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .photo-card:hover .photo-overlay {
        opacity: 1;
    }

    .overlay-click-area {
        cursor: pointer;
    }

    .custom-dropdown {
        position: relative;
        display: inline-block;
    }

    .dropdown-btn {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
        border: 1px solid rgba(255, 255, 255, 0.3);
        background-color: rgba(0, 0, 0, 0.2);
    }

    .dropdown-btn:hover {
        background-color: rgba(255, 255, 255, 0.2);
        border-color: rgba(255, 255, 255, 0.5);
    }

    .custom-dropdown-menu {
        position: absolute;
        top: 100%;
        right: 0;
        background-color: white;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        min-width: 150px;
        z-index: 1000;
        padding: 0.5rem 0;
        animation: fadeIn 0.15s ease-in;
    }

    .custom-dropdown-item {
        display: block;
        width: 100%;
        padding: 0.5rem 0.75rem;
        clear: both;
        font-weight: 400;
        color: #212529;
        text-align: inherit;
        text-decoration: none;
        white-space: nowrap;
        background-color: transparent;
        border: 0;
        font-size: 0.875rem;
        cursor: pointer;
    }

    .custom-dropdown-item:hover {
        background-color: #0d6efd;
        color: white;
    }

    .custom-dropdown-item:focus {
        background-color: #0d6efd;
        color: white;
        outline: 0;
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
</style>