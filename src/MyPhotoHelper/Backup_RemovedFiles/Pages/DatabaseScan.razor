@page "/database-scan"
@using FaceVault.Services
@using FaceVault.Data
@using FaceVault.Models
@using Microsoft.EntityFrameworkCore
@inject IPhotoScannerService PhotoScannerService
@inject IFastPhotoScannerService FastPhotoScannerService
@inject ISettingsService SettingsService
@inject IDatabaseStatsService DatabaseStatsService
@inject IDatabaseSyncService DatabaseSyncService
@inject IScreenshotDatabaseService ScreenshotDatabaseService
@inject IDuplicateDetectionService DuplicateDetectionService
@inject NavigationManager Navigation
@inject ILogger<DatabaseScan> Logger
@implements IDisposable

<PageTitle>Database Scan - FaceVault</PageTitle>

<FaceVault.Components.ErrorBoundary PageName="Database Scan">

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-6">
                <span class="oi oi-hard-drive me-3" aria-hidden="true"></span>
                Database Scan
            </h1>
            <p class="lead">Scan your photo directory and populate the database with image metadata</p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <!-- Scan Configuration -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-cog" aria-hidden="true"></span> Scan Configuration</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label for="scanDirectory" class="form-label">Directory to Scan</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="scanDirectory" 
                                       value="@scanDirectory" readonly>
                                <span class="input-group-text bg-light">
                                    <span class="oi oi-folder" aria-hidden="true"></span>
                                </span>
                            </div>
                            <div class="form-text">Directory: <strong>@scanDirectory</strong></div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="includeSubdirectories" 
                                       checked="@includeSubdirectories" disabled>
                                <label class="form-check-label" for="includeSubdirectories">
                                    Include subdirectories
                                </label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="overwriteExisting" 
                                       checked="@overwriteExisting" disabled>
                                <label class="form-check-label" for="overwriteExisting">
                                    Update existing records
                                </label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="useFastScanner" 
                                       checked="@useFastScanner" disabled>
                                <label class="form-check-label" for="useFastScanner">
                                    <strong>Fast scan mode</strong>
                                    <br><small class="text-muted">10x faster, basic metadata only</small>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Scan Progress -->
            @if (isScanning || scanResult != null)
            {
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <span class="oi oi-@(isScanning ? "media-play" : "check")" aria-hidden="true"></span> 
                            Database Scan Progress
                        </h5>
                        @if (isScanning)
                        {
                            <button class="btn btn-outline-danger btn-sm" @onclick="CancelScan">
                                <span class="oi oi-media-stop" aria-hidden="true"></span> Cancel
                            </button>
                        }
                    </div>
                    <div class="card-body">
                        @if (isScanning && scanProgress != null)
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between mb-2">
                                    <span>@scanProgress.Message</span>
                                    <span>@scanProgress.ProcessedCount / @scanProgress.TotalCount</span>
                                </div>
                                <div class="progress mb-2" style="height: 24px;">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" 
                                         style="width: @(scanProgress.PercentComplete)%" 
                                         aria-valuenow="@(scanProgress.PercentComplete)" 
                                         aria-valuemin="0" aria-valuemax="100">
                                        @(scanProgress.PercentComplete.ToString("F1"))%
                                    </div>
                                </div>
                                
                                <div class="row text-center">
                                    <div class="col-md-2">
                                        <small class="text-muted">Current File:</small><br>
                                        <span class="small text-truncate d-block">@scanProgress.CurrentFile</span>
                                    </div>
                                    <div class="col-md-2">
                                        <small class="text-muted">Phase:</small><br>
                                        <span class="badge bg-info">@scanProgress.Phase</span>
                                    </div>
                                    <div class="col-md-2">
                                        <small class="text-muted">Found:</small><br>
                                        <strong class="text-primary">@scanProgress.TotalCount</strong>
                                    </div>
                                    <div class="col-md-2">
                                        <small class="text-muted">Processed:</small><br>
                                        <strong class="text-success">@scanProgress.ProcessedCount</strong>
                                    </div>
                                    <div class="col-md-2">
                                        <small class="text-muted">Progress:</small><br>
                                        <strong>@(scanProgress.PercentComplete.ToString("F1"))%</strong>
                                    </div>
                                    <div class="col-md-2">
                                        <small class="text-muted">Speed:</small><br>
                                        <strong>@currentSpeed files/sec</strong>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (scanResult != null && !isScanning)
                        {
                            <div class="alert alert-@(scanResult.IsSuccess ? "success" : scanResult.IsCancelled ? "warning" : "danger")" role="alert">
                                <h6 class="alert-heading">
                                    @if (scanResult.IsSuccess)
                                    {
                                        <span class="oi oi-check" aria-hidden="true"></span><text> Database Scan Completed Successfully</text>
                                    }
                                    else if (scanResult.IsCancelled)
                                    {
                                        <span class="oi oi-warning" aria-hidden="true"></span><text> Database Scan Cancelled</text>
                                    }
                                    else
                                    {
                                        <span class="oi oi-x" aria-hidden="true"></span><text> Database Scan Failed</text>
                                    }
                                </h6>
                                <hr>
                                <div class="row">
                                    <div class="col-md-2">
                                        <strong class="text-primary">@scanResult.TotalFilesFound</strong><br>
                                        <small>Files Found</small>
                                    </div>
                                    <div class="col-md-2">
                                        <strong class="text-success">@scanResult.NewImagesCount</strong><br>
                                        <small>New Images</small>
                                    </div>
                                    <div class="col-md-2">
                                        <strong class="text-info">@(scanResult.TotalFilesFound - scanResult.NewImagesCount - scanResult.SkippedCount)</strong><br>
                                        <small>Updated</small>
                                    </div>
                                    <div class="col-md-2">
                                        <strong class="text-warning">@scanResult.SkippedCount</strong><br>
                                        <small>Skipped</small>
                                    </div>
                                    <div class="col-md-2">
                                        <strong class="text-danger">@scanResult.ErrorCount</strong><br>
                                        <small>Errors</small>
                                    </div>
                                    <div class="col-md-2">
                                        <strong class="text-secondary">@(scanResult.Duration.ToString(@"mm\:ss"))</strong><br>
                                        <small>Duration</small>
                                    </div>
                                </div>
                                @if (scanResult.Duration.TotalSeconds > 0)
                                {
                                    <hr>
                                    <p class="mb-0">
                                        Processing Speed: <strong>@(scanResult.FilesPerSecond.ToString("F1"))</strong> files/sec |
                                        Database Records: <strong>@totalDatabaseImages</strong> images
                                    </p>
                                }
                                @if (!string.IsNullOrEmpty(scanResult.Error))
                                {
                                    <hr>
                                    <p class="mb-0 text-danger"><strong>Error:</strong> @scanResult.Error</p>
                                }
                            </div>

                            @if (scanResult.Errors.Any())
                            {
                                <div class="alert alert-warning" role="alert">
                                    <h6 class="alert-heading">Processing Errors (@scanResult.Errors.Count)</h6>
                                    <details>
                                        <summary class="btn btn-link p-0">Show Error Details</summary>
                                        <div class="mt-2">
                                            @foreach (var error in scanResult.Errors.Take(20))
                                            {
                                                <div class="small text-muted mb-1">@error</div>
                                            }
                                            @if (scanResult.Errors.Count > 20)
                                            {
                                                <div class="small text-muted">... and @(scanResult.Errors.Count - 20) more errors</div>
                                            }
                                        </div>
                                    </details>
                                </div>
                            }
                        }
                    </div>
                </div>
            }

            <!-- Screenshot Detection Section -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <span class="oi oi-camera-slr" aria-hidden="true"></span> Screenshot Detection
                    </h5>
                </div>
                <div class="card-body">
                    @if (screenshotStats != null)
                    {
                        <div class="row text-center mb-3">
                            <div class="col-md-3">
                                <h5 class="text-primary">@screenshotStats.TotalImages</h5>
                                <small>Total Images</small>
                            </div>
                            <div class="col-md-3">
                                <h5 class="text-success">@screenshotStats.PhotoCount</h5>
                                <small>Photos</small>
                            </div>
                            <div class="col-md-3">
                                <h5 class="text-warning">@screenshotStats.ScreenshotCount</h5>
                                <small>Screenshots</small>
                            </div>
                            <div class="col-md-3">
                                <h5 class="text-info">@screenshotStats.UnknownCount</h5>
                                <small>Unknown</small>
                            </div>
                        </div>

                        @if (screenshotStats.TotalImages > 0)
                        {
                            <div class="progress mb-3" style="height: 20px;">
                                <div class="progress-bar bg-success" role="progressbar" 
                                     style="width: @((double)screenshotStats.PhotoCount / screenshotStats.TotalImages * 100)%">
                                    Photos: @(screenshotStats.PhotoCount)
                                </div>
                                <div class="progress-bar bg-warning" role="progressbar" 
                                     style="width: @((double)screenshotStats.ScreenshotCount / screenshotStats.TotalImages * 100)%">
                                    Screenshots: @(screenshotStats.ScreenshotCount)
                                </div>
                                <div class="progress-bar bg-light text-dark" role="progressbar" 
                                     style="width: @((double)screenshotStats.UnknownCount / screenshotStats.TotalImages * 100)%">
                                    Unknown: @(screenshotStats.UnknownCount)
                                </div>
                            </div>
                        }
                    }

                    @if (isScreenshotScanning && screenshotProgress != null)
                    {
                        <div class="mb-3">
                            <div class="d-flex justify-content-between mb-2">
                                <span>Screenshot Detection Progress</span>
                                <span>@screenshotProgress.ProcessedImages / @screenshotProgress.TotalImages</span>
                            </div>
                            <div class="progress mb-2" style="height: 24px;">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" 
                                     style="width: @(screenshotProgress.ProgressPercentage)%" 
                                     aria-valuenow="@(screenshotProgress.ProgressPercentage)" 
                                     aria-valuemin="0" aria-valuemax="100">
                                    @(screenshotProgress.ProgressPercentage.ToString("F1"))%
                                </div>
                            </div>
                            
                            <div class="row text-center">
                                <div class="col-md-3">
                                    <small class="text-muted">Processing:</small><br>
                                    <span class="small text-truncate d-block">@screenshotProgress.CurrentFile</span>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">Screenshots Found:</small><br>
                                    <strong class="text-warning">@screenshotProgress.ScreenshotsFound</strong>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">Errors:</small><br>
                                    <strong class="text-danger">@screenshotProgress.ErrorCount</strong>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">Progress:</small><br>
                                    <strong>@(screenshotProgress.ProgressPercentage.ToString("F1"))%</strong>
                                </div>
                            </div>
                        </div>
                    }

                    @if (screenshotScanResult != null && !isScreenshotScanning)
                    {
                        <div class="alert alert-@(screenshotScanResult.WasCancelled ? "warning" : "success")" role="alert">
                            <h6 class="alert-heading">
                                @if (screenshotScanResult.WasCancelled)
                                {
                                    <span class="oi oi-warning" aria-hidden="true"></span><text> Screenshot Detection Cancelled</text>
                                }
                                else
                                {
                                    <span class="oi oi-check" aria-hidden="true"></span><text> Screenshot Detection Completed</text>
                                }
                            </h6>
                            <hr>
                            <div class="row">
                                <div class="col-md-3">
                                    <strong class="text-primary">@screenshotScanResult.TotalImages</strong><br>
                                    <small>Total Images</small>
                                </div>
                                <div class="col-md-3">
                                    <strong class="text-success">@screenshotScanResult.PhotosFound</strong><br>
                                    <small>Photos</small>
                                </div>
                                <div class="col-md-3">
                                    <strong class="text-warning">@screenshotScanResult.ScreenshotsFound</strong><br>
                                    <small>Screenshots</small>
                                </div>
                                <div class="col-md-3">
                                    <strong class="text-danger">@screenshotScanResult.ErrorCount</strong><br>
                                    <small>Errors</small>
                                </div>
                            </div>
                            <hr>
                            <p class="mb-0">
                                Duration: <strong>@(screenshotScanResult.Duration.ToString(@"mm\:ss"))</strong> | 
                                Processing Speed: <strong>@((screenshotScanResult.Duration.TotalSeconds > 0 ? screenshotScanResult.ProcessedImages / screenshotScanResult.Duration.TotalSeconds : 0).ToString("F1"))</strong> images/sec
                            </p>
                        </div>
                    }

                    <div class="d-flex justify-content-between">
                        <button class="btn btn-outline-info" @onclick="RefreshScreenshotStats">
                            <span class="oi oi-reload" aria-hidden="true"></span> Refresh Stats
                        </button>
                        <div>
                            @if (isScreenshotScanning)
                            {
                                <button class="btn btn-outline-danger me-2" @onclick="CancelScreenshotScan">
                                    <span class="oi oi-media-stop" aria-hidden="true"></span> Cancel
                                </button>
                            }
                            else
                            {
                                @if (screenshotStats != null && screenshotStats.UnknownCount > 0)
                                {
                                    <button class="btn btn-success me-2" @onclick="StartNewScreenshotScan" 
                                            disabled="@(isScreenshotScanning || isScanning)">
                                        <span class="oi oi-plus" aria-hidden="true"></span> 
                                        Scan New Screenshots (@screenshotStats.UnknownCount)
                                    </button>
                                }
                                <button class="btn btn-warning" @onclick="ShowFullScanWarning" 
                                        disabled="@(isScreenshotScanning || isScanning)">
                                    <span class="oi oi-reload" aria-hidden="true"></span> 
                                    Full Screenshot Scan
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Duplicate Detection Section -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <span class="oi oi-file" aria-hidden="true"></span> Duplicate Detection
                    </h5>
                </div>
                <div class="card-body">
                    @if (duplicateStats != null)
                    {
                        <div class="row text-center mb-3">
                            <div class="col-md-2">
                                <h5 class="text-primary">@duplicateStats.TotalImages</h5>
                                <small>Total Images</small>
                            </div>
                            <div class="col-md-2">
                                <h5 class="text-success">@duplicateStats.ImagesWithHashes</h5>
                                <small>With Hashes</small>
                            </div>
                            <div class="col-md-2">
                                <h5 class="text-warning">@duplicateStats.ImagesWithoutHashes</h5>
                                <small>Missing Hashes</small>
                            </div>
                            <div class="col-md-2">
                                <h5 class="text-info">@duplicateStats.UniqueImages</h5>
                                <small>Unique</small>
                            </div>
                            <div class="col-md-2">
                                <h5 class="text-danger">@duplicateStats.DuplicateImages</h5>
                                <small>Duplicates</small>
                            </div>
                            <div class="col-md-2">
                                <h5 class="text-secondary">@duplicateStats.TotalDuplicateSizeFormatted</h5>
                                <small>Wasted Space</small>
                            </div>
                        </div>

                        @if (duplicateStats.TotalImages > 0)
                        {
                            <div class="progress mb-3" style="height: 20px;">
                                <div class="progress-bar bg-success" role="progressbar" 
                                     style="width: @((double)duplicateStats.UniqueImages / duplicateStats.TotalImages * 100)%"
                                     title="Unique Images">
                                    @(duplicateStats.UniqueImages)
                                </div>
                                <div class="progress-bar bg-warning" role="progressbar" 
                                     style="width: @((double)duplicateStats.ImagesWithoutHashes / duplicateStats.TotalImages * 100)%"
                                     title="Missing Hashes">
                                    @(duplicateStats.ImagesWithoutHashes)
                                </div>
                                <div class="progress-bar bg-danger" role="progressbar" 
                                     style="width: @((double)duplicateStats.DuplicateImages / duplicateStats.TotalImages * 100)%"
                                     title="Duplicate Images">
                                    @(duplicateStats.DuplicateImages)
                                </div>
                            </div>
                        }
                    }

                    @if (isDuplicateScanning && duplicateProgress != null)
                    {
                        <div class="mb-3">
                            <div class="d-flex justify-content-between mb-2">
                                <span>Hash Calculation Progress</span>
                                <span>@duplicateProgress.ProcessedImages / @duplicateProgress.TotalImages</span>
                            </div>
                            <div class="progress mb-2" style="height: 24px;">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" 
                                     style="width: @(duplicateProgress.ProgressPercentage)%" 
                                     aria-valuenow="@(duplicateProgress.ProgressPercentage)" 
                                     aria-valuemin="0" aria-valuemax="100">
                                    @(duplicateProgress.ProgressPercentage.ToString("F1"))%
                                </div>
                            </div>
                            
                            <div class="row text-center">
                                <div class="col-md-3">
                                    <small class="text-muted">Processing:</small><br>
                                    <span class="small text-truncate d-block">@duplicateProgress.CurrentFileDisplay</span>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">Hashes Calculated:</small><br>
                                    <strong class="text-success">@duplicateProgress.ImagesWithHashes</strong>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">Duplicates Found:</small><br>
                                    <strong class="text-warning">@duplicateProgress.DuplicatesFound</strong>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">Progress:</small><br>
                                    <strong>@(duplicateProgress.ProgressPercentage.ToString("F1"))%</strong>
                                </div>
                            </div>
                        </div>
                    }

                    @if (duplicateScanResult != null && !isDuplicateScanning)
                    {
                        <div class="alert alert-@(duplicateScanResult.WasCancelled ? "warning" : "success")" role="alert">
                            <h6 class="alert-heading">
                                @if (duplicateScanResult.WasCancelled)
                                {
                                    <span class="oi oi-warning" aria-hidden="true"></span><text> Duplicate Detection Cancelled</text>
                                }
                                else
                                {
                                    <span class="oi oi-check" aria-hidden="true"></span><text> Duplicate Detection Completed</text>
                                }
                            </h6>
                            <hr>
                            <div class="row">
                                <div class="col-md-3">
                                    <strong class="text-primary">@duplicateScanResult.TotalImages</strong><br>
                                    <small>Total Images</small>
                                </div>
                                <div class="col-md-3">
                                    <strong class="text-success">@duplicateScanResult.HashesCalculated</strong><br>
                                    <small>Hashes Calculated</small>
                                </div>
                                <div class="col-md-3">
                                    <strong class="text-warning">@duplicateScanResult.DuplicatesFound</strong><br>
                                    <small>Duplicates Found</small>
                                </div>
                                <div class="col-md-3">
                                    <strong class="text-danger">@duplicateScanResult.ErrorCount</strong><br>
                                    <small>Errors</small>
                                </div>
                            </div>
                            <hr>
                            <p class="mb-0">
                                Duration: <strong>@(duplicateScanResult.Duration.ToString(@"mm\:ss"))</strong> | 
                                Processing Speed: <strong>@((duplicateScanResult.Duration.TotalSeconds > 0 ? duplicateScanResult.ProcessedImages / duplicateScanResult.Duration.TotalSeconds : 0).ToString("F1"))</strong> images/sec
                            </p>
                        </div>
                    }

                    <div class="d-flex justify-content-between">
                        <button class="btn btn-outline-info" @onclick="RefreshDuplicateStats">
                            <span class="oi oi-reload" aria-hidden="true"></span> Refresh Stats
                        </button>
                        <div>
                            @if (isDuplicateScanning)
                            {
                                <button class="btn btn-outline-danger me-2" @onclick="CancelDuplicateScan">
                                    <span class="oi oi-media-stop" aria-hidden="true"></span> Cancel
                                </button>
                            }
                            else if (duplicateStats != null && duplicateStats.ImagesWithoutHashes > 0)
                            {
                                <button class="btn btn-primary me-2" @onclick="StartDuplicateDetection" 
                                        disabled="@(isDuplicateScanning || isScanning || isScreenshotScanning)">
                                    @if (isDuplicateScanning)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    }
                                    <span class="oi oi-file" aria-hidden="true"></span> 
                                    Calculate Missing Hashes
                                </button>
                            }
                            @if (duplicateStats != null && duplicateStats.DuplicateGroups > 0)
                            {
                                <button class="btn btn-outline-warning" @onclick="ViewDuplicates">
                                    <span class="oi oi-eye" aria-hidden="true"></span> 
                                    View @duplicateStats.DuplicateGroups Duplicate Groups
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <button class="btn btn-outline-secondary" @onclick="GoBack">
                                <span class="oi oi-arrow-left" aria-hidden="true"></span> Back to Home
                            </button>
                        </div>
                        <div>
                            <button class="btn btn-primary" @onclick="StartDatabaseScan" 
                                    disabled="@(isScanning || isScreenshotScanning || string.IsNullOrEmpty(scanDirectory) || !Directory.Exists(scanDirectory))">
                                @if (isScanning)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                <span class="oi oi-hard-drive" aria-hidden="true"></span> 
                                Start Database Scan
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <!-- Current Database Status -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-graph" aria-hidden="true"></span> Current Database</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6 mb-3">
                            <h4 class="text-primary">@totalDatabaseImages</h4>
                            <small>Images in DB</small>
                        </div>
                        <div class="col-6 mb-3">
                            <h4 class="text-success">@processedImages</h4>
                            <small>Processed</small>
                        </div>
                        <div class="col-6">
                            <h4 class="text-info">@imagesWithFaces</h4>
                            <small>With Faces</small>
                        </div>
                        <div class="col-6">
                            <h4 class="text-warning">@totalPeople</h4>
                            <small>People</small>
                        </div>
                    </div>
                    <hr>
                    <button class="btn btn-outline-info w-100" @onclick="RefreshStats">
                        <span class="oi oi-reload" aria-hidden="true"></span> Refresh Statistics
                    </button>
                </div>
            </div>

            <!-- Supported File Types -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-document" aria-hidden="true"></span> Supported File Types</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex flex-wrap">
                        @foreach (var ext in supportedExtensions)
                        {
                            <span class="badge bg-secondary me-1 mb-1">@ext.ToUpper()</span>
                        }
                    </div>
                    <hr>
                    <h6>Scan Settings:</h6>
                    <ul class="list-unstyled small">
                        <li><strong>Batch Size:</strong> @batchSize files</li>
                        <li><strong>Include Subdirs:</strong> @(includeSubdirectories ? "Yes" : "No")</li>
                        <li><strong>Update Existing:</strong> @(overwriteExisting ? "Yes" : "No")</li>
                        <li><strong>Scanner Mode:</strong> @(useFastScanner ? "Fast" : "Thorough")</li>
                    </ul>
                </div>
            </div>

            <!-- Tags Display -->
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><span class="oi oi-tags" aria-hidden="true"></span> Generated Tags</h5>
                    <button class="btn btn-outline-info btn-sm" @onclick="RefreshTags">
                        <span class="oi oi-reload" aria-hidden="true"></span>
                    </button>
                </div>
                <div class="card-body">
                    @if (allTags != null && allTags.Any())
                    {
                        <div class="row">
                            @foreach (var tag in allTags.Take(10))
                            {
                                <div class="col-12 mb-2">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="badge bg-primary">@tag.TagName</span>
                                        <small class="text-muted">@tag.ImageCount images</small>
                                    </div>
                                </div>
                            }
                        </div>
                        @if (allTags.Count > 10)
                        {
                            <hr>
                            <small class="text-muted">Showing top 10 of @allTags.Count total tags</small>
                        }
                    }
                    else if (allTags != null)
                    {
                        <div class="text-center text-muted">
                            <span class="oi oi-info" aria-hidden="true"></span>
                            <div>No tags found</div>
                            <small>Tags are generated during face detection</small>
                        </div>
                    }
                    else
                    {
                        <div class="text-center">
                            <div class="spinner-border spinner-border-sm text-muted" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="small text-muted mt-2">Loading tags...</div>
                        </div>
                    }
                </div>
            </div>

            <!-- Help Information -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-question-mark" aria-hidden="true"></span> Scan Information</h5>
                </div>
                <div class="card-body">
                    <h6>What this scan does:</h6>
                    <ul class="small">
                        <li>Finds all image files in the directory</li>
                        <li>Extracts file metadata (size, dates, etc.)</li>
                        <li>Reads EXIF data (camera, location, settings)</li>
                        <li>Calculates file hashes for duplicates</li>
                        <li>Populates the FaceVault database</li>
                        <li>Processes all files with current settings</li>
                    </ul>
                    
                    <h6 class="mt-3">Screenshot Detection:</h6>
                    <ul class="small">
                        <li><strong>Full Scan:</strong> Resets all statuses and re-analyzes everything</li>
                        <li><strong>New Scan:</strong> Only processes images with Unknown status</li>
                        <li>Uses AI algorithms to detect screenshots vs photos</li>
                        <li>Checks filename patterns, EXIF data, dimensions</li>
                        <li>Three states: Unknown, IsScreenshot, NotScreenshot</li>
                        <li>Differential scanning for better performance</li>
                    </ul>
                    
                    <h6 class="mt-3">Performance Tips:</h6>
                    <ul class="small">
                        <li><strong>Fast mode:</strong> 10x faster, parallel processing</li>
                        <li><strong>Thorough mode:</strong> Full EXIF, better quality</li>
                        <li>Larger batch sizes = faster database saves</li>
                        <li>Network drives will be slower</li>
                        <li>You can cancel anytime safely</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

</FaceVault.Components.ErrorBoundary>

<!-- Full Screenshot Scan Warning Modal -->
@if (showFullScanWarning)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <span class="oi oi-warning text-warning" aria-hidden="true"></span>
                        Full Screenshot Scan Warning
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideFullScanWarning"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning" role="alert">
                        <strong>Warning:</strong> This will reset ALL screenshot detection results to "Unknown" status before scanning.
                    </div>
                    <p>This action will:</p>
                    <ul>
                        <li>Reset all @(screenshotStats?.TotalImages ?? 0) images to Unknown status</li>
                        <li>Clear all previous screenshot detection results</li>
                        <li>Re-analyze every image in your database</li>
                        <li>Take significantly longer than the differential scan</li>
                    </ul>
                    <p><strong>Are you sure you want to proceed?</strong></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideFullScanWarning">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-warning" @onclick="ConfirmFullScreenshotScan">
                        <span class="oi oi-warning" aria-hidden="true"></span>
                        Yes, Reset and Scan All
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string scanDirectory = "";
    private bool includeSubdirectories = true;
    private bool overwriteExisting = true;
    private bool useFastScanner = true;
    private int batchSize = 100;
    private string[] supportedExtensions = Array.Empty<string>();

    private bool isScanning = false;
    private ScanProgress? scanProgress;
    private ScanResult? scanResult;
    private CancellationTokenSource? cancellationTokenSource;
    private string currentSpeed = "0";
    private DateTime scanStartTime;
    
    // Database statistics
    private int totalDatabaseImages = 0;
    private int processedImages = 0;
    private int imagesWithFaces = 0;
    private int totalPeople = 0;
    
    // Screenshot detection
    private bool isScreenshotScanning = false;
    private ScreenshotScanProgress? screenshotProgress;
    private ScreenshotScanResult? screenshotScanResult;
    private ScreenshotStatistics? screenshotStats;
    private CancellationTokenSource? screenshotCancellationTokenSource;
    private bool showFullScanWarning = false;
    
    // Tags
    private List<TagInfo>? allTags;
    
    // Duplicate detection
    private bool isDuplicateScanning = false;
    private DuplicateScanProgress? duplicateProgress;
    private DuplicateScanResult? duplicateScanResult;
    private DuplicateStatistics? duplicateStats;
    private CancellationTokenSource? duplicateCancellationTokenSource;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        try
        {
            // Load settings
            var settings = await SettingsService.GetSettingsAsync();
            scanDirectory = settings.PhotoDirectory;
            includeSubdirectories = settings.ScanSubdirectories;
            batchSize = settings.BatchSize;
            
            // Load supported extensions
            supportedExtensions = useFastScanner ? 
                FastPhotoScannerService.GetSupportedExtensions() : 
                PhotoScannerService.GetSupportedExtensions();
            
            // Load database statistics
            await RefreshStats();
            await RefreshScreenshotStats();
            await RefreshTags();
            await RefreshDuplicateStats();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading initial data: {Message}", ex.Message);
        }
    }

    private async Task RefreshStats()
    {
        try
        {
            var stats = await DatabaseStatsService.GetStatsAsync();
            totalDatabaseImages = stats.TotalImages;
            processedImages = stats.ProcessedImages;
            imagesWithFaces = stats.ImagesWithFaces;
            totalPeople = stats.TotalPeople;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing statistics: {Message}", ex.Message);
        }
    }


    private async Task StartDatabaseScan()
    {
        if (string.IsNullOrEmpty(scanDirectory) || !Directory.Exists(scanDirectory))
        {
            Logger.LogWarning("Invalid scan directory specified");
            return;
        }

        try
        {
            isScanning = true;
            scanResult = null;
            scanProgress = null;
            cancellationTokenSource = new CancellationTokenSource();
            scanStartTime = DateTime.UtcNow;
            StateHasChanged();

            Logger.LogInformation("Starting database scan of directory: {ScanDirectory}", scanDirectory);

            var progress = new Progress<ScanProgress>(async progress =>
            {
                scanProgress = progress;
                UpdateSpeed();
                await InvokeAsync(StateHasChanged);
            });

            // Update settings to match current scan preferences
            var settings = await SettingsService.GetSettingsAsync();
            settings.ScanSubdirectories = includeSubdirectories;
            settings.BatchSize = batchSize;
            await SettingsService.SaveSettingsAsync(settings);

            if (useFastScanner)
            {
                scanResult = await FastPhotoScannerService.ScanDirectoryAsync(
                    scanDirectory, 
                    progress, 
                    cancellationTokenSource.Token);
            }
            else
            {
                scanResult = await PhotoScannerService.ScanDirectoryAsync(
                    scanDirectory, 
                    progress, 
                    cancellationTokenSource.Token);
            }

            if (scanResult.IsSuccess)
            {
                Logger.LogInformation("Database scan completed successfully: {NewImagesCount} new images added", scanResult.NewImagesCount);
                
                // Validate data consistency and sync stats
                await DatabaseSyncService.ValidateDataConsistencyAsync();
                await DatabaseSyncService.SyncStatsAsync();
                
                // Generate detailed count report for debugging
                var countReport = await DatabaseSyncService.GetDetailedCountReportAsync();
                Logger.LogInformation("Post-scan count report: {CountReport}", countReport);
                
                await RefreshStats(); // Update statistics after successful scan
                
                // Check if screenshot filtering is enabled and if we have new images to scan
                var appSettings = await SettingsService.GetSettingsAsync();
                if (appSettings.EnableScreenshotFiltering && scanResult.NewImagesCount > 0)
                {
                    Logger.LogInformation("Automatically starting screenshot detection for {NewImagesCount} new images", scanResult.NewImagesCount);
                    
                    // Start screenshot detection for new images only
                    await StartNewScreenshotScan();
                }
            }
            else if (scanResult.IsCancelled)
            {
                Logger.LogInformation("Database scan was cancelled by user");
            }
            else
            {
                Logger.LogError("Database scan failed: {Error}", scanResult.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Database scan failed: {Message}", ex.Message);
            scanResult = new ScanResult
            {
                DirectoryPath = scanDirectory,
                Error = ex.Message,
                StartTime = scanStartTime,
                EndTime = DateTime.UtcNow
            };
        }
        finally
        {
            isScanning = false;
            cancellationTokenSource?.Dispose();
            cancellationTokenSource = null;
            StateHasChanged();
        }
    }

    private void UpdateSpeed()
    {
        if (scanProgress != null && scanProgress.ProcessedCount > 0)
        {
            var elapsed = DateTime.UtcNow - scanStartTime;
            if (elapsed.TotalSeconds > 0)
            {
                var speed = scanProgress.ProcessedCount / elapsed.TotalSeconds;
                currentSpeed = speed.ToString("F1");
            }
        }
    }

    private void CancelScan()
    {
        cancellationTokenSource?.Cancel();
        Logger.LogInformation("Database scan cancellation requested");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private async Task RefreshScreenshotStats()
    {
        try
        {
            screenshotStats = await ScreenshotDatabaseService.GetScreenshotStatisticsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing screenshot statistics: {Message}", ex.Message);
        }
    }

    private void ShowFullScanWarning()
    {
        showFullScanWarning = true;
        StateHasChanged();
    }

    private void HideFullScanWarning()
    {
        showFullScanWarning = false;
        StateHasChanged();
    }

    private async Task ConfirmFullScreenshotScan()
    {
        showFullScanWarning = false;
        StateHasChanged();
        
        // Give visual feedback that reset is happening
        if (screenshotStats != null)
        {
            screenshotStats.ScreenshotCount = 0;
            screenshotStats.PhotoCount = 0;
            screenshotStats.UnknownCount = screenshotStats.TotalImages;
        }
        StateHasChanged();
        
        await StartFullScreenshotScan();
    }

    private async Task StartFullScreenshotScan()
    {
        if (isScreenshotScanning || isScanning)
        {
            return;
        }

        try
        {
            isScreenshotScanning = true;
            screenshotScanResult = null;
            screenshotProgress = null;
            screenshotCancellationTokenSource = new CancellationTokenSource();
            
            // Reset the screenshot statistics to show that we're starting fresh
            if (screenshotStats != null)
            {
                screenshotStats.ScreenshotCount = 0;
                screenshotStats.PhotoCount = 0;
                screenshotStats.UnknownCount = screenshotStats.TotalImages; // All will be unknown after reset
            }
            
            StateHasChanged();

            Logger.LogInformation("Starting full screenshot detection scan (with reset)");

            var progress = new Progress<ScreenshotScanProgress>(async progress =>
            {
                screenshotProgress = progress;
                await InvokeAsync(StateHasChanged);
            });

            screenshotScanResult = await ScreenshotDatabaseService.FullScreenshotScanAsync(
                progress,
                screenshotCancellationTokenSource.Token);

            if (screenshotScanResult.WasCancelled)
            {
                Logger.LogInformation("Full screenshot detection scan was cancelled by user");
            }
            else
            {
                Logger.LogInformation("Full screenshot detection scan completed: {ScreenshotsFound} screenshots found out of {TotalImages} images", screenshotScanResult.ScreenshotsFound, screenshotScanResult.TotalImages);
                await RefreshScreenshotStats(); // Update statistics after successful scan
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Full screenshot detection scan failed: {Message}", ex.Message);
            screenshotScanResult = new ScreenshotScanResult
            {
                TotalImages = screenshotStats?.TotalImages ?? 0,
                ErrorCount = 1,
                WasCancelled = false,
                Duration = TimeSpan.Zero
            };
            screenshotScanResult.Errors.Add(ex.Message);
        }
        finally
        {
            isScreenshotScanning = false;
            screenshotCancellationTokenSource?.Dispose();
            screenshotCancellationTokenSource = null;
            await InvokeAsync(StateHasChanged);
            
            // Ensure UI is fully updated
            await Task.Delay(100);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task StartNewScreenshotScan()
    {
        if (isScreenshotScanning || isScanning)
        {
            return;
        }

        try
        {
            isScreenshotScanning = true;
            screenshotScanResult = null;
            screenshotProgress = null;
            screenshotCancellationTokenSource = new CancellationTokenSource();
            StateHasChanged();

            Logger.LogInformation("Starting new screenshot detection scan (unknown images only)");

            var progress = new Progress<ScreenshotScanProgress>(async progress =>
            {
                screenshotProgress = progress;
                await InvokeAsync(StateHasChanged);
            });

            screenshotScanResult = await ScreenshotDatabaseService.ScanNewScreenshotsAsync(
                progress,
                screenshotCancellationTokenSource.Token);

            if (screenshotScanResult.WasCancelled)
            {
                Logger.LogInformation("New screenshot detection scan was cancelled by user");
            }
            else
            {
                Logger.LogInformation("New screenshot detection scan completed: {ScreenshotsFound} screenshots found out of {TotalImages} images", screenshotScanResult.ScreenshotsFound, screenshotScanResult.TotalImages);
                await RefreshScreenshotStats(); // Update statistics after successful scan
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "New screenshot detection scan failed: {Message}", ex.Message);
            screenshotScanResult = new ScreenshotScanResult
            {
                TotalImages = screenshotStats?.TotalImages ?? 0,
                ErrorCount = 1,
                WasCancelled = false,
                Duration = TimeSpan.Zero
            };
            screenshotScanResult.Errors.Add(ex.Message);
        }
        finally
        {
            isScreenshotScanning = false;
            screenshotCancellationTokenSource?.Dispose();
            screenshotCancellationTokenSource = null;
            await InvokeAsync(StateHasChanged);
            
            // Ensure UI is fully updated
            await Task.Delay(100);
            await InvokeAsync(StateHasChanged);
        }
    }

    private void CancelScreenshotScan()
    {
        screenshotCancellationTokenSource?.Cancel();
        Logger.LogInformation("Screenshot detection scan cancellation requested");
    }

    private async Task RefreshTags()
    {
        try
        {
            allTags = await DatabaseStatsService.GetAllTagsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing tags: {Message}", ex.Message);
        }
    }

    private async Task RefreshDuplicateStats()
    {
        try
        {
            duplicateStats = await DuplicateDetectionService.GetDuplicateStatisticsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing duplicate statistics: {Message}", ex.Message);
        }
    }

    private async Task StartDuplicateDetection()
    {
        if (isDuplicateScanning || isScanning || isScreenshotScanning)
        {
            return;
        }

        try
        {
            isDuplicateScanning = true;
            duplicateScanResult = null;
            duplicateProgress = null;
            duplicateCancellationTokenSource = new CancellationTokenSource();
            StateHasChanged();

            Logger.LogInformation("Starting duplicate detection scan");

            var progress = new Progress<DuplicateScanProgress>(async progress =>
            {
                duplicateProgress = progress;
                await InvokeAsync(StateHasChanged);
            });

            duplicateScanResult = await DuplicateDetectionService.ScanForDuplicatesAsync(
                progress,
                duplicateCancellationTokenSource.Token);

            if (duplicateScanResult.WasCancelled)
            {
                Logger.LogInformation("Duplicate detection scan was cancelled by user");
            }
            else
            {
                Logger.LogInformation("Duplicate detection scan completed: {HashesCalculated} hashes calculated, {DuplicatesFound} duplicates found out of {TotalImages} images", duplicateScanResult.HashesCalculated, duplicateScanResult.DuplicatesFound, duplicateScanResult.TotalImages);
                await RefreshDuplicateStats(); // Update statistics after successful scan
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Duplicate detection scan failed: {Message}", ex.Message);
            duplicateScanResult = new DuplicateScanResult
            {
                TotalImages = duplicateStats?.TotalImages ?? 0,
                ErrorCount = 1,
                WasCancelled = false,
                Duration = TimeSpan.Zero
            };
            duplicateScanResult.Errors.Add(ex.Message);
        }
        finally
        {
            isDuplicateScanning = false;
            duplicateCancellationTokenSource?.Dispose();
            duplicateCancellationTokenSource = null;
            await InvokeAsync(StateHasChanged);
            
            // Ensure UI is fully updated
            await Task.Delay(100);
            await InvokeAsync(StateHasChanged);
        }
    }

    private void CancelDuplicateScan()
    {
        duplicateCancellationTokenSource?.Cancel();
        Logger.LogInformation("Duplicate detection scan cancellation requested");
    }

    private void ViewDuplicates()
    {
        Navigation.NavigateTo("/duplicates");
    }

    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
        screenshotCancellationTokenSource?.Cancel();
        screenshotCancellationTokenSource?.Dispose();
        duplicateCancellationTokenSource?.Cancel();
        duplicateCancellationTokenSource?.Dispose();
    }
}