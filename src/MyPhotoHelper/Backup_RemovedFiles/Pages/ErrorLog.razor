@page "/errorlog"
@using FaceVault.Services
@using System.IO
@inject IPathService PathService
@implements IDisposable

<PageTitle>Error Log - FaceVault</PageTitle>

<h1>Error Log</h1>

<div class="row mb-3">
    <div class="col-md-6">
        <button class="btn btn-primary" @onclick="RefreshErrors">
            <span class="oi oi-reload" aria-hidden="true"></span> Refresh
        </button>
        <button class="btn btn-danger ms-2" @onclick="ClearErrors">
            <span class="oi oi-trash" aria-hidden="true"></span> Clear Errors
        </button>
    </div>
    <div class="col-md-6 text-end">
        <small class="text-muted">Last updated: @lastUpdated.ToString("HH:mm:ss")</small>
    </div>
</div>

@if (errorEntries.Any())
{
    <div class="row mb-3">
        <div class="col-md-6">
            <label for="errorCount" class="form-label">Show last:</label>
            <select id="errorCount" class="form-select" @bind="maxErrors" @bind:after="FilterErrors">
                <option value="10">10 errors</option>
                <option value="25">25 errors</option>
                <option value="50">50 errors</option>
                <option value="100">100 errors</option>
            </select>
        </div>
        <div class="col-md-6">
            <div class="alert alert-warning">
                <strong>Total Errors:</strong> @errorEntries.Count
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Error Details</h5>
        </div>
        <div class="card-body">
            @foreach (var error in filteredErrors)
            {
                <div class="card mb-3 border-danger">
                    <div class="card-header bg-danger text-white d-flex justify-content-between">
                        <strong>@error.Timestamp.ToString("yyyy-MM-dd HH:mm:ss.fff")</strong>
                        <span class="badge bg-dark">@error.Level</span>
                    </div>
                    <div class="card-body">
                        <h6 class="card-title">@error.ClassName.@error.MethodName:@error.LineNumber</h6>
                        <p class="card-text">@error.Message</p>
                        @if (!string.IsNullOrEmpty(error.StackTrace))
                        {
                            <details>
                                <summary class="btn btn-link p-0">View Stack Trace</summary>
                                <pre class="bg-light p-2 mt-2 small">@error.StackTrace</pre>
                            </details>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-success">
        <h4><span class="oi oi-check" aria-hidden="true"></span> No Errors Found</h4>
        <p>Great! No error log entries have been recorded.</p>
    </div>
}

@code {
    private List<LogEntry> errorEntries = new();
    private List<LogEntry> filteredErrors = new();
    private DateTime lastUpdated = DateTime.Now;
    private int maxErrors = 25;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to live log events
        Logger.LogMessage += OnLogMessage;
        
        // Load existing errors from log files
        await LoadErrorsFromFiles();
        FilterErrors();
    }

    private void OnLogMessage(object? sender, LogEventArgs e)
    {
        if (e.Entry.Level >= LogLevel.Error)
        {
            InvokeAsync(() =>
            {
                errorEntries.Add(e.Entry);
                FilterErrors();
                StateHasChanged();
            });
        }
    }

    private async Task LoadErrorsFromFiles()
    {
        try
        {
            var logsDirectory = PathService.GetLogsDirectory();
            if (Directory.Exists(logsDirectory))
            {
                var logFiles = Directory.GetFiles(logsDirectory, "*.log")
                    .OrderByDescending(f => new FileInfo(f).LastWriteTime);

                foreach (var logFile in logFiles)
                {
                    try
                    {
                        var lines = await File.ReadAllLinesAsync(logFile);
                        foreach (var line in lines)
                        {
                            if (line.Contains("[Error    ]") || line.Contains("[Critical]"))
                            {
                                var entry = ParseLogLine(line);
                                if (entry != null)
                                {
                                    errorEntries.Add(entry);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        // Log parsing error, but continue with other files
                        Console.WriteLine($"Error parsing log file {logFile}: {ex.Message}");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // Add this error to the list
            errorEntries.Add(new LogEntry
            {
                Timestamp = DateTime.Now,
                Level = LogLevel.Error,
                Message = $"Failed to load error logs: {ex.Message}",
                ClassName = "ErrorLog",
                MethodName = "LoadErrorsFromFiles"
            });
        }

        // Sort by timestamp, newest first
        errorEntries = errorEntries.OrderByDescending(e => e.Timestamp).ToList();
        lastUpdated = DateTime.Now;
    }

    private LogEntry? ParseLogLine(string line)
    {
        try
        {
            // Parse the log format: "2024-01-01 12:00:00.000 [Level    ] Location | Message"
            var parts = line.Split('|', 2);
            if (parts.Length < 2) return null;

            var headerPart = parts[0].Trim();
            var message = parts[1].Trim();

            // Extract timestamp
            var timestampEnd = headerPart.IndexOf('[');
            if (timestampEnd < 0) return null;
            
            var timestampStr = headerPart.Substring(0, timestampEnd).Trim();
            if (!DateTime.TryParse(timestampStr, out var timestamp)) return null;

            // Extract level
            var levelStart = headerPart.IndexOf('[') + 1;
            var levelEnd = headerPart.IndexOf(']');
            if (levelStart < 0 || levelEnd < 0) return null;
            
            var levelStr = headerPart.Substring(levelStart, levelEnd - levelStart).Trim();
            var level = levelStr switch
            {
                "Error" => LogLevel.Error,
                "Critical" => LogLevel.Critical,
                _ => LogLevel.Error
            };

            // Extract location
            var locationStart = levelEnd + 1;
            var location = headerPart.Substring(locationStart).Trim();

            return new LogEntry
            {
                Timestamp = timestamp,
                Level = level,
                Message = message,
                ClassName = location.Split('.')[0],
                MethodName = location.Contains('.') ? location.Split('.')[1].Split(':')[0] : "",
                LineNumber = location.Contains(':') ? int.TryParse(location.Split(':')[1], out var ln) ? ln : 0 : 0
            };
        }
        catch
        {
            return null;
        }
    }

    private void FilterErrors()
    {
        filteredErrors = errorEntries.Take(maxErrors).ToList();
        StateHasChanged();
    }

    private async Task RefreshErrors()
    {
        errorEntries.Clear();
        await LoadErrorsFromFiles();
        FilterErrors();
    }

    private void ClearErrors()
    {
        errorEntries.Clear();
        filteredErrors.Clear();
        lastUpdated = DateTime.Now;
        StateHasChanged();
    }

    public void Dispose()
    {
        Logger.LogMessage -= OnLogMessage;
    }
}