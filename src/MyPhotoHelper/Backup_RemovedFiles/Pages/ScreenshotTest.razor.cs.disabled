using FaceVault.Tests;
using FaceVault.Services;
using Microsoft.AspNetCore.Components;
using CSnakes.Runtime;

namespace FaceVault.Pages;

public partial class ScreenshotTest : ComponentBase
{
    private List<TestResult> testResults = new();
    private bool isRunning = false;
    private string currentTest = "";
    private string errorMessage = "";

    private async Task RunPythonIntegrationTest()
    {
        await RunTest("integration", async () =>
        {
            var tester = new ScreenshotDetectionTests(PythonEnv, Logger);
            return await tester.TestPythonIntegration();
        });
    }

    private async Task RunScreenshotDetectionTest()
    {
        await RunTest("detection", async () =>
        {
            var tester = new ScreenshotDetectionTests(PythonEnv, Logger);
            return await tester.TestScreenshotDetection();
        });
    }

    private async Task TestDirectPythonCall()
    {
        await RunTest("direct", async () =>
        {
            var results = new List<string>();
            var success = true;

            try
            {
                // Test direct Python call without the service layer
                results.Add("Testing direct Python environment call...");
                
                results.Add("✓ Python module loaded successfully");

                // Test with a simple file path (may not exist, but should not crash)
                var testPath = Path.Combine("Python", "test", "images", "photo.jpg");
                results.Add($"Testing with path: {testPath}");
                
                if (File.Exists(testPath))
                {
                    var result = PythonEnv.Screenshots().DetectScreenshot(testPath);
                    results.Add($"✓ Direct Python call successful");
                    results.Add($"Result type: {result.GetType().Name}");
                    results.Add($"Result: {result}");
                }
                else
                {
                    results.Add("⚠ Test image not found, testing with dummy path");
                    try
                    {
                        var result = PythonEnv.Screenshots().DetectScreenshot("dummy.jpg");
                        results.Add($"Result: {result}");
                    }
                    catch (Exception ex)
                    {
                        results.Add($"Expected error for dummy path: {ex.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                results.Add($"❌ Error: {ex.Message}");
                if (ex.InnerException != null)
                {
                    results.Add($"Inner: {ex.InnerException.Message}");
                }
                success = false;
            }

            return new TestResult
            {
                Success = success,
                Results = results,
                TestName = "Direct Python Call Test"
            };
        });
    }

    private async Task RunTest(string testName, Func<Task<TestResult>> testFunc)
    {
        if (isRunning) return;

        isRunning = true;
        currentTest = testName;
        errorMessage = "";
        StateHasChanged();

        try
        {
            var result = await testFunc();
            testResults.Insert(0, result); // Add to beginning for newest first
        }
        catch (Exception ex)
        {
            errorMessage = $"Test execution failed: {ex.Message}\n{ex.StackTrace}";
        }
        finally
        {
            isRunning = false;
            currentTest = "";
            StateHasChanged();
        }
    }

    private void ClearResults()
    {
        testResults.Clear();
        errorMessage = "";
        StateHasChanged();
    }

    private string GetResultLineClass(string line)
    {
        if (line.Contains("ERROR") || line.Contains("EXCEPTION") || line.Contains("❌"))
            return "text-danger";
        if (line.Contains("WARNING") || line.Contains("⚠"))
            return "text-warning";
        if (line.Contains("✓"))
            return "text-success";
        return "";
    }
}