@using MyPhotoHelper.Services
@using MyPhotoHelper.Models
@inject IImageViewerService ImageViewerService
@inject IPhotoPathService PhotoPathService
@inject IJSRuntime JSRuntime
@implements IDisposable

@if (ImageViewerService.IsViewerOpen && ImageViewerService.CurrentImage != null)
{
    <div class="viewer-overlay" @onclick="HandleBackdropClick" @onkeydown="HandleKeyDown" tabindex="0" @ref="overlayElement" 
         role="dialog" aria-modal="true" aria-label="Full screen image viewer">
        <!-- Top bar with photo counter and close button -->
        <div class="viewer-top-bar" @onmouseover="ShowControls" style="opacity: @(controlsVisible ? "1" : "0")">
            <div class="viewer-photo-counter">
                Photo @(ImageViewerService.CurrentImageIndex + 1) of @ImageViewerService.PhotoCollection?.Count
            </div>
            <button class="viewer-close-btn" @onclick="CloseViewer" @onclick:stopPropagation="true" title="Close (ESC)"
                    aria-label="Close image viewer">
                <span class="oi oi-x" aria-hidden="true"></span>
            </button>
        </div>
        
        <!-- Main image container -->
        <div class="viewer-image-container" @onclick:stopPropagation="true" @onmousemove="ShowControls">
            @if (isLoading)
            {
                <div class="viewer-loading">
                    <div class="spinner-border text-light" role="status" aria-label="Loading image">
                        <span class="visually-hidden">Loading image...</span>
                    </div>
                </div>
            }
            <img src="@currentImageUrl" 
                 class="viewer-image @(isLoading ? "hidden" : "")" 
                 @onload="OnImageLoaded"
                 @onerror="OnImageError"
                 alt="@ImageViewerService.CurrentImage.RelativePath" />
        </div>
        
        <!-- Navigation buttons -->
        @if (ImageViewerService.CurrentImageIndex > 0)
        {
            <button class="viewer-nav-button viewer-nav-prev" 
                    @onclick="NavigatePrevious" 
                    @onclick:stopPropagation="true"
                    @onmouseover="ShowControls"
                    style="opacity: @(controlsVisible ? "1" : "0")"
                    title="Previous (←)"
                    aria-label="View previous image">
                <span class="oi oi-chevron-left" aria-hidden="true"></span>
            </button>
        }
        
        @if (ImageViewerService.CurrentImageIndex < (ImageViewerService.PhotoCollection?.Count - 1))
        {
            <button class="viewer-nav-button viewer-nav-next" 
                    @onclick="NavigateNext" 
                    @onclick:stopPropagation="true"
                    @onmouseover="ShowControls"
                    style="opacity: @(controlsVisible ? "1" : "0")"
                    title="Next (→)"
                    aria-label="View next image">
                <span class="oi oi-chevron-right" aria-hidden="true"></span>
            </button>
        }
        
        <!-- Bottom bar with photo information -->
        <div class="viewer-bottom-bar" @onmouseover="ShowControls" style="opacity: @(controlsVisible ? "1" : "0")">
            <div class="viewer-photo-info">
                <div class="viewer-photo-name">@System.IO.Path.GetFileName(ImageViewerService.CurrentImage.RelativePath)</div>
                <div class="viewer-photo-date">
                    @if (ImageViewerService.CurrentImage.tbl_image_metadata?.DateTaken.HasValue == true)
                    {
                        @ImageViewerService.CurrentImage.tbl_image_metadata.DateTaken.Value.ToString("MMMM d, yyyy 'at' h:mm tt")
                    }
                    else
                    {
                        @ImageViewerService.CurrentImage.DateCreated.ToString("MMMM d, yyyy 'at' h:mm tt")
                    }
                </div>
            </div>
            <div class="viewer-actions">
                <button class="viewer-action-btn" @onclick="OpenInExplorer" @onclick:stopPropagation="true" title="Open folder"
                        aria-label="Open containing folder">
                    <span class="oi oi-folder" aria-hidden="true"></span>
                </button>
                <button class="viewer-action-btn" @onclick="OpenExternal" @onclick:stopPropagation="true" title="Open in default app"
                        aria-label="Open image in default application">
                    <span class="oi oi-external-link" aria-hidden="true"></span>
                </button>
            </div>
        </div>
    </div>
}

<style>
    .viewer-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.95);
        z-index: 9999;
        display: flex;
        align-items: center;
        justify-content: center;
        animation: fadeIn 0.2s ease-in;
        outline: none;
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    
    .viewer-top-bar {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        height: 60px;
        background: linear-gradient(to bottom, rgba(0, 0, 0, 0.8), transparent);
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 2rem;
        z-index: 10001;
        transition: opacity 0.3s ease;
    }
    
    .viewer-photo-counter {
        color: white;
        font-size: 1rem;
        font-weight: 500;
    }
    
    .viewer-close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0.5rem;
        opacity: 0.8;
        transition: opacity 0.2s ease;
    }
    
    .viewer-close-btn:hover {
        opacity: 1;
    }
    
    .viewer-image-container {
        position: relative;
        max-width: 90vw;
        max-height: 90vh;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .viewer-loading {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    
    .viewer-image {
        max-width: 100%;
        max-height: 90vh;
        object-fit: contain;
        transition: opacity 0.3s ease;
    }
    
    .viewer-image.hidden {
        opacity: 0;
    }
    
    .viewer-nav-button {
        position: fixed;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        font-size: 2rem;
        cursor: pointer;
        padding: 1rem 0.75rem;
        opacity: 0.7;
        transition: all 0.2s ease;
        z-index: 10001;
    }
    
    .viewer-nav-button:hover {
        background: rgba(255, 255, 255, 0.2);
        opacity: 1;
    }
    
    .viewer-nav-prev {
        left: 2rem;
    }
    
    .viewer-nav-next {
        right: 2rem;
    }
    
    .viewer-bottom-bar {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        height: 80px;
        background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 2rem;
        z-index: 10001;
        transition: opacity 0.3s ease;
    }
    
    .viewer-photo-info {
        color: white;
    }
    
    .viewer-photo-name {
        font-size: 1.1rem;
        font-weight: 500;
        margin-bottom: 0.25rem;
    }
    
    .viewer-photo-date {
        font-size: 0.9rem;
        opacity: 0.8;
    }
    
    .viewer-actions {
        display: flex;
        gap: 1rem;
    }
    
    .viewer-action-btn {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
        padding: 0.5rem 0.75rem;
        border-radius: 0.25rem;
        opacity: 0.8;
        transition: all 0.2s ease;
    }
    
    .viewer-action-btn:hover {
        background: rgba(255, 255, 255, 0.2);
        opacity: 1;
    }
    
    /* Mobile responsive styles */
    @@media (max-width: 768px) {
        .viewer-nav-button {
            font-size: 1.5rem;
            padding: 0.75rem 0.5rem;
        }
        
        .viewer-nav-prev {
            left: 0.5rem;
        }
        
        .viewer-nav-next {
            right: 0.5rem;
        }
        
        .viewer-top-bar,
        .viewer-bottom-bar {
            padding: 0 1rem;
        }
        
        .viewer-photo-name {
            font-size: 0.9rem;
        }
        
        .viewer-photo-date {
            font-size: 0.8rem;
        }
    }
</style>

@code {
    private ElementReference overlayElement;
    private string currentImageUrl = "";
    private bool isLoading = true;
    private bool controlsVisible = true;
    private System.Timers.Timer? hideControlsTimer;
    private CancellationTokenSource? loadingCts;
    private readonly SemaphoreSlim navigationSemaphore = new SemaphoreSlim(1, 1);
    
    protected override async Task OnInitializedAsync()
    {
        ImageViewerService.OnStateChanged += OnViewerStateChanged;
        
        if (ImageViewerService.IsViewerOpen)
        {
            await LoadCurrentImage();
            await FocusOverlay();
        }
        
        // Initialize auto-hide timer
        hideControlsTimer = new System.Timers.Timer(3000);
        hideControlsTimer.Elapsed += OnHideControlsTimerElapsed;
        hideControlsTimer.AutoReset = false;
        hideControlsTimer.Start();
    }
    
    private async Task LoadCurrentImage()
    {
        if (ImageViewerService.CurrentImage == null)
            return;
            
        // Cancel any previous loading operation
        loadingCts?.Cancel();
        loadingCts = new CancellationTokenSource();
        var cancellationToken = loadingCts.Token;
        
        isLoading = true;
        StateHasChanged();
        
        try
        {
            // Check if cancelled before proceeding
            if (cancellationToken.IsCancellationRequested)
                return;
                
            var fullPath = await PhotoPathService.GetFullPathAsync(ImageViewerService.CurrentImage.RelativePath);
            
            // Check again after async operation
            if (cancellationToken.IsCancellationRequested)
                return;
                
            currentImageUrl = $"/api/images/photo/{ImageViewerService.CurrentImage.ImageId}?t={DateTime.Now.Ticks}";
            
            // Preload next and previous images
            _ = PreloadAdjacentImages();
        }
        catch (OperationCanceledException)
        {
            // Navigation was cancelled, this is expected behavior
        }
        catch (Exception ex)
        {
            Logger.Error($"Error loading image: {ex.Message}");
            currentImageUrl = "/images/placeholder.png";
        }
    }
    
    private async Task PreloadAdjacentImages()
    {
        if (ImageViewerService.PhotoCollection == null)
            return;
            
        var tasks = new List<Task>();
        
        // Preload next image
        if (ImageViewerService.CurrentImageIndex < ImageViewerService.PhotoCollection.Count - 1)
        {
            var nextImage = ImageViewerService.PhotoCollection[ImageViewerService.CurrentImageIndex + 1];
            tasks.Add(PreloadImage($"/api/images/photo/{nextImage.ImageId}"));
        }
        
        // Preload previous image
        if (ImageViewerService.CurrentImageIndex > 0)
        {
            var prevImage = ImageViewerService.PhotoCollection[ImageViewerService.CurrentImageIndex - 1];
            tasks.Add(PreloadImage($"/api/images/photo/{prevImage.ImageId}"));
        }
        
        await Task.WhenAll(tasks);
    }
    
    private async Task PreloadImage(string url)
    {
        try
        {
            // Use a safer method to preload images without eval
            await JSRuntime.InvokeVoidAsync("preloadImage", url);
        }
        catch { }
    }
    
    private void OnImageLoaded()
    {
        isLoading = false;
        StateHasChanged();
    }
    
    private void OnImageError()
    {
        isLoading = false;
        currentImageUrl = "/images/placeholder.png";
        StateHasChanged();
    }
    
    private async Task NavigateNext()
    {
        // Prevent rapid navigation clicks
        if (!await navigationSemaphore.WaitAsync(0))
            return;
            
        try
        {
            ImageViewerService.NavigateNext();
            await LoadCurrentImage();
            ShowControls();
        }
        finally
        {
            navigationSemaphore.Release();
        }
    }
    
    private async Task NavigatePrevious()
    {
        // Prevent rapid navigation clicks
        if (!await navigationSemaphore.WaitAsync(0))
            return;
            
        try
        {
            ImageViewerService.NavigatePrevious();
            await LoadCurrentImage();
            ShowControls();
        }
        finally
        {
            navigationSemaphore.Release();
        }
    }
    
    private void CloseViewer()
    {
        ImageViewerService.CloseViewer();
    }
    
    private void HandleBackdropClick()
    {
        CloseViewer();
    }
    
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Escape":
                CloseViewer();
                break;
            case "ArrowRight":
                await NavigateNext();
                break;
            case "ArrowLeft":
                await NavigatePrevious();
                break;
        }
    }
    
    private async Task FocusOverlay()
    {
        try
        {
            await overlayElement.FocusAsync();
        }
        catch { }
    }
    
    private void ShowControls()
    {
        controlsVisible = true;
        StateHasChanged();
        
        // Reset the timer
        hideControlsTimer?.Stop();
        hideControlsTimer?.Start();
    }
    
    private void HideControls()
    {
        InvokeAsync(() =>
        {
            controlsVisible = false;
            StateHasChanged();
        });
    }
    
    private void OnHideControlsTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        HideControls();
    }
    
    private async Task OpenInExplorer()
    {
        if (ImageViewerService.CurrentImage == null)
            return;
            
        try
        {
            var fullPath = await PhotoPathService.GetFullPathAsync(ImageViewerService.CurrentImage.RelativePath);
            var directory = System.IO.Path.GetDirectoryName(fullPath);
            
            if (!string.IsNullOrEmpty(directory))
            {
                System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
                {
                    FileName = directory,
                    UseShellExecute = true
                });
            }
        }
        catch (Exception ex)
        {
            Logger.Error($"Error opening folder: {ex.Message}");
        }
    }
    
    private async Task OpenExternal()
    {
        if (ImageViewerService.CurrentImage == null)
            return;
            
        try
        {
            var fullPath = await PhotoPathService.GetFullPathAsync(ImageViewerService.CurrentImage.RelativePath);
            
            if (System.IO.File.Exists(fullPath))
            {
                System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
                {
                    FileName = fullPath,
                    UseShellExecute = true
                });
            }
        }
        catch (Exception ex)
        {
            Logger.Error($"Error opening image: {ex.Message}");
        }
    }
    
    private void OnViewerStateChanged()
    {
        InvokeAsync(async () =>
        {
            if (ImageViewerService.IsViewerOpen)
            {
                await LoadCurrentImage();
                await FocusOverlay();
            }
            StateHasChanged();
        });
    }
    
    public void Dispose()
    {
        ImageViewerService.OnStateChanged -= OnViewerStateChanged;
        
        // Cancel any pending image loading
        loadingCts?.Cancel();
        loadingCts?.Dispose();
        
        // Properly dispose timer by unsubscribing from events first
        if (hideControlsTimer != null)
        {
            hideControlsTimer.Stop();
            hideControlsTimer.Elapsed -= OnHideControlsTimerElapsed;
            hideControlsTimer.Dispose();
            hideControlsTimer = null;
        }
        
        // Dispose the navigation semaphore
        navigationSemaphore?.Dispose();
    }
}