@using MyPhotoHelper.Models
@using MyPhotoHelper.Services
@using MyPhotoHelper.Data
@using Microsoft.EntityFrameworkCore
@inject MyPhotoHelperDbContext DbContext
@inject IHeicCacheService HeicCacheService

@if (IsVisible && Image != null)
{
    <div class="modal-backdrop fade show" @onclick="Close"></div>
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Image Properties</h5>
                    <button type="button" class="btn-close" @onclick="Close" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4">
                            <!-- Thumbnail preview -->
                            <img src="/api/images/@Image.ImageId/raw" class="img-fluid rounded mb-3" alt="@Image.FileName" style="max-height: 300px;" />
                        </div>
                        <div class="col-md-8">
                            <!-- Properties table -->
                            <table class="table table-sm">
                                <tbody>
                                    <tr class="table-light">
                                        <th colspan="2">File Information</th>
                                    </tr>
                                    <tr>
                                        <td><strong>Name:</strong></td>
                                        <td>@Image.FileName</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Path:</strong></td>
                                        <td class="text-break small">
                                            @Image.RelativePath
                                            @if (!string.IsNullOrEmpty(fullPath))
                                            {
                                                @if (fileExists)
                                                {
                                                    <span class="badge bg-success ms-2">Found</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger ms-2">Missing</span>
                                                }
                                            }
                                        </td>
                                    </tr>
                                    @if (!string.IsNullOrEmpty(scanDirectory))
                                    {
                                        <tr>
                                            <td><strong>Scan Directory:</strong></td>
                                            <td class="text-break small">@scanDirectory</td>
                                        </tr>
                                    }
                                    <tr>
                                        <td><strong>Size:</strong></td>
                                        <td>@FormatFileSize(Image.FileSizeBytes)</td>
                                    </tr>
                                    @if (Image.tbl_image_metadata != null)
                                    {
                                        <tr>
                                            <td><strong>Dimensions:</strong></td>
                                            <td>@Image.tbl_image_metadata.Width√ó@Image.tbl_image_metadata.Height</td>
                                        </tr>
                                    }
                                    <tr>
                                        <td><strong>Type:</strong></td>
                                        <td>@(Image.FileExtension?.ToUpper() ?? "Unknown")</td>
                                    </tr>
                                    
                                    @if (Image.tbl_image_analysis != null)
                                    {
                                        <tr class="table-light">
                                            <th colspan="2">AI Analysis</th>
                                        </tr>
                                        <tr>
                                            <td><strong>Category:</strong></td>
                                            <td>@(Image.tbl_image_analysis.ImageCategory ?? "Not analyzed")</td>
                                        </tr>
                                        @if (!string.IsNullOrEmpty(Image.tbl_image_analysis.PhotoSubcategory))
                                        {
                                            <tr>
                                                <td><strong>Subcategory:</strong></td>
                                                <td>@Image.tbl_image_analysis.PhotoSubcategory</td>
                                            </tr>
                                        }
                                        @if (!string.IsNullOrEmpty(Image.tbl_image_analysis.AIDescription))
                                        {
                                            <tr>
                                                <td><strong>Description:</strong></td>
                                                <td>@Image.tbl_image_analysis.AIDescription</td>
                                            </tr>
                                        }
                                        @if (!string.IsNullOrEmpty(Image.tbl_image_analysis.AIKeywords))
                                        {
                                            <tr>
                                                <td><strong>Keywords:</strong></td>
                                                <td>@Image.tbl_image_analysis.AIKeywords</td>
                                            </tr>
                                        }
                                    }
                                    
                                    <tr class="table-light">
                                        <th colspan="2">Date Information</th>
                                    </tr>
                                    <tr>
                                        <td><strong>Date Taken:</strong></td>
                                        <td>@(Image.tbl_image_metadata?.DateTaken?.ToString("yyyy-MM-dd HH:mm:ss") ?? "Unknown")</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Date Created:</strong></td>
                                        <td>@Image.DateCreated.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Date Modified:</strong></td>
                                        <td>@Image.DateModified.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                    </tr>
                                    
                                    <tr class="table-light">
                                        <th colspan="2">Technical Details</th>
                                    </tr>
                                    <tr>
                                        <td><strong>ID:</strong></td>
                                        <td>@Image.ImageId</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Hash:</strong></td>
                                        <td class="text-break small font-monospace" title="@(Image.FileHash ?? "Not computed")">
                                            @if (!string.IsNullOrEmpty(Image.FileHash) && Image.FileHash.Length > 12)
                                            {
                                                @(Image.FileHash.Substring(0, 12) + "...")
                                            }
                                            else if (!string.IsNullOrEmpty(Image.FileHash))
                                            {
                                                @Image.FileHash
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not computed</span>
                                            }
                                        </td>
                                    </tr>
                                    @if (IsHeicFile())
                                    {
                                        <tr class="table-info">
                                            <td><strong>HEIC Cache:</strong></td>
                                            <td class="text-break small">
                                                <div><strong>Cache Directory:</strong></div>
                                                <code>@HeicCacheService.GetCacheDirectory()</code>
                                                <div class="mt-2"><strong>Thumbnail Cache File:</strong></div>
                                                <code>@GetCachedThumbnailPath()</code>
                                                @if (File.Exists(GetCachedThumbnailPath()))
                                                {
                                                    <span class="badge bg-success ms-2">Cached</span>
                                                    <div class="small text-muted mt-1">
                                                        Size: @GetFileSize(GetCachedThumbnailPath())
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning ms-2">Not Cached</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="OpenInDefaultViewer">
                        <i class="oi oi-external-link"></i> Open in Default Viewer
                    </button>
                    <a href="/api/images/@Image.ImageId/raw" target="_blank" class="btn btn-secondary">
                        <i class="oi oi-browser"></i> View in Browser
                    </a>
                    <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public tbl_images? Image { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private string fullPath = "";
    private string scanDirectory = "";
    private bool fileExists = false;

    protected override async Task OnParametersSetAsync()
    {
        if (Image != null && IsVisible)
        {
            await CalculateFullPath();
        }
    }

    private bool IsHeicFile()
    {
        if (Image?.FileExtension == null) return false;
        var extension = Image.FileExtension.ToLowerInvariant();
        return extension == ".heic" || extension == ".heif";
    }

    private string GetCachedThumbnailPath()
    {
        if (Image == null || !IsHeicFile()) return "";
        
        // Generate the same cache key that HeicCacheService uses
        var cacheKey = GetCacheKey(fullPath, 250, 80);
        
        // Use same subdirectory structure as HeicCacheService
        var subDir = cacheKey.Substring(0, 2).ToLower();
        
        return Path.Combine(HeicCacheService.GetCacheDirectory(), subDir, $"thumb_{cacheKey}.jpg");
    }

    private string GetCacheKey(string filePath, int maxSize, int quality)
    {
        // This should match the logic in HeicCacheService
        var input = $"{filePath.ToLowerInvariant()}|{maxSize}|{quality}";
        using var sha256 = System.Security.Cryptography.SHA256.Create();
        var hashBytes = sha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(input));
        return Convert.ToHexString(hashBytes).Substring(0, 16);
    }

    private string GetFileSize(string path)
    {
        try
        {
            if (File.Exists(path))
            {
                var fileInfo = new FileInfo(path);
                var bytes = fileInfo.Length;
                string[] sizes = { "B", "KB", "MB", "GB" };
                int order = 0;
                double size = bytes;
                
                while (size >= 1024 && order < sizes.Length - 1)
                {
                    order++;
                    size /= 1024;
                }
                
                return $"{size:0.##} {sizes[order]}";
            }
        }
        catch { }
        return "Unknown";
    }

    private async Task CalculateFullPath()
    {
        try
        {
            // Load the scan directory if not already loaded
            if (Image!.ScanDirectory == null)
            {
                var scanDir = await DbContext.tbl_scan_directory
                    .FirstOrDefaultAsync(sd => sd.ScanDirectoryId == Image.ScanDirectoryId);
                if (scanDir != null)
                {
                    Image.ScanDirectory = scanDir;
                }
            }

            if (Image.ScanDirectory != null)
            {
                scanDirectory = Image.ScanDirectory.DirectoryPath;
                // Normalize the path to handle any path separator issues
                var normalizedRelativePath = Image.RelativePath.Replace('/', Path.DirectorySeparatorChar).Replace('\\', Path.DirectorySeparatorChar);
                fullPath = Path.Combine(Image.ScanDirectory.DirectoryPath, normalizedRelativePath);
                fileExists = System.IO.File.Exists(fullPath);
            }
            else
            {
                scanDirectory = "NOT FOUND IN DATABASE";
                fullPath = $"Cannot construct - ScanDirectory not found. RelativePath: {Image.RelativePath}";
                fileExists = false;
            }
        }
        catch (Exception ex)
        {
            fullPath = $"Error: {ex.Message}";
            fileExists = false;
        }
    }

    private async Task Close()
    {
        fullPath = "";
        scanDirectory = "";
        fileExists = false;
        await OnClose.InvokeAsync();
    }
    
    private async Task OpenInDefaultViewer()
    {
        try
        {
            await CalculateFullPath();
            if (fileExists && !string.IsNullOrEmpty(fullPath))
            {
                Logger.Info($"Opening image in default viewer: {fullPath}");
                System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
                {
                    FileName = fullPath,
                    UseShellExecute = true
                });
            }
            else
            {
                Logger.Warning($"Cannot open image - file not found: {fullPath}");
            }
        }
        catch (Exception ex)
        {
            Logger.Error($"Error opening image in default viewer: {ex.Message}");
        }
    }

    private string FormatFileSize(int bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}