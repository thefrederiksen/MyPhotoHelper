@using MyPhotoHelper.Services
@using MyPhotoHelper.Models
@using System.Collections.Generic
@inject IJSRuntime JSRuntime
@inject IPhotoPathService PhotoPathService
@implements IDisposable

<div class="@ContainerClass" style="overflow: visible !important;">
    <div class="rounded-lg shadow-sm photo-card">
        <div class="photo-container relative" @onclick="OpenImage">
            <ImageThumbnail Photo="Photo" Size="ThumbnailSize" />
            
            <!-- Screenshot indicator -->
            @if (IsScreenshot)
            {
                <div class="screenshot-badge absolute top-0 left-0 m-1">
                    <span class="inline-flex items-center px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded">
                        <i class="oi oi-monitor"></i>
                    </span>
                </div>
            }
            
            <!-- Photo overlay with info -->
            <div class="photo-overlay">
                <div class="flex flex-col items-center justify-center h-full">
                    <span class="oi oi-external-link mb-1" aria-hidden="true"></span>
                    <small class="text-white text-xs">
                        @if (ShowTime && Photo.tbl_image_metadata?.DateTaken.HasValue == true)
                        {
                            @Photo.tbl_image_metadata.DateTaken.Value.ToString("HH:mm")
                        }
                        else if (ShowTime)
                        {
                            @Photo.DateCreated.ToString("HH:mm")
                        }
                    </small>
                </div>
            </div>
            
            <!-- Dropdown Menu - Always Visible -->
            <div class="photo-dropdown-container" @onclick:stopPropagation="true">
                <button class="text-sm photo-dropdown-btn" type="button" 
                        @onclick="ToggleDropdown" 
                        @onclick:stopPropagation="true" title="More options">
                    <span class="oi oi-menu" aria-hidden="true"></span>
                </button>
                @if (isDropdownOpen)
                {
                    <div class="custom-dropdown-menu">
                        <button class="custom-dropdown-item" @onclick="HandleOpenImage" @onclick:stopPropagation="true">
                            <span class="oi oi-external-link mr-2" aria-hidden="true"></span>
                            Open Image
                        </button>
                        <button class="custom-dropdown-item" @onclick="HandleCopyPath" @onclick:stopPropagation="true">
                            <span class="oi oi-clipboard mr-2" aria-hidden="true"></span>
                            Copy Path
                        </button>
                        <button class="custom-dropdown-item" @onclick="HandleOpenLocation" @onclick:stopPropagation="true">
                            <span class="oi oi-folder-open mr-2" aria-hidden="true"></span>
                            Open Location
                        </button>
                        <hr class="border-gray-200 my-1" />
                        <button class="custom-dropdown-item" @onclick="HandleShowProperties" @onclick:stopPropagation="true">
                            <span class="oi oi-info mr-2" aria-hidden="true"></span>
                            Properties
                        </button>
                    </div>
                }
            </div>
        </div>
        @if (AdditionalContent != null)
        {
            @AdditionalContent
        }
    </div>
</div>

<!-- Image Properties Dialog -->
<ImagePropertiesDialog Image="@Photo" IsVisible="@showPropertiesDialog" OnClose="ClosePropertiesDialog" />


@code {
    [Parameter] public tbl_images Photo { get; set; } = default!;
    [Parameter] public bool ShowTime { get; set; } = true;
    [Parameter] public EventCallback<tbl_images> OnImageClick { get; set; }
    [Parameter] public string ContainerClass { get; set; } = "w-1/4 sm:w-1/6 md:w-1/6 lg:w-1/12";
    [Parameter] public int ThumbnailSize { get; set; } = 250;
    [Parameter] public RenderFragment? AdditionalContent { get; set; }
    
    // Check if this image is a screenshot by looking at the analysis data
    private bool IsScreenshot => Photo.tbl_image_analysis?.ImageCategory == "screenshot";
    
    private bool isDropdownOpen = false;
    private bool showPropertiesDialog = false;
    private static List<ImageViewer> openDropdowns = new();

    private async Task OpenImage()
    {
        try
        {
            Logger.Info($"OpenImage clicked for photo: {Photo?.RelativePath}");
            
            if (Photo != null)
            {
                // Get the full path from settings
                var fullPath = await GetFullPath();
                Logger.Info($"Full path resolved to: {fullPath}");
                
                if (!string.IsNullOrEmpty(fullPath) && System.IO.File.Exists(fullPath))
                {
                    Logger.Info($"File exists, opening: {fullPath}");
                    System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
                    {
                        FileName = fullPath,
                        UseShellExecute = true
                    });
                    Logger.Info($"Process.Start executed successfully");
                }
                else
                {
                    Logger.Error($"File not found or path empty: {fullPath}");
                }
                
                // Also trigger the callback if provided
                if (OnImageClick.HasDelegate)
                {
                    await OnImageClick.InvokeAsync(Photo);
                }
            }
            else
            {
                Logger.Error("Photo object is null");
            }
        }
        catch (Exception ex)
        {
            Logger.Error($"Error opening image: {ex.Message}");
            Logger.Error($"Stack trace: {ex.StackTrace}");
        }
    }

    private void ToggleDropdown()
    {
        try
        {
            if (isDropdownOpen)
            {
                // Close this dropdown
                CloseDropdown();
            }
            else
            {
                // Close all other dropdowns first
                CloseAllDropdowns();
                // Open this dropdown
                isDropdownOpen = true;
                openDropdowns.Add(this);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.Error($"Error toggling dropdown: {ex.Message}");
            // Reset state on error
            isDropdownOpen = false;
            StateHasChanged();
        }
    }

    private async Task HandleOpenImage()
    {
        try
        {
            await OpenImage();
        }
        finally
        {
            CloseDropdown();
        }
    }

    private async Task HandleCopyPath()
    {
        try
        {
            var fullPath = await GetFullPath();
            if (!string.IsNullOrEmpty(fullPath))
            {
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", fullPath);
                Logger.Info($"Copied path to clipboard: {fullPath}");
            }
        }
        catch (Exception ex)
        {
            Logger.Error($"Error copying image path to clipboard: {ex.Message}");
        }
        finally
        {
            CloseDropdown();
        }
    }

    private async Task HandleOpenLocation()
    {
        try
        {
            var fullPath = await GetFullPath();
            if (!string.IsNullOrEmpty(fullPath) && File.Exists(fullPath))
            {
                var directory = Path.GetDirectoryName(fullPath);
                if (!string.IsNullOrEmpty(directory))
                {
                    System.Diagnostics.Process.Start("explorer.exe", $"/select,\"{fullPath}\"");
                    Logger.Info($"Opened location for: {fullPath}");
                }
            }
        }
        catch (Exception ex)
        {
            Logger.Error($"Error opening image location: {ex.Message}");
        }
        finally
        {
            CloseDropdown();
        }
    }

    private void CloseDropdown()
    {
        isDropdownOpen = false;
        openDropdowns.Remove(this);
        StateHasChanged();
    }
    
    private static void CloseAllDropdowns()
    {
        var dropdownsToClose = openDropdowns.ToList();
        openDropdowns.Clear();
        foreach (var dropdown in dropdownsToClose)
        {
            dropdown.isDropdownOpen = false;
            dropdown.StateHasChanged();
        }
    }

    private void HandleShowProperties()
    {
        try
        {
            showPropertiesDialog = true;
            StateHasChanged();
        }
        finally
        {
            CloseDropdown();
        }
    }

    private void ClosePropertiesDialog()
    {
        showPropertiesDialog = false;
        StateHasChanged();
    }

    private async Task<string> GetFullPath()
    {
        if (Photo == null)
            return string.Empty;
            
        var fullPath = await PhotoPathService.GetFullPathAsync(Photo.RelativePath);
        return fullPath ?? string.Empty;
    }
    
    public void Dispose()
    {
        openDropdowns.Remove(this);
    }

}

<style>
    .photo-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        cursor: pointer;
        overflow: visible !important;
        position: relative;
        background-color: white;
        border-radius: 0.5rem;
        padding: 0;
    }
    
    /* Ensure card with open dropdown is on top */
    .photo-card:has(.custom-dropdown-menu) {
        z-index: 1000;
    }

    .photo-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2) !important;
    }

    .photo-container {
        aspect-ratio: 1;
        overflow: visible;
        border-radius: 0.375rem;
        position: relative;
        background-color: #f8f9fa;
        z-index: 1;
        cursor: pointer;
    }

    .screenshot-badge {
        z-index: 50;
    }

    .screenshot-badge .badge {
        font-size: 0.7rem;
        padding: 0.25rem 0.4rem;
        border-radius: 0.25rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
    }

    .photo-thumbnail {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .photo-card:hover .photo-thumbnail {
        transform: scale(1.05);
    }

    .photo-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
        color: white;
        padding: 0.5rem;
        opacity: 0;
        transition: opacity 0.3s ease;
        pointer-events: none;
    }

    .photo-card:hover .photo-overlay {
        opacity: 1;
        pointer-events: none; /* Keep overlay non-interactive to allow clicks through */
    }

    .overlay-click-area {
        cursor: pointer;
    }

    /* Always visible dropdown button */
    .photo-dropdown-container {
        position: absolute;
        top: 0.25rem;
        right: 0.25rem;
        z-index: 100;
        overflow: visible !important;
    }

    .photo-dropdown-btn {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
        background-color: rgba(255, 255, 255, 0.9);
        border: 1px solid rgba(0, 0, 0, 0.2);
        border-radius: 0.25rem;
        color: #333;
        opacity: 0.8;
        transition: opacity 0.2s ease;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .photo-dropdown-btn:hover {
        opacity: 1;
        background-color: white;
        color: #000;
    }

    .photo-card:hover .photo-dropdown-btn {
        opacity: 1;
    }

    .custom-dropdown-menu {
        position: absolute;
        top: 100%;
        right: 0;
        background-color: white;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        min-width: 200px;
        z-index: 10000;
        padding: 0.5rem 0;
        animation: fadeIn 0.15s ease-in;
        margin-top: 0.25rem;
    }

    .custom-dropdown-item {
        display: block;
        width: 100%;
        padding: 0.5rem 0.75rem;
        clear: both;
        font-weight: 400;
        color: #212529;
        text-align: inherit;
        text-decoration: none;
        white-space: nowrap;
        background-color: transparent;
        border: 0;
        font-size: 0.875rem;
        cursor: pointer;
    }

    .custom-dropdown-item:hover {
        background-color: #0d6efd;
        color: white;
    }

    .custom-dropdown-item:focus {
        background-color: #0d6efd;
        color: white;
        outline: 0;
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
</style>

