@using MyPhotoHelper.Services
@using MyPhotoHelper.Models
@using System.Collections.Generic
@inject IJSRuntime JSRuntime
@inject IPhotoPathService PhotoPathService
@inject IImageDetailsService ImageDetailsService

<div class="@ContainerClass">
    <div class="card border-0 shadow-sm photo-card">
        <div class="photo-container position-relative" @onclick="() => OpenImage()" @onclick:stopPropagation="true">
            <ImageThumbnail Photo="Photo" Size="ThumbnailSize" />
            
            <!-- Photo overlay with info and dropdown -->
            <div class="photo-overlay">
                <div class="d-flex justify-content-between align-items-start h-100">
                    <div class="flex-grow-1 overlay-click-area">
                        <div class="d-flex flex-column align-items-center justify-content-center h-100">
                            <span class="oi oi-external-link mb-1" aria-hidden="true"></span>
                            <small class="text-white">
                                @if (ShowTime && Photo.tbl_image_metadata?.DateTaken.HasValue == true)
                                {
                                    @Photo.tbl_image_metadata.DateTaken.Value.ToString("HH:mm")
                                }
                                else if (ShowTime)
                                {
                                    @Photo.DateCreated.ToString("HH:mm")
                                }
                            </small>
                        </div>
                    </div>
                    
                    <!-- Custom Dropdown Menu -->
                    <div class="custom-dropdown" @onclick:stopPropagation="true">
                        <button class="btn btn-sm btn-outline-light dropdown-btn" type="button" 
                                @onclick="ToggleDropdown" 
                                @onclick:stopPropagation="true" title="More options">
                            <span class="oi oi-menu" aria-hidden="true"></span>
                        </button>
                        @if (isDropdownOpen)
                        {
                            <div class="custom-dropdown-menu">
                                <button class="custom-dropdown-item" @onclick="HandleOpenImage" @onclick:stopPropagation="true">
                                    <span class="oi oi-external-link me-2" aria-hidden="true"></span>
                                    Open Image
                                </button>
                                <button class="custom-dropdown-item" @onclick="HandleCopyPath" @onclick:stopPropagation="true">
                                    <span class="oi oi-clipboard me-2" aria-hidden="true"></span>
                                    Copy Path
                                </button>
                                <button class="custom-dropdown-item" @onclick="HandleOpenLocation" @onclick:stopPropagation="true">
                                    <span class="oi oi-folder-open me-2" aria-hidden="true"></span>
                                    Open Location
                                </button>
                                <hr class="dropdown-divider my-1" />
                                <button class="custom-dropdown-item" @onclick="HandleShowProperties" @onclick:stopPropagation="true">
                                    <span class="oi oi-info me-2" aria-hidden="true"></span>
                                    Properties
                                </button>
                                <button class="custom-dropdown-item" @onclick="HandleLoadDetailsFromFile" @onclick:stopPropagation="true">
                                    <span class="oi oi-data-transfer-download me-2" aria-hidden="true"></span>
                                    Load Details from File
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        @if (AdditionalContent != null)
        {
            @AdditionalContent
        }
    </div>
</div>

<!-- Image Properties Dialog -->
<ImagePropertiesDialog Image="@Photo" IsVisible="@showPropertiesDialog" OnClose="ClosePropertiesDialog" />

<!-- File Metadata Modal -->
@if (showFileDetailsModal)
{
    <div class="modal-backdrop fade show" @onclick="CloseFileDetailsModal"></div>
    <div class="modal fade show" style="display: block;" tabindex="-1" @onclick="CloseFileDetailsModal">
        <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable" @onclick:stopPropagation="true">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <span class="oi oi-info" aria-hidden="true"></span> Image Details from File
                    </h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseFileDetailsModal"></button>
                </div>
                <div class="modal-body">
                    @if (isLoadingFileDetails)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading metadata...</span>
                            </div>
                            <p class="mt-3 text-muted">Extracting metadata from file...</p>
                        </div>
                    }
                    else if (fileMetadata != null && fileMetadata.Any())
                    {
                        <div class="row">
                            <!-- Basic Properties -->
                            @if (HasSection("basic"))
                            {
                                <div class="col-md-6 mb-4">
                                    <h6 class="text-primary mb-3">
                                        <span class="oi oi-image" aria-hidden="true"></span> Basic Properties
                                    </h6>
                                    <table class="table table-sm table-bordered">
                                        <tbody>
                                            @RenderValue("Dimensions", GetDimensions())
                                            @RenderValue("Color Space", "color_space")
                                            @RenderValue("Bit Depth", "bit_depth", " bits")
                                            @RenderValue("Orientation", "orientation")
                                            @RenderValue("Resolution", GetResolution())
                                        </tbody>
                                    </table>
                                </div>
                            }

                            <!-- Camera Information -->
                            @if (HasSection("camera"))
                            {
                                <div class="col-md-6 mb-4">
                                    <h6 class="text-primary mb-3">
                                        <span class="oi oi-camera-slr" aria-hidden="true"></span> Camera Information
                                    </h6>
                                    <table class="table table-sm table-bordered">
                                        <tbody>
                                            @RenderValue("Make", "camera_make")
                                            @RenderValue("Model", "camera_model")
                                            @RenderValue("Serial", "camera_serial")
                                            @RenderValue("Lens Model", "lens_model")
                                            @RenderValue("Lens Make", "lens_make")
                                        </tbody>
                                    </table>
                                </div>
                            }

                            <!-- Camera Settings -->
                            @if (HasSection("settings"))
                            {
                                <div class="col-md-6 mb-4">
                                    <h6 class="text-primary mb-3">
                                        <span class="oi oi-cog" aria-hidden="true"></span> Camera Settings
                                    </h6>
                                    <table class="table table-sm table-bordered">
                                        <tbody>
                                            @RenderValue("Focal Length", "focal_length", "mm")
                                            @RenderValue("Aperture", "f_number")
                                            @RenderValue("Exposure", "exposure_time")
                                            @RenderValue("ISO", "iso")
                                            @RenderValue("Flash", "flash")
                                            @RenderValue("White Balance", "white_balance")
                                            @RenderValue("Metering Mode", "metering_mode")
                                            @RenderValue("Exposure Mode", "exposure_mode")
                                        </tbody>
                                    </table>
                                </div>
                            }

                            <!-- GPS/Location -->
                            @if (HasSection("gps"))
                            {
                                <div class="col-md-6 mb-4">
                                    <h6 class="text-primary mb-3">
                                        <span class="oi oi-map-marker" aria-hidden="true"></span> GPS/Location Data
                                    </h6>
                                    <table class="table table-sm table-bordered">
                                        <tbody>
                                            @RenderValue("Latitude", "latitude", "°")
                                            @RenderValue("Longitude", "longitude", "°")
                                            @RenderValue("Altitude", "altitude", " meters")
                                            @RenderValue("Direction", "gps_direction")
                                            @RenderValue("Speed", "gps_speed")
                                            @RenderValue("GPS Method", "gps_processing_method")
                                        </tbody>
                                    </table>
                                </div>
                            }

                            <!-- Date/Time -->
                            @if (HasSection("datetime"))
                            {
                                <div class="col-md-6 mb-4">
                                    <h6 class="text-primary mb-3">
                                        <span class="oi oi-calendar" aria-hidden="true"></span> Date/Time Information
                                    </h6>
                                    <table class="table table-sm table-bordered">
                                        <tbody>
                                            @RenderValue("Date Taken", "date_taken")
                                            @RenderValue("Date Digitized", "date_digitized")
                                            @RenderValue("Date Modified", "date_modified")
                                            @RenderValue("Time Zone", "time_zone")
                                        </tbody>
                                    </table>
                                </div>
                            }

                            <!-- Software/Author -->
                            @if (HasSection("software"))
                            {
                                <div class="col-md-6 mb-4">
                                    <h6 class="text-primary mb-3">
                                        <span class="oi oi-code" aria-hidden="true"></span> Software/Author
                                    </h6>
                                    <table class="table table-sm table-bordered">
                                        <tbody>
                                            @RenderValue("Software", "software")
                                            @RenderValue("Processing Software", "processing_software")
                                            @RenderValue("Artist", "artist")
                                            @RenderValue("Copyright", "copyright")
                                        </tbody>
                                    </table>
                                </div>
                            }

                            <!-- All Fields (Debug View) -->
                            <div class="col-12">
                                <details class="mt-3">
                                    <summary class="btn btn-sm btn-outline-secondary">
                                        View All Fields (@fileMetadata.Count total)
                                    </summary>
                                    <div class="mt-3">
                                        <table class="table table-sm table-bordered table-striped">
                                            <thead>
                                                <tr>
                                                    <th style="width: 40%;">Field</th>
                                                    <th>Value</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var kvp in fileMetadata.OrderBy(x => x.Key))
                                                {
                                                    <tr>
                                                        <td class="font-monospace small">@kvp.Key</td>
                                                        <td class="small">@kvp.Value</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </details>
                            </div>
                        </div>
                    }
                    else if (fileDetailsError != null)
                    {
                        <div class="alert alert-danger" role="alert">
                            <h6 class="alert-heading">Error Loading Metadata</h6>
                            <p class="mb-0">@fileDetailsError</p>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info" role="alert">
                            <p class="mb-0">No metadata found in this image file.</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseFileDetailsModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public tbl_images Photo { get; set; } = default!;
    [Parameter] public bool ShowTime { get; set; } = true;
    [Parameter] public EventCallback<tbl_images> OnImageClick { get; set; }
    [Parameter] public string ContainerClass { get; set; } = "col-3 col-sm-2 col-md-2 col-lg-1";
    [Parameter] public int ThumbnailSize { get; set; } = 250;
    [Parameter] public RenderFragment? AdditionalContent { get; set; }
    
    private bool isDropdownOpen = false;
    private bool showPropertiesDialog = false;
    private bool showFileDetailsModal = false;
    private bool isLoadingFileDetails = false;
    private Dictionary<string, object>? fileMetadata;
    private string? fileDetailsError;

    private async Task OpenImage()
    {
        try
        {
            if (Photo != null)
            {
                // Get the full path from settings
                var fullPath = await GetFullPath();
                if (!string.IsNullOrEmpty(fullPath))
                {
                    Logger.Info($"Opening image: {fullPath}");
                    System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
                    {
                        FileName = fullPath,
                        UseShellExecute = true
                    });
                }
                
                // Also trigger the callback if provided
                if (OnImageClick.HasDelegate)
                {
                    await OnImageClick.InvokeAsync(Photo);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.Error($"Error opening image: {ex.Message}");
        }
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
        StateHasChanged();
    }

    private async Task HandleOpenImage()
    {
        try
        {
            await OpenImage();
        }
        finally
        {
            CloseDropdown();
        }
    }

    private async Task HandleCopyPath()
    {
        try
        {
            var fullPath = await GetFullPath();
            if (!string.IsNullOrEmpty(fullPath))
            {
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", fullPath);
                Logger.Info($"Copied path to clipboard: {fullPath}");
            }
        }
        catch (Exception ex)
        {
            Logger.Error($"Error copying image path to clipboard: {ex.Message}");
        }
        finally
        {
            CloseDropdown();
        }
    }

    private async Task HandleOpenLocation()
    {
        try
        {
            var fullPath = await GetFullPath();
            if (!string.IsNullOrEmpty(fullPath) && File.Exists(fullPath))
            {
                var directory = Path.GetDirectoryName(fullPath);
                if (!string.IsNullOrEmpty(directory))
                {
                    System.Diagnostics.Process.Start("explorer.exe", $"/select,\"{fullPath}\"");
                    Logger.Info($"Opened location for: {fullPath}");
                }
            }
        }
        catch (Exception ex)
        {
            Logger.Error($"Error opening image location: {ex.Message}");
        }
        finally
        {
            CloseDropdown();
        }
    }

    private void CloseDropdown()
    {
        isDropdownOpen = false;
        StateHasChanged();
    }

    private void HandleShowProperties()
    {
        try
        {
            showPropertiesDialog = true;
            StateHasChanged();
        }
        finally
        {
            CloseDropdown();
        }
    }

    private void ClosePropertiesDialog()
    {
        showPropertiesDialog = false;
        StateHasChanged();
    }

    private async Task<string> GetFullPath()
    {
        if (Photo == null)
            return string.Empty;
            
        var fullPath = await PhotoPathService.GetFullPathAsync(Photo.RelativePath);
        return fullPath ?? string.Empty;
    }

    private async Task HandleLoadDetailsFromFile()
    {
        try
        {
            var fullPath = await GetFullPath();
            if (!string.IsNullOrEmpty(fullPath))
            {
                showFileDetailsModal = true;
                isLoadingFileDetails = true;
                fileDetailsError = null;
                fileMetadata = null;
                StateHasChanged();

                fileMetadata = await ImageDetailsService.GetImageDetailsFromFileAsync(fullPath);
                
                if (fileMetadata == null || fileMetadata.Count == 0)
                {
                    fileDetailsError = "No metadata could be extracted from this file.";
                }
            }
            else
            {
                fileDetailsError = "Could not find the image file.";
            }
        }
        catch (Exception ex)
        {
            Logger.Error($"Error loading file details: {ex.Message}");
            fileDetailsError = $"Error: {ex.Message}";
        }
        finally
        {
            isLoadingFileDetails = false;
            CloseDropdown();
            StateHasChanged();
        }
    }

    private void CloseFileDetailsModal()
    {
        showFileDetailsModal = false;
        fileMetadata = null;
        fileDetailsError = null;
        StateHasChanged();
    }

    private bool HasSection(string section)
    {
        if (fileMetadata == null) return false;

        return section switch
        {
            "basic" => fileMetadata.ContainsKey("width") || fileMetadata.ContainsKey("height") || fileMetadata.ContainsKey("color_space"),
            "camera" => fileMetadata.ContainsKey("camera_make") || fileMetadata.ContainsKey("camera_model") || fileMetadata.ContainsKey("lens_model"),
            "settings" => fileMetadata.ContainsKey("focal_length") || fileMetadata.ContainsKey("f_number") || fileMetadata.ContainsKey("iso"),
            "gps" => fileMetadata.ContainsKey("latitude") || fileMetadata.ContainsKey("longitude") || fileMetadata.ContainsKey("altitude"),
            "datetime" => fileMetadata.ContainsKey("date_taken") || fileMetadata.ContainsKey("date_modified"),
            "software" => fileMetadata.ContainsKey("software") || fileMetadata.ContainsKey("artist") || fileMetadata.ContainsKey("copyright"),
            _ => false
        };
    }

    private string GetDimensions()
    {
        if (fileMetadata != null && fileMetadata.ContainsKey("width") && fileMetadata.ContainsKey("height"))
        {
            return $"{fileMetadata["width"]} × {fileMetadata["height"]}";
        }
        return string.Empty;
    }

    private string GetResolution()
    {
        if (fileMetadata != null && fileMetadata.ContainsKey("resolution_x") && fileMetadata.ContainsKey("resolution_y"))
        {
            var unit = fileMetadata.ContainsKey("resolution_unit") ? fileMetadata["resolution_unit"].ToString() : "pixels";
            return $"{fileMetadata["resolution_x"]} × {fileMetadata["resolution_y"]} {unit}";
        }
        return string.Empty;
    }

    private RenderFragment RenderValue(string label, string key, string? suffix = null)
    {
        return builder =>
        {
            if (fileMetadata != null && fileMetadata.ContainsKey(key))
            {
                builder.OpenElement(0, "tr");
                builder.OpenElement(1, "td");
                builder.AddAttribute(2, "class", "text-muted");
                builder.AddAttribute(3, "style", "width: 40%;");
                builder.AddContent(4, label);
                builder.CloseElement();
                builder.OpenElement(5, "td");
                builder.AddContent(6, fileMetadata[key].ToString());
                if (!string.IsNullOrEmpty(suffix))
                {
                    builder.AddContent(7, suffix);
                }
                builder.CloseElement();
                builder.CloseElement();
            }
        };
    }
}

<style>
    .photo-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        cursor: pointer;
    }

    .photo-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2) !important;
    }

    .photo-container {
        aspect-ratio: 1;
        overflow: hidden;
        border-radius: 0.375rem;
        position: relative;
        background-color: #f8f9fa;
    }

    .photo-thumbnail {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .photo-card:hover .photo-thumbnail {
        transform: scale(1.05);
    }

    .photo-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
        color: white;
        padding: 0.5rem;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .photo-card:hover .photo-overlay {
        opacity: 1;
    }

    .overlay-click-area {
        cursor: pointer;
    }

    .custom-dropdown {
        position: relative;
        display: inline-block;
    }

    .dropdown-btn {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
        border: 1px solid rgba(255, 255, 255, 0.3);
        background-color: rgba(0, 0, 0, 0.2);
    }

    .dropdown-btn:hover {
        background-color: rgba(255, 255, 255, 0.2);
        border-color: rgba(255, 255, 255, 0.5);
    }

    .custom-dropdown-menu {
        position: absolute;
        top: 100%;
        right: 0;
        background-color: white;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        min-width: 150px;
        z-index: 1000;
        padding: 0.5rem 0;
        animation: fadeIn 0.15s ease-in;
    }

    .custom-dropdown-item {
        display: block;
        width: 100%;
        padding: 0.5rem 0.75rem;
        clear: both;
        font-weight: 400;
        color: #212529;
        text-align: inherit;
        text-decoration: none;
        white-space: nowrap;
        background-color: transparent;
        border: 0;
        font-size: 0.875rem;
        cursor: pointer;
    }

    .custom-dropdown-item:hover {
        background-color: #0d6efd;
        color: white;
    }

    .custom-dropdown-item:focus {
        background-color: #0d6efd;
        color: white;
        outline: 0;
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
</style>