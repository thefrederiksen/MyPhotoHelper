@implements IDisposable
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@if (_isNavigating)
{
    <div class="page-transition-overlay">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {
    private bool _isNavigating = false;
    private string? _lastUrl;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set up JavaScript interception for navigation
            await JSRuntime.InvokeVoidAsync("setupNavigationInterceptor", DotNetObjectReference.Create(this));
            _lastUrl = Navigation.Uri;
        }
    }

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;
    }

    [JSInvokable]
    public void ShowNavigationSpinner()
    {
        _isNavigating = true;
        InvokeAsync(StateHasChanged);
        
        // Set a timeout to hide the spinner if navigation doesn't occur
        // This handles the case where user clicks the same link twice
        Task.Run(async () =>
        {
            await Task.Delay(500); // Wait 500ms for navigation
            if (_isNavigating)
            {
                _isNavigating = false;
                await InvokeAsync(StateHasChanged);
            }
        });
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Always hide spinner on location change
        _lastUrl = e.Location;
        _isNavigating = false;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}

<style>
    .page-transition-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }
</style>