@using MyPhotoHelper.Services
@inject IToastService ToastService
@implements IDisposable

<div class="toast-container">
    @foreach (var toast in toasts)
    {
        <div class="toast-notification @GetToastClass(toast.Type) @(GetAnimationClass(toast))" @key="toast.Id">
            <div class="toast-content">
                <i class="toast-icon oi @GetToastIcon(toast.Type)"></i>
                <span class="toast-message">@toast.Message</span>
            </div>
        </div>
    }
</div>

@code {
    private List<ToastMessage> toasts = new();
    private Dictionary<string, System.Timers.Timer> fadeTimers = new();
    private Dictionary<string, System.Timers.Timer> removeTimers = new();
    private Dictionary<string, bool> fadingOut = new();

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
    }

    private void ShowToast(ToastMessage toast)
    {
        InvokeAsync(() =>
        {
            toasts.Add(toast);
            fadingOut[toast.Id] = false;
            StateHasChanged();

            // Animation duration in milliseconds
            const int animationDuration = 300;
            
            // Create timer to start fade out animation
            var fadeOutTimer = new System.Timers.Timer(toast.DurationMs - animationDuration);
            fadeOutTimer.AutoReset = false;
            fadeOutTimer.Elapsed += (sender, args) =>
            {
                InvokeAsync(() =>
                {
                    // Only start fade if toast hasn't been removed already
                    if (toasts.Contains(toast))
                    {
                        fadingOut[toast.Id] = true;
                        StateHasChanged();
                    }
                });
                
                // Clean up fade timer
                fadeTimers.Remove(toast.Id);
                fadeOutTimer.Dispose();
            };
            fadeOutTimer.Start();
            fadeTimers[toast.Id] = fadeOutTimer;

            // Create timer to remove toast after fade animation completes
            var removeTimer = new System.Timers.Timer(toast.DurationMs);
            removeTimer.AutoReset = false;
            removeTimer.Elapsed += (sender, args) =>
            {
                InvokeAsync(() =>
                {
                    toasts.Remove(toast);
                    fadingOut.Remove(toast.Id);
                    StateHasChanged();
                });
                
                // Clean up remove timer
                removeTimers.Remove(toast.Id);
                removeTimer.Dispose();
            };
            removeTimer.Start();
            removeTimers[toast.Id] = removeTimer;
        });
    }

    private string GetToastClass(ToastType type)
    {
        return type switch
        {
            ToastType.Success => "toast-success",
            ToastType.Error => "toast-error",
            ToastType.Warning => "toast-warning",
            _ => "toast-info"
        };
    }

    private string GetToastIcon(ToastType type)
    {
        return type switch
        {
            ToastType.Success => "oi-check",
            ToastType.Error => "oi-x",
            ToastType.Warning => "oi-warning",
            _ => "oi-info"
        };
    }

    private string GetAnimationClass(ToastMessage toast)
    {
        return fadingOut.GetValueOrDefault(toast.Id, false) ? "toast-fade-out" : "toast-slide-in";
    }

    public void Dispose()
    {
        ToastService.OnShow -= ShowToast;
        
        // Dispose all fade timers
        foreach (var timer in fadeTimers.Values)
        {
            timer?.Stop();
            timer?.Dispose();
        }
        fadeTimers.Clear();
        
        // Dispose all remove timers
        foreach (var timer in removeTimers.Values)
        {
            timer?.Stop();
            timer?.Dispose();
        }
        removeTimers.Clear();
        
        // Clear other collections
        toasts.Clear();
        fadingOut.Clear();
    }
}

<style>
    .toast-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 9999999;
        display: flex;
        flex-direction: column-reverse;
        gap: 10px;
        pointer-events: none;
    }

    .toast-notification {
        min-width: 250px;
        max-width: 400px;
        padding: 12px 16px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        display: flex;
        align-items: center;
        pointer-events: auto;
        transform-origin: bottom right;
    }

    .toast-content {
        display: flex;
        align-items: center;
        gap: 10px;
        width: 100%;
    }

    .toast-icon {
        font-size: 1.2rem;
        flex-shrink: 0;
    }

    .toast-message {
        flex: 1;
        font-size: 0.9rem;
        line-height: 1.4;
    }

    .toast-success {
        background-color: #10b981;
        color: white;
    }

    .toast-error {
        background-color: #ef4444;
        color: white;
    }

    .toast-warning {
        background-color: #f59e0b;
        color: white;
    }

    .toast-info {
        background-color: #3b82f6;
        color: white;
    }

    .toast-slide-in {
        animation: slideIn 0.3s ease-out forwards;
    }

    .toast-fade-out {
        animation: fadeOut 0.3s ease-out forwards;
    }

    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @@keyframes fadeOut {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
</style>