@page "/database-scan"
@using MyPhotoHelper.Data
@using MyPhotoHelper.Models
@using MyPhotoHelper.Services
@using Microsoft.EntityFrameworkCore
@using CSnakes.Runtime
@using CSnakes.Runtime.Python
@using System.Collections.Generic
@implements IDisposable
@inject MyPhotoHelperDbContext DbContext
@inject IPathService PathService
@inject IPythonEnvironment PythonEnv
@inject NavigationManager Navigation
@inject ILogger<DatabaseScan> Logger

<PageTitle>Database AI Analysis - FaceVault</PageTitle>

<div class="container-fluid">
    <h1 class="display-4">Database AI Analysis</h1>
    <p class="lead">AI-powered image analysis for database images</p>
    
    <!-- Always show database stats immediately -->
    @if (isLoadingStats)
    {
        <div class="text-center py-3">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading database statistics...</span>
            </div>
            <p class="mt-2">Loading database statistics...</p>
        </div>
    }
    else
    {
        <div class="row mb-3">
            <div class="col-md-3">
                <div class="card text-center bg-primary text-white">
                    <div class="card-body">
                        <h3 class="mb-0">@totalImagesInDb</h3>
                        <small>Total Images in Database</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center bg-success text-white">
                    <div class="card-body">
                        <h3 class="mb-0">@analyzedCount</h3>
                        <small>Already Analyzed</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center bg-warning text-white">
                    <div class="card-body">
                        <h3 class="mb-0">@unanalyzedCount</h3>
                        <small>Need Analysis</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center bg-info text-white">
                    <div class="card-body">
                        <h3 class="mb-0">@(totalImagesInDb > 0 ? (analyzedCount * 100 / totalImagesInDb).ToString("F1") : "0")%</h3>
                        <small>Complete</small>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Refresh button for stats -->
        <div class="text-end mb-3">
            <button class="btn btn-sm btn-outline-primary" @onclick="RefreshStats" disabled="@(isLoadingStats || isAnalyzing)">
                @if (isLoadingStats)
                {
                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                }
                <span class="oi oi-reload" aria-hidden="true"></span> Refresh Stats
            </button>
        </div>
    }
    
    @if (!aiConfigured)
    {
        <!-- AI Setup Required -->
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card border-warning">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0"><span class="oi oi-warning" aria-hidden="true"></span> AI Configuration Required</h5>
                    </div>
                    <div class="card-body text-center py-5">
                        <i class="oi oi-cog" style="font-size: 4rem; color: #ffc107;"></i>
                        <h3 class="mt-3">AI Analysis Not Configured</h3>
                        <p class="lead text-muted">To use AI-powered image analysis, you need to configure your AI settings first.</p>
                        
                        <div class="alert alert-light border mt-4" role="alert">
                            <h6 class="alert-heading">What you need to configure:</h6>
                            <ul class="text-start mb-0">
                                <li><strong>AI Provider</strong> - Select your AI service (OpenAI, Azure, etc.)</li>
                                <li><strong>API Key</strong> - Your authentication key for the AI service</li>
                                <li><strong>API Endpoint</strong> - The service URL (if required)</li>
                                <li><strong>Model Selection</strong> - Choose the AI model to use</li>
                            </ul>
                        </div>

                        <div class="mt-4">
                            <a href="/settings#ai-settings" class="btn btn-warning btn-lg">
                                <span class="oi oi-cog" aria-hidden="true"></span> Configure AI Settings
                            </a>
                        </div>
                        
                        <p class="text-muted mt-3">
                            <small>Once configured, return here to analyze your images with AI.</small>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- AI is configured, show normal interface -->
        <div class="alert alert-info" role="alert">
            <h4 class="alert-heading">ðŸ¤– AI Analysis Features</h4>
            <p>This scanner analyzes images already in the database using AI to determine:</p>
            <ul class="mb-0">
                <li>Image category (people, objects, scenes, etc.)</li>
                <li>Content description and tags</li>
                <li>Quality assessment</li>
                <li>Potential issues or interesting features</li>
            </ul>
        </div>

        <div class="row">
            <div class="col-md-8">
            <!-- Analysis Configuration -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-cog" aria-hidden="true"></span> Analysis Information</h5>
                </div>
                <div class="card-body">
                    <div class="alert alert-info mb-0">
                        <h6><span class="oi oi-info" aria-hidden="true"></span> Analysis Details</h6>
                        <ul class="mb-0">
                            <li><strong>Scope:</strong> Will analyze @unanalyzedCount unanalyzed images</li>
                            <li><strong>Processing:</strong> One image at a time for stable API calls</li>
                            <li><strong>Initial estimate:</strong> ~2 seconds per image</li>
                            @if (unanalyzedCount > 0)
                            {
                                var initialEstimateMinutes = (unanalyzedCount * 2) / 60.0;
                                <li><strong>Total time estimate:</strong> ~@(initialEstimateMinutes < 1 ? $"{unanalyzedCount * 2} seconds" : $"{initialEstimateMinutes:F1} minutes")</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Analysis Progress -->
            @if (isAnalyzing || analysisCompleted)
            {
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <span class="oi oi-@(isAnalyzing ? "media-play" : "check")" aria-hidden="true"></span> 
                            Analysis Progress
                        </h5>
                        @if (isAnalyzing)
                        {
                            <button class="btn btn-outline-danger btn-sm" @onclick="CancelAnalysis">
                                <span class="oi oi-media-stop" aria-hidden="true"></span> Cancel
                            </button>
                        }
                    </div>
                    <div class="card-body">
                        @if (isAnalyzing)
                        {
                            <!-- Big spinner at the top when analyzing -->
                            <div class="text-center mb-3">
                                <div class="spinner-grow text-primary" style="width: 3rem; height: 3rem;" role="status">
                                    <span class="visually-hidden">Analyzing...</span>
                                </div>
                                <h5 class="mt-2 text-primary">AI Analysis in Progress</h5>
                                <p class="text-muted">Please wait while we analyze your images...</p>
                            </div>
                            
                            <div class="mb-3">
                                <div class="d-flex justify-content-between mb-2">
                                    <span>@currentStatus</span>
                                    <span><strong>@processedImages</strong> / @totalToAnalyze images</span>
                                </div>
                                <div class="progress mb-2" style="height: 24px;">
                                    @if (totalToAnalyze > 0)
                                    {
                                        var percent = (double)processedImages / totalToAnalyze * 100;
                                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                             style="width: @(percent)%" 
                                             role="progressbar">
                                            @(percent.ToString("F1"))%
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-info" 
                                             style="width: 100%" role="progressbar">
                                            Preparing analysis...
                                        </div>
                                    }
                                </div>
                                
                                <!-- Real-time Time Estimates -->
                                @if (processedImages > 0)
                                {
                                    <div class="alert alert-light border mt-2">
                                        <div class="row text-center">
                                            <div class="col-4">
                                                <strong>@totalElapsedTime.ToString(@"mm\:ss")</strong><br>
                                                <small class="text-muted">Elapsed</small>
                                            </div>
                                            <div class="col-4">
                                                <strong>@estimatedTimeRemaining.ToString(@"mm\:ss")</strong><br>
                                                <small class="text-muted">Remaining</small>
                                            </div>
                                            <div class="col-4">
                                                <strong>@averageTimePerImage.ToString("F1")s</strong><br>
                                                <small class="text-muted">Avg per image</small>
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (totalToAnalyze > 0)
                                {
                                    <div class="alert alert-light border mt-2">
                                        <div class="text-center">
                                            <strong>Initial Estimate: @TimeSpan.FromSeconds(totalToAnalyze * 2).ToString(@"mm\:ss")</strong><br>
                                            <small class="text-muted">Based on 2 seconds per image</small>
                                        </div>
                                    </div>
                                }
                                
                                @if (!string.IsNullOrEmpty(currentImage))
                                {
                                    <div class="alert alert-light border mt-2">
                                        <div class="d-flex align-items-center">
                                            <div class="spinner-border spinner-border-sm text-primary me-2" role="status"></div>
                                            <div class="text-truncate">
                                                <strong>Currently analyzing:</strong> @currentImage
                                            </div>
                                        </div>
                                    </div>
                                }
                                
                                @if (analysisResults.Any())
                                {
                                    <div class="mt-3">
                                        <h6>Recent Analysis Results:</h6>
                                        <div class="small">
                                            @foreach (var result in analysisResults.TakeLast(3))
                                            {
                                                <div class="border rounded p-2 mb-1 bg-light">
                                                    <strong>@result.FileName:</strong> @result.Category 
                                                    @if (!string.IsNullOrEmpty(result.Description))
                                                    {
                                                        <br><span class="text-muted">@result.Description</span>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                        @if (analysisCompleted && !isAnalyzing)
                        {
                            <div class="alert alert-@(analysisSuccessful ? "success" : "danger")" role="alert">
                                <h6 class="alert-heading">
                                    <span class="oi oi-@(analysisSuccessful ? "check" : "x")" aria-hidden="true"></span>
                                    Analysis @(analysisSuccessful ? "Completed Successfully" : "Failed")
                                </h6>
                                <hr>
                                <div class="row">
                                    <div class="col-md-3">
                                        <strong>@totalToAnalyze</strong><br>
                                        <small>Images Queued</small>
                                    </div>
                                    <div class="col-md-3">
                                        <strong>@successfulAnalyses</strong><br>
                                        <small>Successfully Analyzed</small>
                                    </div>
                                    <div class="col-md-3">
                                        <strong>@skippedImages</strong><br>
                                        <small>Skipped/Missing</small>
                                    </div>
                                    <div class="col-md-3">
                                        <strong>@errorCount</strong><br>
                                        <small>Errors</small>
                                    </div>
                                </div>
                                
                                @if (!string.IsNullOrEmpty(analysisError))
                                {
                                    <hr>
                                    <p class="mb-0 text-danger"><strong>Error:</strong> @analysisError</p>
                                }
                            </div>

                            @if (analysisResults.Any())
                            {
                                <div class="mt-3">
                                    <h6>Analysis Summary by Category:</h6>
                                    <div class="row">
                                        @foreach (var categoryGroup in analysisResults.GroupBy(r => r.Category).OrderByDescending(g => g.Count()))
                                        {
                                            <div class="col-md-6 mb-2">
                                                <span class="badge bg-primary me-2">@categoryGroup.Count()</span>
                                                <strong>@categoryGroup.Key</strong>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            }

            <!-- Action Buttons -->
            <div class="card">
                <div class="card-body">
                    <div class="d-grid">
                        <button class="btn btn-primary btn-lg" @onclick="StartAnalysis" 
                                disabled="@(isAnalyzing || unanalyzedCount == 0)">
                            @if (isAnalyzing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <text>Analyzing... Please Wait</text>
                            }
                            else
                            {
                                <span class="oi oi-eye" aria-hidden="true"></span>
                                <text> Start AI Analysis</text>
                            }
                        </button>
                    </div>
                    
                    @if (unanalyzedCount == 0 && !isAnalyzing)
                    {
                        <div class="text-center text-muted mt-2">
                            <small>No images to analyze. Run Photo Scan first to add images to the database.</small>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <!-- Database Statistics -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-graph" aria-hidden="true"></span> Database Statistics</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center mb-3">
                        <div class="col-6">
                            <strong>@totalImagesInDb</strong><br>
                            <small class="text-muted">Total Images</small>
                        </div>
                        <div class="col-6">
                            <strong>@analyzedCount</strong><br>
                            <small class="text-muted">Analyzed</small>
                        </div>
                    </div>
                    <div class="row text-center">
                        <div class="col-6">
                            <strong>@unanalyzedCount</strong><br>
                            <small class="text-muted">Unanalyzed</small>
                        </div>
                        <div class="col-6">
                            <strong>@(totalImagesInDb > 0 ? (analyzedCount * 100 / totalImagesInDb).ToString("F1") : "0")%</strong><br>
                            <small class="text-muted">Complete</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- AI Information -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-info" aria-hidden="true"></span> AI Analysis Info</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h6>AI Provider:</h6>
                        <span class="badge bg-primary">@(aiProvider ?? "Not configured")</span>
                    </div>
                    
                    <h6>Categories Detected:</h6>
                    <div class="small mb-3">
                        <span class="badge bg-secondary me-1">People</span>
                        <span class="badge bg-secondary me-1">Animals</span>
                        <span class="badge bg-secondary me-1">Nature</span>
                        <span class="badge bg-secondary me-1">Objects</span>
                        <span class="badge bg-secondary me-1">Scenes</span>
                        <span class="badge bg-secondary me-1">Screenshots</span>
                        <span class="badge bg-secondary me-1">Documents</span>
                    </div>

                    <h6>What Gets Analyzed:</h6>
                    <ul class="small">
                        <li>Visual content and subjects</li>
                        <li>Scene and context</li>
                        <li>Image quality metrics</li>
                        <li>Potential tags and keywords</li>
                    </ul>
                </div>
            </div>

            <!-- Python Status -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-code" aria-hidden="true"></span> Python Status</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <span>Python Environment</span>
                        <span class="badge bg-@(pythonAvailable ? "success" : "danger")">
                            @(pythonAvailable ? "Ready" : "Not Available")
                        </span>
                    </div>
                    @if (!pythonAvailable)
                    {
                        <div class="small text-muted mt-2">
                            Python environment or analysis module not available. Check application logs.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    }
    
    <!-- Back Button (always visible) -->
    <div class="mt-4">
        <button class="btn btn-outline-secondary" @onclick="GoBack">
            <span class="oi oi-arrow-left" aria-hidden="true"></span> Back to Home
        </button>
    </div>
</div>

@code {
    private bool isLoadingStats = true;
    private bool aiConfigured = false;
    private string? aiProvider = null;
    private bool hasApiKey = false;
    
    private bool isAnalyzing = false;
    private bool analysisCompleted = false;
    private bool analysisSuccessful = false;
    private string currentStatus = "";
    private string currentImage = "";
    private int processedImages = 0;
    private int totalToAnalyze = 0;
    private int successfulAnalyses = 0;
    private int skippedImages = 0;
    private int errorCount = 0;
    private string analysisError = "";
    
    private int totalImagesInDb = 0;
    private int analyzedCount = 0;
    private int unanalyzedCount = 0;
    private bool pythonAvailable = false;
    
    private CancellationTokenSource? cancellationTokenSource;
    private List<AnalysisResult> analysisResults = new();
    
    // Time tracking variables
    private DateTime analysisStartTime;
    private double averageTimePerImage = 2.0; // Start with 2 second estimate
    private TimeSpan estimatedTimeRemaining = TimeSpan.Zero;
    private TimeSpan totalElapsedTime = TimeSpan.Zero;

    public class AnalysisResult
    {
        public string FileName { get; set; } = "";
        public string Category { get; set; } = "";
        public string Description { get; set; } = "";
        public double Confidence { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        // Show loading immediately
        isLoadingStats = true;
        StateHasChanged();
        
        // Load everything in parallel for faster initial load
        var configTask = CheckAIConfiguration();
        var statsTask = LoadDatabaseStats();
        
        await Task.WhenAll(configTask, statsTask);
        
        isLoadingStats = false;
        StateHasChanged();
        
        if (aiConfigured)
        {
            await CheckPythonAvailability();
        }
    }

    private async Task CheckAIConfiguration()
    {
        try
        {
            // Check if AI settings exist in the database
            var settings = await DbContext.tbl_app_settings.FirstOrDefaultAsync();
            
            if (settings != null)
            {
                // Check if AI is enabled and configured
                aiConfigured = settings.EnableAIImageAnalysis == 1 &&
                              !string.IsNullOrWhiteSpace(settings.AIProvider) &&
                              !string.IsNullOrWhiteSpace(settings.AIApiKey);
                
                if (aiConfigured)
                {
                    aiProvider = settings.AIProvider;
                    hasApiKey = !string.IsNullOrWhiteSpace(settings.AIApiKey);
                    Logger.LogInformation("AI configuration found: Provider={Provider}", aiProvider);
                }
                else
                {
                    Logger.LogInformation("AI not configured: EnableAI={EnableAI}, Provider={Provider}, HasKey={HasKey}",
                        settings.EnableAIImageAnalysis,
                        !string.IsNullOrWhiteSpace(settings.AIProvider),
                        !string.IsNullOrWhiteSpace(settings.AIApiKey));
                }
            }
            else
            {
                Logger.LogWarning("No application settings found in database");
                aiConfigured = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking AI configuration");
            aiConfigured = false;
        }
        
        StateHasChanged();
    }

    private async Task LoadDatabaseStats()
    {
        try
        {
            totalImagesInDb = await DbContext.tbl_images.CountAsync(i => i.IsDeleted == 0);
            analyzedCount = await DbContext.tbl_image_analysis.CountAsync();
            unanalyzedCount = totalImagesInDb - analyzedCount;
            
            // Total to analyze is always unanalyzed count
            totalToAnalyze = unanalyzedCount;
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading database statistics");
        }
    }

    private async Task CheckPythonAvailability()
    {
        await Task.Run(() =>
        {
            try
            {
                // Try to import the image analysis module
                // CSnakes generates methods based on Python file names
                // For "image_analysis_module.py", the method should be ImageAnalysisModule()
                var testResult = PythonEnv.ImageAnalysisModule().TestAnalysis();
                pythonAvailable = true;
                string testResultStr = testResult;
                Logger.LogDebug("Python image analysis module loaded successfully: {TestResult}", testResultStr);
            }
            catch (Exception ex)
            {
                pythonAvailable = false;
                Logger.LogError(ex, "Python image analysis module not available: {Message}", ex.Message);
            }
        });
        StateHasChanged();
    }

    private async Task StartAnalysis()
    {
        // Immediate feedback - show we're starting
        isAnalyzing = true;
        analysisCompleted = false;
        analysisSuccessful = false;
        analysisError = "";
        processedImages = 0;
        successfulAnalyses = 0;
        skippedImages = 0;
        errorCount = 0;
        analysisResults.Clear();
        currentStatus = "Starting AI analysis...";
        
        // Initialize timing variables
        analysisStartTime = DateTime.Now;
        averageTimePerImage = 2.0; // Start with 2 second estimate
        estimatedTimeRemaining = TimeSpan.Zero;
        totalElapsedTime = TimeSpan.Zero;
        
        StateHasChanged();
        
        // Small delay to ensure UI shows the starting message
        await Task.Delay(100);
        
        // Check Python availability with user feedback
        if (!pythonAvailable)
        {
            analysisError = "Python environment is not available. Please check your Python installation and restart the application.";
            isAnalyzing = false;
            analysisCompleted = true;
            analysisSuccessful = false;
            StateHasChanged();
            return;
        }
        
        // Check AI configuration again with feedback
        var settings = await DbContext.tbl_app_settings.FirstOrDefaultAsync();
        if (settings == null || settings.EnableAIImageAnalysis != 1 || 
            string.IsNullOrWhiteSpace(settings.AIProvider) || 
            string.IsNullOrWhiteSpace(settings.AIApiKey))
        {
            analysisError = "AI configuration is incomplete. Please configure AI settings before running analysis.";
            isAnalyzing = false;
            analysisCompleted = true;
            analysisSuccessful = false;
            StateHasChanged();
            return;
        }

        
        try
        {
            cancellationTokenSource = new CancellationTokenSource();
            
            currentStatus = $"Loading {unanalyzedCount} unanalyzed images from database...";
            StateHasChanged();
            
            // Small delay to ensure UI updates
            await Task.Delay(100);

            // Get images that need analysis (only unanalyzed)
            var imagesToAnalyze = await DbContext.tbl_images
                .Where(i => i.IsDeleted == 0 && !DbContext.tbl_image_analysis.Any(a => a.ImageId == i.ImageId))
                .OrderBy(i => i.DateCreated)
                .ToListAsync();

            totalToAnalyze = imagesToAnalyze.Count;
            
            if (totalToAnalyze == 0)
            {
                currentStatus = "No images to analyze.";
                analysisError = "All images have already been analyzed. Run Photo Scan to add new images.";
                analysisCompleted = true;
                analysisSuccessful = false;
                isAnalyzing = false;
                StateHasChanged();
                return;
            }
            
            currentStatus = $"Starting analysis of {totalToAnalyze} images...";
            Logger.LogInformation("Starting image analysis: Total={Total}", totalToAnalyze);
            StateHasChanged();
            await Task.Delay(100);

            // Process images one at a time
            
            foreach (var image in imagesToAnalyze)
                {
                    if (cancellationTokenSource?.Token.IsCancellationRequested == true)
                        break;

                    try
                    {
                        currentImage = image.FileName;
                        currentStatus = $"Analyzing image {processedImages + 1} of {totalToAnalyze}: {image.FileName}";
                        
                        // Update current file being processed without changing main status
                        await InvokeAsync(() =>
                        {
                            StateHasChanged();
                        });
                        
                        // Try to construct full file path using settings from outer scope
                        string fullPath;
                        
                        // First try: If image has an absolute path already
                        if (Path.IsPathRooted(image.RelativePath))
                        {
                            fullPath = image.RelativePath;
                        }
                        // Second try: Use PhotoDirectory from settings
                        else if (settings != null && !string.IsNullOrWhiteSpace(settings.PhotoDirectory))
                        {
                            fullPath = Path.Combine(settings.PhotoDirectory, image.RelativePath);
                        }
                        // Third try: Use default Pictures folder
                        else
                        {
                            var picturesPath = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
                            fullPath = Path.Combine(picturesPath, image.RelativePath);
                        }
                        
                        if (!File.Exists(fullPath))
                        {
                            skippedImages++;
                            Logger.LogWarning("Image file not found: {FilePath}, RelativePath: {RelativePath}", fullPath, image.RelativePath);
                            processedImages++;
                            continue;
                        }
                        
                        // Call Python analysis function asynchronously to allow immediate cancellation
                        var analysisResult = await Task.Run(() => 
                        {
                            // This runs on a background thread and can be cancelled
                            return PythonEnv.ImageAnalysisModule().AnalyzeImageWithAi(
                                fullPath,
                                settings?.AIProvider ?? "",
                                settings?.AIApiKey ?? "",
                                settings?.AIModel ?? "",
                                settings?.AIApiEndpoint ?? ""
                            );
                        }, cancellationTokenSource?.Token ?? CancellationToken.None);
                        
                        // Parse the Python result
                        string category = analysisResult["category"]?.ToString() ?? "Unknown";
                        string description = analysisResult["description"]?.ToString() ?? "";
                        double confidence = Convert.ToDouble(analysisResult["confidence"]?.ToString() ?? "0.0");
                        string modelUsed = analysisResult["model"]?.ToString() ?? "Basic Image Analysis";
                        
                        // Extract structured AI data if available
                        string aiKeywords = "";
                        try
                        {
                            // Check if we have the analysis object from OpenAI
                            if (analysisResult.ContainsKey("analysis") && analysisResult["analysis"] != null)
                            {
                                var analysisObj = analysisResult["analysis"];
                                
                                // Try to get nested analysis fields - handle both PyObject and direct access
                                string? GetNestedValue(string key)
                                {
                                    try
                                    {
                                        if (analysisObj is System.Collections.IDictionary dict && dict.Contains(key))
                                            return dict[key]?.ToString();
                                        return analysisResult[key]?.ToString(); // Fallback to root level
                                    }
                                    catch
                                    {
                                        return null;
                                    }
                                }
                                
                                // Override category if AI provided better classification
                                var aiCategory = GetNestedValue("category");
                                if (!string.IsNullOrEmpty(aiCategory))
                                    category = aiCategory;
                                
                                // Override description if AI provided better one
                                var aiDescription = GetNestedValue("description");
                                if (!string.IsNullOrEmpty(aiDescription))
                                    description = aiDescription;
                                
                                // Build keywords from various AI fields
                                var keywords = new List<string>();
                                
                                // Add screenshot detection
                                var isScreenshotStr = GetNestedValue("is_screenshot");
                                if (!string.IsNullOrEmpty(isScreenshotStr) && bool.TryParse(isScreenshotStr, out bool isScreenshot) && isScreenshot)
                                {
                                    keywords.Add("screenshot");
                                    // Update category if it's a screenshot
                                    if (category == "Unknown" || category == "Objects")
                                        category = "Screenshots";
                                }
                                
                                // Add people count
                                var peopleCountStr = GetNestedValue("people_count");
                                if (!string.IsNullOrEmpty(peopleCountStr) && int.TryParse(peopleCountStr, out int peopleCount) && peopleCount > 0)
                                {
                                    keywords.Add($"people:{peopleCount}");
                                    if (category == "Unknown")
                                        category = "People";
                                }
                                
                                // Add text detection
                                var textFound = GetNestedValue("text_found");
                                if (!string.IsNullOrWhiteSpace(textFound))
                                {
                                    keywords.Add("has_text");
                                    // Check if it's a document based on text content
                                    if (textFound.Length > 50 || textFound.Contains("document") || textFound.Contains("scan"))
                                    {
                                        keywords.Add("document");
                                        if (category == "Unknown")
                                            category = "Documents";
                                    }
                                }
                                
                                // Try to parse comma/space separated values for objects, tags, colors
                                void AddListKeywords(string field, string prefix = "")
                                {
                                    var fieldValue = GetNestedValue(field);
                                    if (!string.IsNullOrEmpty(fieldValue))
                                    {
                                        // Handle both JSON arrays and comma-separated strings
                                        var items = fieldValue.Replace("[", "").Replace("]", "").Replace("\"", "")
                                            .Split(new[] { ',', ';' }, StringSplitOptions.RemoveEmptyEntries)
                                            .Select(s => s.Trim())
                                            .Where(s => !string.IsNullOrEmpty(s));
                                        
                                        foreach (var item in items.Take(10)) // Limit to avoid too many keywords
                                        {
                                            keywords.Add(string.IsNullOrEmpty(prefix) ? item : $"{prefix}:{item}");
                                        }
                                    }
                                }
                                
                                AddListKeywords("objects", "object");
                                AddListKeywords("tags");
                                AddListKeywords("dominant_colors", "color");
                                
                                aiKeywords = string.Join(", ", keywords.Where(k => !string.IsNullOrWhiteSpace(k)));
                            }
                        }
                        catch (Exception parseEx)
                        {
                            Logger.LogWarning(parseEx, "Failed to parse structured AI data for image {ImagePath}", image.RelativePath);
                        }
                        
                        // Convert the entire result to JSON for debugging
                        string jsonResponse = "";
                        try
                        {
                            var jsonDict = new Dictionary<string, object>();
                            foreach (var key in analysisResult.Keys)
                            {
                                jsonDict[key] = analysisResult[key]?.ToString() ?? "";
                            }
                            jsonResponse = System.Text.Json.JsonSerializer.Serialize(jsonDict, new System.Text.Json.JsonSerializerOptions 
                            { 
                                WriteIndented = true 
                            });
                        }
                        catch (Exception jsonEx)
                        {
                            Logger.LogWarning(jsonEx, "Failed to serialize analysis result to JSON");
                            jsonResponse = $"{{ \"error\": \"Failed to serialize result\", \"category\": \"{category}\", \"description\": \"{description}\" }}";
                        }
                        
                        // Store result in database
                        var existingAnalysis = await DbContext.tbl_image_analysis
                            .FirstOrDefaultAsync(a => a.ImageId == image.ImageId);

                        if (existingAnalysis != null)
                        {
                            // Update existing
                            existingAnalysis.ImageCategory = category;
                            existingAnalysis.AIDescription = description;
                            existingAnalysis.AIAnalyzedAt = DateTime.UtcNow;
                            existingAnalysis.AIModelUsed = modelUsed;
                            existingAnalysis.AIAnalysisJson = jsonResponse;
                            existingAnalysis.AIKeywords = aiKeywords;
                        }
                        else
                        {
                            // Create new analysis record
                            var newAnalysis = new tbl_image_analysis
                            {
                                ImageId = image.ImageId,
                                ImageCategory = category,
                                AIDescription = description,
                                AIAnalyzedAt = DateTime.UtcNow,
                                AIModelUsed = modelUsed,
                                AIAnalysisJson = jsonResponse,
                                AIKeywords = aiKeywords
                            };
                            DbContext.tbl_image_analysis.Add(newAnalysis);
                        }

                        await DbContext.SaveChangesAsync();
                        
                        // Add to results for display
                        analysisResults.Add(new AnalysisResult
                        {
                            FileName = image.FileName,
                            Category = category,
                            Description = description,
                            Confidence = confidence
                        });

                        successfulAnalyses++;
                        processedImages++;
                        
                        // Update timing calculations after each image
                        totalElapsedTime = DateTime.Now - analysisStartTime;
                        if (processedImages > 0)
                        {
                            averageTimePerImage = totalElapsedTime.TotalSeconds / processedImages;
                            var remainingImages = totalToAnalyze - processedImages;
                            estimatedTimeRemaining = TimeSpan.FromSeconds(averageTimePerImage * remainingImages);
                        }
                        
                        // Update UI every image or at the end for real-time feedback
                        currentStatus = $"Analyzing: {currentImage} ({processedImages}/{totalToAnalyze})";
                        StateHasChanged();
                        await Task.Delay(1); // Allow UI to update
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error analyzing image: {ImagePath}", image.RelativePath);
                        errorCount++;
                        processedImages++;
                        
                        // Update timing calculations even for errors
                        totalElapsedTime = DateTime.Now - analysisStartTime;
                        if (processedImages > 0)
                        {
                            averageTimePerImage = totalElapsedTime.TotalSeconds / processedImages;
                            var remainingImages = totalToAnalyze - processedImages;
                            estimatedTimeRemaining = TimeSpan.FromSeconds(averageTimePerImage * remainingImages);
                        }
                        
                        // Add error to results so user can see what failed
                        analysisResults.Add(new AnalysisResult
                        {
                            FileName = image.FileName,
                            Category = "Error",
                            Description = $"Failed: {ex.Message}",
                            Confidence = 0
                        });
                        
                        // If too many errors, stop
                        if (errorCount > 10 && errorCount > successfulAnalyses)
                        {
                            analysisError = $"Too many errors ({errorCount}). Stopping analysis. Check your AI configuration.";
                            currentStatus = "Analysis stopped due to errors.";
                            break;
                        }
                    }
                    
                    // Check for cancellation between images
                    if (cancellationTokenSource?.Token.IsCancellationRequested == true)
                    {
                        analysisError = "Analysis was cancelled by user.";
                        currentStatus = "Analysis cancelled.";
                        break;
                    }
                }

            analysisSuccessful = string.IsNullOrEmpty(analysisError);
            analysisCompleted = true;
            currentStatus = analysisSuccessful ? "Analysis completed successfully!" : "Analysis completed with errors.";
            
            await LoadDatabaseStats(); // Refresh stats
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "AI analysis failed: {Message}", ex.Message);
            
            // Provide user-friendly error message
            if (ex.Message.Contains("connection") || ex.Message.Contains("network"))
            {
                analysisError = "Network connection error. Please check your internet connection and API settings.";
            }
            else if (ex.Message.Contains("unauthorized") || ex.Message.Contains("401"))
            {
                analysisError = "Authentication failed. Please check your API key in Settings.";
            }
            else if (ex.Message.Contains("quota") || ex.Message.Contains("limit"))
            {
                analysisError = "API quota exceeded. Please check your API usage limits.";
            }
            else
            {
                analysisError = $"Analysis failed: {ex.Message}. Please check the logs for more details.";
            }
            
            currentStatus = "Analysis failed due to an error.";
            analysisSuccessful = false;
            analysisCompleted = true;
        }
        finally
        {
            isAnalyzing = false;
            cancellationTokenSource?.Dispose();
            
            // Final status update
            if (analysisCompleted && string.IsNullOrEmpty(analysisError))
            {
                currentStatus = $"Analysis completed! Processed {processedImages} images in {totalElapsedTime:mm\\:ss}";
            }
            
            StateHasChanged();
        }
    }

    private void CancelAnalysis()
    {
        cancellationTokenSource?.Cancel();
        currentStatus = "Cancelling analysis...";
        StateHasChanged();
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private async Task RefreshStats()
    {
        isLoadingStats = true;
        StateHasChanged();
        
        await LoadDatabaseStats();
        
        isLoadingStats = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
    }
}