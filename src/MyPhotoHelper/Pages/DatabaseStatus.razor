@page "/database-status"
@using MyPhotoHelper.Data
@using MyPhotoHelper.Services
@using Microsoft.EntityFrameworkCore
@inject MyPhotoHelperDbContext DbContext
@inject IPathService PathService
@inject IDatabaseInitializationService DbInitService
@inject NavigationManager Navigation
@inject ILogger<DatabaseStatus> Logger

<PageTitle>Database Status - FaceVault</PageTitle>

<div class="container-fluid">
    <h1 class="display-4">Database Status</h1>
    <p class="lead">Monitor database health and statistics</p>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show mb-3" role="alert">
            <span class="oi oi-x" aria-hidden="true"></span> <strong>Error:</strong> @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    @if (isRefreshing && !databaseExists && string.IsNullOrEmpty(databasePath))
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading database status...</span>
            </div>
            <p class="mt-3">Loading database status...</p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-6">
                <!-- Database Information -->
                <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-hard-drive" aria-hidden="true"></span> Database Information</h5>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-4">Database Path:</dt>
                        <dd class="col-sm-8">
                            <code>@databasePath</code>
                            @if (databaseExists)
                            {
                                <span class="badge bg-success ms-2">Exists</span>
                            }
                            else
                            {
                                <span class="badge bg-danger ms-2">Not Found</span>
                            }
                        </dd>
                        
                        <dt class="col-sm-4">Display Path:</dt>
                        <dd class="col-sm-8"><code>@displayPath</code></dd>
                        
                        <dt class="col-sm-4">File Size:</dt>
                        <dd class="col-sm-8">@fileSizeStr</dd>
                        
                        <dt class="col-sm-4">Database Version:</dt>
                        <dd class="col-sm-8">@databaseVersion</dd>
                        
                        <dt class="col-sm-4">Connection Status:</dt>
                        <dd class="col-sm-8">
                            @if (isConnected)
                            {
                                <span class="badge bg-success">Connected</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Disconnected</span>
                            }
                        </dd>
                    </dl>
                </div>
            </div>

            <!-- Database Actions -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-wrench" aria-hidden="true"></span> Database Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="RefreshStatus" disabled="@isRefreshing">
                            @if (isRefreshing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            <span class="oi oi-reload" aria-hidden="true"></span> Refresh Status
                        </button>
                        
                        @if (!databaseExists)
                        {
                            <button class="btn btn-success" @onclick="CreateDatabase" disabled="@isCreating">
                                @if (isCreating)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                <span class="oi oi-plus" aria-hidden="true"></span> Create Database
                            </button>
                        }
                        
                        <button class="btn btn-outline-secondary" @onclick="OpenDatabaseFolder">
                            <span class="oi oi-folder" aria-hidden="true"></span> Open Database Folder
                        </button>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(actionMessage))
                    {
                        <div class="alert @(actionSuccess ? "alert-success" : "alert-danger") mt-3" role="alert">
                            @actionMessage
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <!-- Table Statistics -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-list" aria-hidden="true"></span> Table Statistics</h5>
                </div>
                <div class="card-body">
                    @if (tableStats.Any())
                    {
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Table</th>
                                    <th class="text-end">Row Count</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var stat in tableStats)
                                {
                                    <tr>
                                        <td><code>@stat.TableName</code></td>
                                        <td class="text-end">@stat.RowCount.ToString("N0")</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th>Total</th>
                                    <th class="text-end">@tableStats.Sum(s => s.RowCount).ToString("N0")</th>
                                </tr>
                            </tfoot>
                        </table>
                    }
                    else
                    {
                        <p class="text-muted">No tables found or database not initialized.</p>
                    }
                </div>
            </div>

            <!-- Quick Stats -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-graph" aria-hidden="true"></span> Quick Stats</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6 mb-3">
                            <h4>@totalImages</h4>
                            <small class="text-muted">üì∑ Photos Found</small>
                        </div>
                        <div class="col-6 mb-3">
                            <h4>@analyzedImages</h4>
                            <small class="text-muted">ü§ñ AI Analyzed</small>
                        </div>
                        <div class="col-6">
                            <h4>@imagesWithMetadata</h4>
                            <small class="text-muted">üìã With Photo Details</small>
                        </div>
                        <div class="col-6">
                            <h4>@deletedImages</h4>
                            <small class="text-muted">üóëÔ∏è Cleaned Up</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    }

    <!-- Back Button -->
    <div class="mt-4">
        <button class="btn btn-outline-secondary" @onclick="GoBack">
            <span class="oi oi-arrow-left" aria-hidden="true"></span> Back to Home
        </button>
    </div>
</div>

@code {
    private string databasePath = "";
    private string displayPath = "";
    private bool databaseExists = false;
    private string fileSizeStr = "N/A";
    private int databaseVersion = 0;
    private bool isConnected = false;
    
    private bool isRefreshing = false;
    private bool isCreating = false;
    private string actionMessage = "";
    private bool actionSuccess = false;
    private string errorMessage = "";
    
    private List<TableStatistic> tableStats = new();
    private int totalImages = 0;
    private int analyzedImages = 0;
    private int imagesWithMetadata = 0;
    private int deletedImages = 0;

    public class TableStatistic
    {
        public string TableName { get; set; } = "";
        public int RowCount { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        // SHOW LOADING STATE IMMEDIATELY!
        isRefreshing = true;
        StateHasChanged();
        
        // Small delay to ensure UI shows loading state
        await Task.Delay(50);
        
        // Now do the actual work
        await RefreshStatus();
    }

    private async Task RefreshStatus()
    {
        try
        {
            isRefreshing = true;
            actionMessage = "";
            errorMessage = "";
            StateHasChanged();

            // Get database path - with error handling
            try
            {
                databasePath = PathService.GetDatabasePath();
                displayPath = PathService.GetDisplayPath(databasePath);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error getting database path");
                errorMessage = $"Unable to determine database path: {ex.Message}";
                return;
            }
            
            // Check if database exists - with error handling
            try
            {
                databaseExists = File.Exists(databasePath);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error checking database file");
                errorMessage = $"Unable to check database file: {ex.Message}";
                databaseExists = false;
            }
            
            if (databaseExists)
            {
                // Get file size
                var fileInfo = new FileInfo(databasePath);
                fileSizeStr = FormatFileSize(fileInfo.Length);
                
                // Test connection
                try
                {
                    isConnected = await DbContext.Database.CanConnectAsync();
                    
                    if (isConnected)
                    {
                        // Get database version
                        var connectionString = DbContext.Database.GetConnectionString();
                        databaseVersion = await DbInitService.GetCurrentVersionAsync(connectionString!);
                        
                        // Get table statistics
                        await LoadTableStatistics();
                        
                        // Get quick stats
                        await LoadQuickStats();
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Error connecting to database");
                    isConnected = false;
                    errorMessage = $"Database connection failed: {ex.Message}";
                }
            }
            else
            {
                fileSizeStr = "N/A";
                isConnected = false;
                tableStats.Clear();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing database status");
            if (string.IsNullOrEmpty(errorMessage))
            {
                errorMessage = $"Failed to refresh database status: {ex.Message}";
            }
            actionMessage = "";
            actionSuccess = false;
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    private async Task LoadTableStatistics()
    {
        try
        {
            tableStats.Clear();
            
            // Get row counts for each table
            var tables = new[] { "tbl_images", "tbl_image_metadata", "tbl_image_analysis", "tbl_app_settings", "tbl_version" };
            
            foreach (var table in tables)
            {
                try
                {
                    var count = await DbContext.Database.SqlQuery<int>($"SELECT COUNT(*) AS Value FROM {table}").FirstOrDefaultAsync();
                    tableStats.Add(new TableStatistic { TableName = table, RowCount = count });
                }
                catch
                {
                    // Table might not exist
                    tableStats.Add(new TableStatistic { TableName = table, RowCount = 0 });
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading table statistics");
        }
    }

    private async Task LoadQuickStats()
    {
        try
        {
            totalImages = await DbContext.tbl_images.CountAsync();
            analyzedImages = await DbContext.tbl_image_analysis.CountAsync();
            imagesWithMetadata = await DbContext.tbl_image_metadata.CountAsync();
            deletedImages = await DbContext.tbl_images.CountAsync(i => i.IsDeleted == 1);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading quick stats");
        }
    }

    private async Task CreateDatabase()
    {
        try
        {
            isCreating = true;
            actionMessage = "";
            StateHasChanged();

            var connectionString = DbContext.Database.GetConnectionString();
            var success = await DbInitService.InitializeDatabaseAsync(connectionString!);
            
            if (success)
            {
                actionMessage = "Database created successfully!";
                actionSuccess = true;
                await RefreshStatus();
            }
            else
            {
                actionMessage = "Failed to create database. Check logs for details.";
                actionSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating database");
            actionMessage = $"Error: {ex.Message}";
            actionSuccess = false;
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

    private void OpenDatabaseFolder()
    {
        try
        {
            var dbDirectory = Path.GetDirectoryName(databasePath);
            if (!string.IsNullOrEmpty(dbDirectory))
            {
                System.Diagnostics.Process.Start("explorer.exe", dbDirectory);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error opening database folder");
            actionMessage = $"Error opening folder: {ex.Message}";
            actionSuccess = false;
            StateHasChanged();
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }
}