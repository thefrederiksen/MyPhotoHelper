@page "/duplicates"
@using MyPhotoHelper.Services
@using MyPhotoHelper.Models
@using MyPhotoHelper.Components.Shared
@using Microsoft.EntityFrameworkCore
@implements IDisposable
@inject IDuplicateDetectionService DuplicateService
@inject IScanStatusService ScanStatusService
@inject IThumbnailService ThumbnailService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<Duplicates> Logger

<PageTitle>Duplicate Photos - MyPhotoHelper</PageTitle>

<AppErrorBoundary>
    <ChildContent>
        <div class="w-full duplicates-page">
            <div class="flex justify-between items-center mb-4">
                <div>
                    <h1 class="text-4xl font-light">üîç Duplicate Photos</h1>
                    <p class="text-lg text-gray-500">Find and manage duplicate photos in your collection</p>
                </div>
                <div class="flex gap-3">
                    @if (statistics?.TotalDuplicateGroups > 0 && !showDeleteAllConfirmation)
                    {
                        <button class="btn-danger-primary" @onclick="ShowDeleteAllConfirmation" disabled="@isDeletingAll">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                            <span>Delete All Duplicates</span>
                        </button>
                    }
                    <button class="btn-secondary" @onclick="RefreshDuplicates" disabled="@(isLoading || ScanStatusService.IsScanning)">
                        @if (isLoading)
                        {
                            <span class="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600" role="status"></span>
                        }
                        else
                        {
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                        }
                        <span>Refresh</span>
                    </button>
                </div>
            </div>
            
            @if (showDeleteAllConfirmation)
            {
                <div class="bg-red-50 border-2 border-red-300 rounded-lg mb-4 p-6 shadow-lg">
                    <div class="flex items-start gap-3">
                        <div class="flex-shrink-0">
                            <div class="flex items-center justify-center w-12 h-12 bg-red-100 rounded-full">
                                <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="flex-1">
                            <h3 class="text-lg font-semibold text-red-800 mb-2">Delete All Duplicates - Are you sure?</h3>
                            <div class="text-red-700 space-y-2">
                                <p>This will permanently delete all duplicate files marked with the red "Delete?" badge.</p>
                                <p class="font-semibold">‚ö†Ô∏è This action cannot be undone!</p>
                                <div class="bg-white border border-red-200 rounded-md p-3 mt-3">
                                    <p class="text-red-800 font-medium">
                                        Total files to be deleted: 
                                        <span class="text-2xl font-bold text-red-600">@(statistics?.DuplicateGroups.Sum(g => g.Images.Count - 1) ?? 0)</span>
                                    </p>
                                </div>
                            </div>
                            <div class="flex gap-3 mt-6">
                                <button class="btn-danger-confirm" 
                                        @onclick="DeleteAllDuplicates" 
                                        disabled="@isDeletingAll">
                                    @if (isDeletingAll)
                                    {
                                        <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white" role="status"></div>
                                        <span>Deleting...</span>
                                    }
                                    else
                                    {
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        </svg>
                                        <span>Yes, Delete All Duplicates</span>
                                    }
                                </button>
                                <button class="btn-secondary" 
                                        @onclick="CancelDeleteAll" 
                                        disabled="@isDeletingAll">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                    <span>Cancel</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <ErrorDisplay ErrorMessage="@errorMessage" Exception="@lastException" ShowDetails="true" />

            @if (ScanStatusService.IsScanning && ScanStatusService.CurrentPhasedProgress != null)
            {
                var phasedProgress = ScanStatusService.CurrentPhasedProgress;
                var hashingPhase = phasedProgress.PhaseProgress.ContainsKey(ScanPhase.Phase4_Hashing) 
                    ? phasedProgress.PhaseProgress[ScanPhase.Phase4_Hashing] 
                    : null;

                @if (hashingPhase != null && (phasedProgress.CurrentPhase == ScanPhase.Phase4_Hashing || !hashingPhase.IsComplete))
                {
                    <div class="alert alert-info mb-4">
                        <div class="d-flex align-items-center">
                            <div class="spinner-border text-info me-3" role="status">
                                <span class="visually-hidden">Calculating hashes...</span>
                            </div>
                            <div class="flex-grow-1">
                                <h6 class="mb-0">Hash Calculation in Progress</h6>
                                <p class="mb-2 small">
                                    Calculating file hashes is required for duplicate detection. 
                                    This page will update automatically when new duplicates are found.
                                </p>
                                @if (hashingPhase.TotalItems > 0)
                                {
                                    <div class="progress" style="height: 20px;">
                                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                             style="width: @(hashingPhase.ProgressPercentage)%" 
                                             role="progressbar">
                                            <span class="fw-bold">@hashingPhase.ProcessedItems / @hashingPhase.TotalItems files</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            }

            <LoadingSpinner IsLoading="@isLoading" Message="Analyzing photos for duplicates..." />

            @if (!isLoading && statistics != null)
            {
                @if (statistics.TotalDuplicateGroups > 0)
                {
                    <!-- Statistics Cards -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                        <div class="stat-card-enhanced blue">
                            <div class="stat-icon-wrapper">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                </svg>
                            </div>
                            <div class="stat-content">
                                <h5 class="stat-label">Duplicate Groups</h5>
                                <p class="stat-value">@statistics.TotalDuplicateGroups</p>
                            </div>
                        </div>
                        <div class="stat-card-enhanced yellow">
                            <div class="stat-icon-wrapper">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"></path>
                                </svg>
                            </div>
                            <div class="stat-content">
                                <h5 class="stat-label">Duplicate Files</h5>
                                <p class="stat-value">@statistics.TotalDuplicateFiles</p>
                            </div>
                        </div>
                        <div class="stat-card-enhanced red">
                            <div class="stat-icon-wrapper">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>
                            <div class="stat-content">
                                <h5 class="stat-label">Wasted Space</h5>
                                <p class="stat-value">@statistics.FormattedWastedSpace</p>
                            </div>
                        </div>
                    </div>

                    <!-- Duplicate Groups -->
                    <div class="section-header">
                        <h3 class="section-title">Duplicate Groups</h3>
                        <p class="section-description">Each group shows identical photos. The first photo in each group will be kept, others will be deleted.</p>
                    </div>

                    @foreach (var group in statistics.DuplicateGroups.Take(50)) // Limit display for performance
                    {
                        <div class="duplicate-group-card">
                            <div class="group-header">
                                <div class="group-info">
                                    <div class="group-title">
                                        <span class="duplicate-count">@group.Count</span>
                                        <span class="duplicate-label">identical photos</span>
                                    </div>
                                    <div class="group-stats">
                                        <span class="stat-item">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4"></path>
                                            </svg>
                                            @FormatBytes(group.Images.FirstOrDefault()?.FileSizeBytes ?? 0) each
                                        </span>
                                        <span class="stat-item warning">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                                            </svg>
                                            @FormatBytes(group.PotentialSavings) can be saved
                                        </span>
                                    </div>
                                </div>
                                <div class="group-actions">
                                    <button class="btn-danger-small" 
                                            @onclick="() => DeleteGroupDuplicates(group)" 
                                            disabled="@(isDeletingAll || deletingGroups.Contains(group.FileHash))"
                                            title="Delete all duplicates in this group (keeps oldest)">
                                        @if (deletingGroups.Contains(group.FileHash))
                                        {
                                            <span class="animate-spin rounded-full h-3 w-3 border-b-2 border-white" role="status"></span>
                                            <span>Deleting...</span>
                                        }
                                        else
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                            </svg>
                                            <span>Delete Group</span>
                                        }
                                    </button>
                                    <button class="btn-outline-small" @onclick="() => ShowDuplicateDetails(group)">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                        </svg>
                                        <span>View Details</span>
                                    </button>
                                </div>
                            </div>
                            <div class="group-body">
                                <div class="duplicate-photos-grid">
                                    @foreach (var image in group.Images.Take(4)) // Show up to 4 larger previews
                                    {
                                        <div class="duplicate-image-container position-relative">
                                            @if (group.Images.IndexOf(image) == 0)
                                            {
                                                <span class="badge bg-success position-absolute top-0 start-0 m-2 z-1">Keep This</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger position-absolute top-0 start-0 m-2 z-1">Delete?</span>
                                            }
                                            <ImageViewer Photo="image" 
                                                        ContainerClass="duplicate-thumbnail" 
                                                        ThumbnailSize="190"
                                                        ShowTime="false">
                                                <AdditionalContent>
                                                    <div class="image-info mt-2 p-2 bg-light rounded">
                                                        <small class="d-block text-truncate" title="@image.FileName" style="max-width: 100%; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">
                                                            <strong>@image.FileName</strong>
                                                        </small>
                                                        <small class="d-block text-muted" title="Full path: @GetFullDisplayPath(image)" style="max-width: 100%; overflow: hidden; word-wrap: break-word; word-break: break-all; line-height: 1.2; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">
                                                            <i class="oi oi-folder"></i> @GetFullDisplayPath(image)
                                                        </small>
                                                        @if (group.Images.IndexOf(image) > 0)
                                                        {
                                                            <div class="mt-2 p-2 bg-warning bg-opacity-10 rounded border border-warning">
                                                                <small class="d-block text-dark">
                                                                    <i class="oi oi-info"></i> <strong>Why delete this one?</strong>
                                                                </small>
                                                                <small class="d-block text-dark">
                                                                    @GetDifferenceDescription(image, group.Images[0], group.Images)
                                                                </small>
                                                            </div>
                                                            <button class="delete-single-btn" 
                                                                    @onclick="() => DeleteSingleImage(image)" 
                                                                    disabled="@(deletingImages.Contains(image.ImageId))">
                                                                @if (deletingImages.Contains(image.ImageId))
                                                                {
                                                                    <span class="animate-spin rounded-full h-3 w-3 border-b-2 border-white" role="status"></span>
                                                                    <span>Deleting...</span>
                                                                }
                                                                else
                                                                {
                                                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                                    </svg>
                                                                    <span>Delete This File</span>
                                                                }
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <small class="d-block text-success mt-2">
                                                                <i class="oi oi-check"></i> Original file (oldest)
                                                            </small>
                                                        }
                                                    </div>
                                                </AdditionalContent>
                                            </ImageViewer>
                                        </div>
                                    }
                                    @if (group.Images.Count > 4)
                                    {
                                        <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                                            <div class="duplicate-image-container">
                                                <div class="border rounded p-4 text-center d-flex align-items-center justify-content-center" style="min-height: 300px;">
                                                    <div>
                                                        <i class="oi oi-plus" style="font-size: 3rem;"></i>
                                                        <p class="mb-0 mt-3 h5">@(group.Images.Count - 4) more duplicates</p>
                                                        <button class="btn btn-sm btn-outline-primary mt-2" @onclick="() => ShowDuplicateDetails(group)">
                                                            View All
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }

                    @if (statistics.DuplicateGroups.Count > 50)
                    {
                        <div class="alert alert-info text-center">
                            <i class="oi oi-info"></i> Showing first 50 duplicate groups out of @statistics.TotalDuplicateGroups total
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-5">
                        <div class="mb-4">
                            <i class="oi oi-check-circle" style="font-size: 4rem; color: #28a745;"></i>
                        </div>
                        <h3 class="text-success">No Duplicates Found!</h3>
                        <p class="text-muted">Your photo collection is free of duplicate files.</p>
                        <p class="text-muted">
                            Make sure all photos have been scanned and hashes calculated.
                            @if (totalImagesWithoutHashes > 0)
                            {
                                <br />
                                <strong class="text-warning">@totalImagesWithoutHashes photos still need hash calculation.</strong>
                            }
                        </p>
                    </div>
                }
            }
        </div>
    </ChildContent>
</AppErrorBoundary>

@code {
    private DuplicateStatistics? statistics;
    private bool isLoading = false;
    private string? errorMessage;
    private Exception? lastException;
    private int totalImagesWithoutHashes = 0;
    private System.Threading.Timer? refreshTimer;
    private bool showDeleteAllConfirmation = false;
    private bool isDeletingAll = false;
    private HashSet<int> deletingImages = new();
    private HashSet<string> deletingGroups = new();
    private DateTime lastLoadTime = DateTime.MinValue;
    private bool isDisposed = false;
    private readonly TimeSpan minLoadInterval = TimeSpan.FromSeconds(2);
    
    private class FileNameDifference
    {
        public string CommonPrefix { get; set; } = "";
        public string DifferentPart { get; set; } = "";
        public string CommonSuffix { get; set; } = "";
    }
    
    private FileNameDifference GetFileNameDifference(string fileName, List<tbl_images> allImages)
    {
        // Remove extension for comparison
        var nameWithoutExt = Path.GetFileNameWithoutExtension(fileName);
        var extension = Path.GetExtension(fileName);
        
        // Get all other file names without extensions
        var otherNames = allImages
            .Where(img => img.FileName != fileName)
            .Select(img => Path.GetFileNameWithoutExtension(img.FileName))
            .ToList();
        
        if (!otherNames.Any())
        {
            return new FileNameDifference { DifferentPart = nameWithoutExt, CommonSuffix = extension };
        }
        
        // Find common prefix
        int commonPrefixLength = 0;
        for (int i = 0; i < nameWithoutExt.Length; i++)
        {
            if (otherNames.All(other => i < other.Length && other[i] == nameWithoutExt[i]))
            {
                commonPrefixLength++;
            }
            else
            {
                break;
            }
        }
        
        // Find common suffix (before extension)
        int commonSuffixLength = 0;
        for (int i = 1; i <= nameWithoutExt.Length - commonPrefixLength; i++)
        {
            if (otherNames.All(other => 
                nameWithoutExt.Length - i >= 0 && 
                other.Length - i >= 0 && 
                other[other.Length - i] == nameWithoutExt[nameWithoutExt.Length - i]))
            {
                commonSuffixLength++;
            }
            else
            {
                break;
            }
        }
        
        var result = new FileNameDifference
        {
            CommonPrefix = commonPrefixLength > 0 ? nameWithoutExt.Substring(0, commonPrefixLength) : "",
            DifferentPart = nameWithoutExt.Substring(commonPrefixLength, nameWithoutExt.Length - commonPrefixLength - commonSuffixLength),
            CommonSuffix = (commonSuffixLength > 0 ? nameWithoutExt.Substring(nameWithoutExt.Length - commonSuffixLength) : "") + extension
        };
        
        return result;
    }
    
    private string GetDifferenceDescription(tbl_images image, tbl_images original, List<tbl_images> allImages)
    {
        // Build description
        var reasons = new List<string>();
        
        // Compare file names more thoroughly
        var imageName = Path.GetFileNameWithoutExtension(image.FileName);
        var originalName = Path.GetFileNameWithoutExtension(original.FileName);
        
        if (imageName != originalName)
        {
            // Check for very subtle differences
            if (imageName.Replace(" ", "") == originalName.Replace(" ", ""))
            {
                var spaceCount1 = imageName.Count(c => c == ' ');
                var spaceCount2 = originalName.Count(c => c == ' ');
                if (spaceCount1 > spaceCount2)
                    reasons.Add("Has extra spaces in name");
                else if (spaceCount1 < spaceCount2)
                    reasons.Add("Has fewer spaces in name");
                else
                    reasons.Add("Spaces in different positions");
            }
            else if (imageName.Replace("_", "") == originalName.Replace("_", ""))
            {
                reasons.Add("Uses underscores instead of spaces (or vice versa)");
            }
            else if (imageName.Replace("-", "") == originalName.Replace("-", ""))
            {
                reasons.Add("Uses hyphens instead of spaces (or vice versa)");
            }
            else if (imageName.ToLower() == originalName.ToLower())
            {
                reasons.Add("Different capitalization");
            }
            else if (imageName.StartsWith(originalName))
            {
                var suffix = imageName.Substring(originalName.Length);
                if (suffix.Contains("(") && suffix.Contains(")"))
                    reasons.Add($"Windows copy suffix: '{suffix}'");
                else if (suffix.All(c => char.IsDigit(c) || c == '_' || c == '-' || c == ' '))
                    reasons.Add($"Added '{suffix}' to name");
                else
                    reasons.Add($"Name has extra: '{suffix}'");
            }
            else if (originalName.StartsWith(imageName))
            {
                var removed = originalName.Substring(imageName.Length);
                reasons.Add($"Name missing: '{removed}'");
            }
            else
            {
                // Look for common patterns
                if (imageName.Contains("Copy") && !originalName.Contains("Copy"))
                    reasons.Add("Has 'Copy' in name");
                else if (imageName.Contains("backup", StringComparison.OrdinalIgnoreCase))
                    reasons.Add("Marked as backup");
                else if (imageName.Contains("duplicate", StringComparison.OrdinalIgnoreCase))
                    reasons.Add("Marked as duplicate");
                else
                {
                    // Find the actual difference
                    var diff = FindDetailedDifference(originalName, imageName);
                    reasons.Add(diff);
                }
            }
        }
        
        // Compare full paths including subdirectories
        var imagePath = GetFullDisplayPath(image);
        var originalPath = GetFullDisplayPath(original);
        
        if (imagePath != originalPath)
        {
            // Check if they're in completely different base directories
            if (image.ScanDirectory?.DirectoryPath != original.ScanDirectory?.DirectoryPath)
            {
                var originalDir = Path.GetFileName(original.ScanDirectory?.DirectoryPath?.TrimEnd('\\', '/') ?? "");
                var imageDir = Path.GetFileName(image.ScanDirectory?.DirectoryPath?.TrimEnd('\\', '/') ?? "");
                reasons.Add($"In '{imageDir}' folder (original in '{originalDir}')");
            }
            else
            {
                // Same base directory but different subdirectories
                var imageSubDir = Path.GetDirectoryName(image.RelativePath ?? "") ?? "";
                var originalSubDir = Path.GetDirectoryName(original.RelativePath ?? "") ?? "";
                
                if (!string.IsNullOrEmpty(imageSubDir) && string.IsNullOrEmpty(originalSubDir))
                {
                    reasons.Add($"In subfolder '{imageSubDir}'");
                }
                else if (string.IsNullOrEmpty(imageSubDir) && !string.IsNullOrEmpty(originalSubDir))
                {
                    reasons.Add($"In parent folder (original in '{originalSubDir}')");
                }
                else if (imageSubDir != originalSubDir)
                {
                    reasons.Add($"In '{imageSubDir}' (original in '{originalSubDir}')");
                }
            }
        }
        
        // Compare dates
        var timeDiff = Math.Abs((image.DateCreated - original.DateCreated).TotalSeconds);
        if (timeDiff > 60) // More than 1 minute difference
        {
            var timeDesc = timeDiff < 3600 ? $"{(int)(timeDiff / 60)} minutes" :
                          timeDiff < 86400 ? $"{(int)(timeDiff / 3600)} hours" :
                          $"{(int)(timeDiff / 86400)} days";
            reasons.Add($"Created {timeDesc} later");
        }
        
        if (!reasons.Any())
        {
            // This shouldn't happen - two files can't have identical paths
            // Add debug info
            reasons.Add($"Same path? Check RelativePath: '{image.RelativePath}' vs '{original.RelativePath}'");
        }
        
        return string.Join(" ‚Ä¢ ", reasons);
    }
    
    private string FindDetailedDifference(string original, string modified)
    {
        // Find first difference
        int firstDiff = -1;
        for (int i = 0; i < Math.Min(original.Length, modified.Length); i++)
        {
            if (original[i] != modified[i])
            {
                firstDiff = i;
                break;
            }
        }
        
        if (firstDiff == -1)
        {
            if (original.Length != modified.Length)
                return original.Length > modified.Length ? "Name is shorter" : "Name is longer";
            return "Names appear identical";
        }
        
        // Check if it's a single character substitution
        if (original.Length == modified.Length)
        {
            int diffCount = 0;
            for (int i = 0; i < original.Length; i++)
            {
                if (original[i] != modified[i]) diffCount++;
            }
            
            if (diffCount == 1)
            {
                return $"'{original[firstDiff]}' changed to '{modified[firstDiff]}'";
            }
            else if (diffCount <= 3)
            {
                return $"{diffCount} characters different";
            }
        }
        
        // Show context around the difference
        int contextStart = Math.Max(0, firstDiff - 5);
        int contextEnd = Math.Min(firstDiff + 5, Math.Min(original.Length, modified.Length));
        
        var origPart = original.Substring(contextStart, contextEnd - contextStart);
        var modPart = modified.Substring(contextStart, Math.Min(contextEnd - contextStart, modified.Length - contextStart));
        
        return $"Differs at: ...{origPart}... vs ...{modPart}...";
    }
    
    private string GetFullDisplayPath(tbl_images image)
    {
        if (image.ScanDirectory == null) return "Unknown location";
        
        // Combine the scan directory path with the relative path
        var basePath = image.ScanDirectory.DirectoryPath ?? "";
        var relativePath = image.RelativePath ?? "";
        
        // If relative path contains directory separators, it's in a subdirectory
        if (relativePath.Contains('\\') || relativePath.Contains('/'))
        {
            var dir = Path.GetDirectoryName(relativePath) ?? "";
            if (!string.IsNullOrEmpty(dir))
            {
                return Path.Combine(basePath, dir).Replace('/', '\\');
            }
        }
        
        return basePath;
    }

    protected override async Task OnInitializedAsync()
    {
        ScanStatusService.StatusChanged += OnScanStatusChanged;
        await LoadDuplicates();
        
        // Start auto-refresh if scanning
        if (ScanStatusService.IsScanning)
        {
            StartAutoRefresh();
        }
    }

    private async Task LoadDuplicates(bool showLoadingIndicator = true)
    {
        // Prevent loading too frequently
        var timeSinceLastLoad = DateTime.Now - lastLoadTime;
        if (timeSinceLastLoad < minLoadInterval)
        {
            return;
        }
        
        if (showLoadingIndicator)
        {
            isLoading = true;
            errorMessage = null;
            lastException = null;
            StateHasChanged();
        }

        try
        {
            lastLoadTime = DateTime.Now;
            var newStatistics = await DuplicateService.GetDuplicateStatisticsAsync();
            
            // Also check for images without hashes
            using var scope = ServiceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<MyPhotoHelper.Data.MyPhotoHelperDbContext>();
            var newTotalImagesWithoutHashes = await dbContext.tbl_images
                .Where(img => img.FileExists == 1 && 
                             img.IsDeleted == 0 && 
                             (img.FileHash == null || img.FileHash == ""))
                .CountAsync();
            
            // Only update if data has changed to prevent flicker
            if (statistics == null || 
                statistics.TotalDuplicateGroups != newStatistics.TotalDuplicateGroups ||
                totalImagesWithoutHashes != newTotalImagesWithoutHashes)
            {
                statistics = newStatistics;
                totalImagesWithoutHashes = newTotalImagesWithoutHashes;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load duplicate information. Please try again.";
            lastException = ex;
            Logger.LogError(ex, "Error loading duplicates");
        }
        finally
        {
            if (showLoadingIndicator)
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task RefreshDuplicates()
    {
        await LoadDuplicates(true);
    }

    private async Task ShowDuplicateDetails(DuplicateGroup group)
    {
        try
        {
            // TODO: Navigate to detailed view or show modal
            await JSRuntime.InvokeVoidAsync("alert", $"Details for {group.Count} duplicates with hash: {group.FileHash}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error showing duplicate details");
        }
    }

    private string FormatBytes(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }
        
        return $"{size:0.##} {sizes[order]}";
    }

    private void OnScanStatusChanged(object? sender, EventArgs e)
    {
        InvokeAsync(async () =>
        {
            if (ScanStatusService.IsScanning)
            {
                StartAutoRefresh();
            }
            else
            {
                StopAutoRefresh();
                // Do a final refresh when scan completes
                await LoadDuplicates(true);
            }
            StateHasChanged();
        });
    }

    private void StartAutoRefresh()
    {
        // Stop any existing timer first
        StopAutoRefresh();
        
        // Refresh every 10 seconds while scanning (increased from 5 to reduce load)
        refreshTimer = new System.Threading.Timer(async _ =>
        {
            // Check if component is disposed before doing anything
            if (isDisposed)
            {
                StopAutoRefresh();
                return;
            }
            
            try
            {
                await InvokeAsync(async () =>
                {
                    // Double-check disposal status
                    if (isDisposed) return;
                    
                    // Additional check to prevent overlapping refreshes
                    if (!isLoading && !isDeletingAll && deletingImages.Count == 0)
                    {
                        await LoadDuplicates(false); // Don't show loading indicator for auto-refresh
                    }
                });
            }
            catch (Exception ex)
            {
                // Prevent timer exceptions from breaking the page
                Logger.LogError(ex, "Error in auto-refresh timer");
            }
        }, null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));
    }

    private void StopAutoRefresh()
    {
        refreshTimer?.Dispose();
        refreshTimer = null;
    }

    [Inject]
    private IServiceProvider ServiceProvider { get; set; } = default!;
    
    [Inject]
    private IPhotoPathService PhotoPathService { get; set; } = default!;
    
    private void ShowDeleteAllConfirmation()
    {
        showDeleteAllConfirmation = true;
    }
    
    private void CancelDeleteAll()
    {
        showDeleteAllConfirmation = false;
        StateHasChanged();
    }
    
    private async Task DeleteAllDuplicates()
    {
        if (statistics == null) return;
        
        isDeletingAll = true;
        StateHasChanged();
        
        try
        {
            var deletedCount = 0;
            var errors = 0;
            
            using var scope = ServiceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<MyPhotoHelper.Data.MyPhotoHelperDbContext>();
            
            // Delete all duplicates (skip first image in each group)
            foreach (var group in statistics.DuplicateGroups)
            {
                for (int i = 1; i < group.Images.Count; i++)
                {
                    var originalImage = group.Images[i];
                    try
                    {
                        // Get full path and delete physical file
                        var fullPath = await PhotoPathService.GetFullPathAsync(originalImage.RelativePath);
                        if (!string.IsNullOrEmpty(fullPath) && File.Exists(fullPath))
                        {
                            File.Delete(fullPath);
                            Logger.LogInformation($"Deleted file: {fullPath}");
                        }
                        
                        // Reload the entity from database to avoid concurrency issues
                        var image = await dbContext.tbl_images
                            .FirstOrDefaultAsync(img => img.ImageId == originalImage.ImageId);
                        
                        if (image != null)
                        {
                            // Mark as deleted in database
                            image.IsDeleted = 1;
                            image.FileExists = 0;
                            dbContext.Update(image);
                            deletedCount++;
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, $"Failed to delete file: {originalImage.FileName}");
                        errors++;
                    }
                }
            }
            
            await dbContext.SaveChangesAsync();
            
            // Show result
            if (errors > 0)
            {
                errorMessage = $"Deleted {deletedCount} files with {errors} errors. Please refresh to see updated list.";
            }
            else
            {
                errorMessage = null;
            }
            
            // Refresh the list
            showDeleteAllConfirmation = false;
            await LoadDuplicates();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to delete duplicates. Please check logs for details.";
            lastException = ex;
            Logger.LogError(ex, "Error deleting all duplicates");
        }
        finally
        {
            isDeletingAll = false;
            StateHasChanged();
        }
    }
    
    private async Task DeleteGroupDuplicates(DuplicateGroup group)
    {
        // Stop auto-refresh during deletion
        StopAutoRefresh();
        
        // Add to deleting set for UI feedback
        deletingGroups.Add(group.FileHash);
        StateHasChanged();
        
        try
        {
            var deletedCount = 0;
            var errors = 0;
            
            using var scope = ServiceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<MyPhotoHelper.Data.MyPhotoHelperDbContext>();
            
            // Delete all duplicates in this group (skip first image - the one to keep)
            for (int i = 1; i < group.Images.Count; i++)
            {
                var image = group.Images[i];
                try
                {
                    // Get full path and delete physical file
                    var fullPath = await PhotoPathService.GetFullPathAsync(image.RelativePath);
                    if (!string.IsNullOrEmpty(fullPath) && File.Exists(fullPath))
                    {
                        File.Delete(fullPath);
                        Logger.LogInformation($"Deleted file: {fullPath}");
                    }
                    
                    // Mark as deleted in database
                    var dbImage = await dbContext.tbl_images
                        .FirstOrDefaultAsync(img => img.ImageId == image.ImageId);
                        
                    if (dbImage != null)
                    {
                        dbImage.IsDeleted = 1;
                        dbImage.FileExists = 0;
                        dbImage.DateModified = DateTime.Now;
                        dbContext.Update(dbImage);
                    }
                    
                    deletedCount++;
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, $"Failed to delete file: {image.FileName}");
                    errors++;
                }
            }
            
            await dbContext.SaveChangesAsync();
            Logger.LogInformation($"Deleted {deletedCount} files from duplicate group with {errors} errors");
            
            // Show result if there were errors
            if (errors > 0)
            {
                errorMessage = $"Deleted {deletedCount} files from group with {errors} errors.";
            }
            else
            {
                errorMessage = null;
            }
            
            // Give UI time to show the deletion happened
            await Task.Delay(500);
            
            // Refresh the list
            await LoadDuplicates();
            
            // Restart auto-refresh if scanning is still active
            if (ScanStatusService.IsScanning)
            {
                StartAutoRefresh();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete duplicate group: {ex.Message}";
            lastException = ex;
            Logger.LogError(ex, $"Error deleting duplicate group {group.FileHash}");
        }
        finally
        {
            deletingGroups.Remove(group.FileHash);
            StateHasChanged();
        }
    }
    
    private async Task DeleteSingleImage(tbl_images image)
    {
        // Prevent multiple simultaneous deletions
        if (deletingImages.Contains(image.ImageId))
        {
            return;
        }
        
        // Stop auto-refresh during deletion
        StopAutoRefresh();
        
        // Add to deleting set for UI feedback
        deletingImages.Add(image.ImageId);
        StateHasChanged();
        
        try
        {
            // Get full path to the image
            var fullPath = await PhotoPathService.GetFullPathAsync(image.RelativePath);
            Logger.LogInformation($"Attempting to delete file: {fullPath}");
            
            // Delete physical file if it exists
            if (!string.IsNullOrEmpty(fullPath) && File.Exists(fullPath))
            {
                try
                {
                    File.Delete(fullPath);
                    Logger.LogInformation($"Successfully deleted file: {fullPath}");
                }
                catch (IOException ioEx)
                {
                    Logger.LogWarning($"Could not delete file {fullPath}: {ioEx.Message}");
                    // Continue anyway - mark as deleted in DB
                }
            }
            
            // Mark as deleted in database using a fresh context
            using var scope = ServiceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<MyPhotoHelper.Data.MyPhotoHelperDbContext>();
            
            // Load the image fresh to avoid tracking issues
            var dbImage = await dbContext.tbl_images
                .FirstOrDefaultAsync(img => img.ImageId == image.ImageId);
                
            if (dbImage != null)
            {
                dbImage.IsDeleted = 1;
                dbImage.FileExists = 0;
                dbImage.DateModified = DateTime.Now;
                
                dbContext.Update(dbImage);
                await dbContext.SaveChangesAsync();
                Logger.LogInformation($"Marked image {image.ImageId} as deleted in database");
            }
            
            // Clear any error messages
            errorMessage = null;
            
            // Give UI time to show the deletion happened
            await Task.Delay(500);
            
            // Refresh the list
            await LoadDuplicates();
            
            // Restart auto-refresh if scanning is still active
            if (ScanStatusService.IsScanning)
            {
                StartAutoRefresh();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete {image.FileName}: {ex.Message}";
            lastException = ex;
            Logger.LogError(ex, $"Error deleting image {image.ImageId}: {image.FileName}");
            // Restart auto-refresh even on error
            if (ScanStatusService.IsScanning)
            {
                StartAutoRefresh();
            }
        }
        finally
        {
            // Always remove from deleting set
            deletingImages.Remove(image.ImageId);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        isDisposed = true;
        StopAutoRefresh();
        ScanStatusService.StatusChanged -= OnScanStatusChanged;
    }
}