@page "/gallery"
@using MyPhotoHelper.Components.Shared

<PageTitle>Gallery - MyPhotoHelper</PageTitle>

<AppErrorBoundary>
    <ChildContent>
        <div class="w-full gallery-page">
            <div class="flex justify-between items-center mb-4">
                <div>
                    <h1 class="text-4xl font-light">üì∏ Gallery</h1>
                    <p class="text-lg text-gray-500">
                        Browse all your photos by date
                    </p>
                </div>
                <div class="flex gap-2 items-center">
                    <!-- Category Filter Dropdown -->
                    <div class="relative">
                        <button class="bg-white border border-gray-300 hover:bg-gray-50 text-gray-700 font-medium py-2 px-4 rounded inline-flex items-center" type="button" @onclick="ToggleCategoryDropdown" @onclick:stopPropagation="true">
                            <i class="oi oi-tags"></i> 
                            @if (selectedCategories.Count == 3 || selectedCategories.Count == 0)
                            {
                                <span>All Categories</span>
                            }
                            else
                            {
                                <span>@selectedCategories.Count selected</span>
                            }
                        </button>
                        @if (showCategoryDropdown)
                        {
                            <div class="absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded-md shadow-lg z-50 p-3" @onclick:stopPropagation="true">
                                <h6 class="text-sm font-semibold text-gray-600 mb-2">Filter by Category</h6>
                                <div class="border-t border-gray-200 my-2"></div>
                                <div class="flex items-center mb-2">
                                    <input class="mr-2" type="checkbox" id="cat-photo" 
                                           checked="@selectedCategories.Contains("photo")"
                                           @onchange="@(() => ToggleCategory("photo"))" />
                                    <label class="text-sm" for="cat-photo">
                                        üì∑ Photos
                                    </label>
                                </div>
                                <div class="flex items-center mb-2">
                                    <input class="mr-2" type="checkbox" id="cat-screenshot" 
                                           checked="@selectedCategories.Contains("screenshot")"
                                           @onchange="@(() => ToggleCategory("screenshot"))" />
                                    <label class="text-sm" for="cat-screenshot">
                                        üñ•Ô∏è Screenshots
                                    </label>
                                </div>
                                <div class="flex items-center mb-2">
                                    <input class="mr-2" type="checkbox" id="cat-unknown" 
                                           checked="@selectedCategories.Contains("unknown")"
                                           @onchange="@(() => ToggleCategory("unknown"))" />
                                    <label class="text-sm" for="cat-unknown">
                                        ‚ùì Unknown
                                    </label>
                                </div>
                                <div class="border-t border-gray-200 my-2"></div>
                                <div class="flex justify-between mb-2">
                                    <button class="text-blue-600 hover:text-blue-800 text-sm p-0" @onclick="SelectAllCategories">Select All</button>
                                    <button class="text-blue-600 hover:text-blue-800 text-sm p-0" @onclick="ClearAllCategories">Clear All</button>
                                </div>
                                <div class="grid">
                                    <button class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded w-full" @onclick="ApplyCategoryFilter">
                                        <i class="oi oi-check"></i> Apply Filter
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <button class="bg-white border border-gray-300 hover:bg-gray-50 text-gray-700 font-medium py-2 px-4 rounded" @onclick="ToggleView">
                        <i class="oi @(isCompactView ? "oi-grid-four-up" : "oi-list")"></i> 
                        @(isCompactView ? "Grid View" : "Compact View")
                    </button>
                    <button class="bg-white border border-blue-500 text-blue-500 hover:bg-blue-50 font-medium py-2 px-4 rounded" @onclick="RefreshGallery">
                        <i class="oi oi-reload"></i> Refresh
                    </button>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="flex justify-center items-center" style="min-height: 400px;">
                    <div class="text-center">
                        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-3" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                        <p class="text-gray-500">Loading your photo collection...</p>
                    </div>
                </div>
            }
            else if (!yearGroups.Any())
            {
                <div class="text-center py-5">
                    <i class="text-8xl text-gray-500">üì∏</i>
                    <h3 class="mt-3 text-gray-500">No Photos Found</h3>
                    <p class="text-gray-500">Start scanning to add photos to your gallery.</p>
                    @if (!ScanStatusService.IsScanning)
                    {
                        <a href="/photoscan" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded inline-block mt-3">
                            <i class="oi oi-magnifying-glass"></i> Start Scanning
                        </a>
                    }
                </div>
            }
            else
            {
                <!-- Summary Stats -->
                <div class="stats-grid mb-3">
                    <div class="stat-card">
                        <div class="stat-label">Total Photos</div>
                        <div class="stat-value text-blue-600">@totalPhotos.ToString("N0")</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Years</div>
                        <div class="stat-value text-cyan-600">@yearGroups.Count</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Oldest Photo</div>
                        <div class="stat-value text-green-600">@(oldestPhoto?.ToString("yyyy") ?? "N/A")</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Newest Photo</div>
                        <div class="stat-value text-yellow-600">@(newestPhoto?.ToString("yyyy") ?? "N/A")</div>
                    </div>
                </div>

                <!-- Expand/Collapse All Buttons - Hidden for now
                <div class="d-flex justify-content-end mb-3">
                    <div class="btn-group">
                        <button class="btn btn-outline-secondary" @onclick="async () => await ExpandAll()" title="Expand all months">
                            <i class="oi oi-expand-down"></i> Expand All
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="() => CollapseAll()" title="Collapse all months">
                            <i class="oi oi-collapse-up"></i> Collapse All
                        </button>
                    </div>
                </div>
                -->

                <!-- Year/Month Groups -->
                @foreach (var yearGroup in yearGroups)
                {
                    <div class="year-section mb-5" id="year-@yearGroup.Year">
                        <div class="year-header sticky top-0 bg-white border-b border-gray-200 mb-3">
                            <h2 class="text-4xl font-light mb-0 py-2 px-3">
                                <span class="text-blue-600">@yearGroup.Year</span>
                                <small class="text-gray-500 ml-3">@yearGroup.TotalPhotos.ToString("N0") photos</small>
                            </h2>
                        </div>

                        @foreach (var monthGroup in yearGroup.MonthGroups)
                        {
                            <div class="month-section mb-4" id="month-@yearGroup.Year-@monthGroup.Month">
                                <div class="flex justify-between items-center mb-3">
                                    <h4 class="text-gray-600">
                                        @GetMonthName(monthGroup.Month)
                                        <small class="text-gray-500">(@monthGroup.PhotoCount photos)</small>
                                    </h4>
                                    <button class="bg-white border border-gray-300 hover:bg-gray-50 text-gray-700 font-medium py-1 px-2 rounded text-sm" 
                                            @onclick="() => ToggleMonth(yearGroup.Year, monthGroup.Month)">
                                        <i class="oi @(IsMonthExpanded(yearGroup.Year, monthGroup.Month) ? "oi-chevron-top" : "oi-chevron-bottom")"></i>
                                        @(IsMonthExpanded(yearGroup.Year, monthGroup.Month) ? "Collapse" : "Expand")
                                    </button>
                                </div>

                                @if (IsMonthExpanded(yearGroup.Year, monthGroup.Month))
                                {
                                    @if (monthGroup.Photos == null)
                                    {
                                        <div class="text-center py-3">
                                            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600" role="status">
                                                <span class="sr-only">Loading photos...</span>
                                            </div>
                                            <p class="text-gray-500 mt-2">Loading photos for @GetMonthName(monthGroup.Month) @yearGroup.Year...</p>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="photo-grid">
                                            @foreach (var photo in monthGroup.Photos)
                                            {
                                                <ImageViewer Photo="photo" 
                                                           ContainerClass="@(isCompactView ? "thumbnail-container-compact" : "thumbnail-container")"
                                                           ShowTime="true" />
                                            }
                                        </div>
                                    }
                                }
                            </div>
                        }
                    </div>
                }
            }
        </div>

        <!-- Scroll to top button -->
        @if (showScrollTop)
        {
            <button class="bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-full fixed bottom-8 right-8 w-14 h-14 flex items-center justify-center shadow-lg hover:shadow-xl transition-all duration-300" @onclick="ScrollToTop" title="Scroll to top">
                <i class="oi oi-arrow-top"></i>
            </button>
        }
    </ChildContent>
</AppErrorBoundary>

<style>
    .gallery-page {
        padding-bottom: 2rem;
    }
    
    .stats-grid {
        display: flex;
        gap: 1.5rem;
        flex-wrap: nowrap;
        padding: 0.75rem;
        background-color: #f8f9fa;
        border-radius: 0.5rem;
    }
    
    .stat-card {
        flex: 1 1 25%;
        min-width: 0;
        text-align: center;
    }
    
    .stat-label {
        font-size: 0.75rem;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 0.25rem;
    }
    
    .stat-value {
        font-size: 1.25rem;
        font-weight: 600;
    }
    
    /* On very small screens, adjust stat sizing */
    @@media (max-width: 768px) {
        .stat-label {
            font-size: 0.7rem;
        }
        .stat-value {
            font-size: 1rem;
        }
        .stats-grid {
            gap: 1rem;
            padding: 0.5rem;
        }
    }
    
    .photo-grid {
        display: flex;
        flex-wrap: wrap;
        align-items: flex-start;
        justify-content: flex-start;
    }

    .year-header {
        z-index: 10;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .month-section {
        transition: all 0.3s ease;
    }

    .btn-floating {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        width: 56px;
        height: 56px;
        border-radius: 50%;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

    .btn-floating:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.2);
    }

    /* Sticky year headers */
    @@media (min-width: 768px) {
        .year-header {
            position: sticky;
            top: 0;
        }
    }

    /* Removed old stat card styles - no longer needed */

    .card.h-100 .display-6 {
        font-size: 2rem;
        font-weight: 300;
        line-height: 1.2;
    }

    .card.h-100 .card-title {
        font-size: 1rem;
        margin-bottom: 0.5rem !important;
    }
</style>

<script>
    window.galleryHelpers = {
        saveScrollPosition: function() {
            return {
                scrollTop: window.pageYOffset || document.documentElement.scrollTop,
                scrollLeft: window.pageXOffset || document.documentElement.scrollLeft
            };
        },
        restoreScrollPosition: function(position) {
            if (position) {
                // Use requestAnimationFrame for smoother scrolling
                requestAnimationFrame(() => {
                    window.scrollTo(position.scrollLeft, position.scrollTop);
                });
            }
        },
        restoreScrollPositionWithRetry: function(position, maxRetries = 5) {
            if (!position) return;
            
            let retries = 0;
            const tryRestore = () => {
                window.scrollTo(position.scrollLeft, position.scrollTop);
                
                // Check if scroll was successful
                const currentScrollTop = window.pageYOffset || document.documentElement.scrollTop;
                if (Math.abs(currentScrollTop - position.scrollTop) > 10 && retries < maxRetries) {
                    retries++;
                    setTimeout(tryRestore, 100);
                }
            };
            
            // Initial attempt after a small delay to let DOM settle
            setTimeout(tryRestore, 50);
        }
    };
</script>