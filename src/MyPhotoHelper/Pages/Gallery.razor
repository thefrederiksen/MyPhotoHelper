@page "/gallery"
@using MyPhotoHelper.Models
@using MyPhotoHelper.Components.Shared
@using MyPhotoHelper.Data
@using MyPhotoHelper.Services
@using Microsoft.EntityFrameworkCore
@implements IDisposable
@inject MyPhotoHelperDbContext DbContext
@inject IScanStatusService ScanStatusService
@inject IJSRuntime JSRuntime

<PageTitle>Gallery - MyPhotoHelper</PageTitle>

<AppErrorBoundary>
    <ChildContent>
        <div class="container-fluid gallery-page">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="display-5">ðŸ“¸ Gallery</h1>
                    <p class="lead text-muted">Browse all your photos by date</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-secondary" @onclick="ToggleView">
                        <i class="oi @(isCompactView ? "oi-grid-four-up" : "oi-list")"></i> 
                        @(isCompactView ? "Grid View" : "Compact View")
                    </button>
                    <button class="btn btn-outline-primary" @onclick="RefreshGallery">
                        <i class="oi oi-reload"></i> Refresh
                    </button>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="d-flex justify-content-center align-items-center" style="min-height: 400px;">
                    <div class="text-center">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="text-muted">Loading your photo collection...</p>
                    </div>
                </div>
            }
            else if (!yearGroups.Any())
            {
                <div class="text-center py-5">
                    <i class="display-1 text-muted">ðŸ“¸</i>
                    <h3 class="mt-3 text-muted">No Photos Found</h3>
                    <p class="text-muted">Start scanning to add photos to your gallery.</p>
                    @if (!ScanStatusService.IsScanning)
                    {
                        <a href="/photoscan" class="btn btn-primary mt-3">
                            <i class="oi oi-magnifying-glass"></i> Start Scanning
                        </a>
                    }
                </div>
            }
            else
            {
                <!-- Summary Stats -->
                <div class="row mb-4">
                    <div class="col-md-3 col-sm-6 mb-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-primary">Total Photos</h5>
                                <p class="display-6 mb-0">@totalPhotos.ToString("N0")</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-info">Years</h5>
                                <p class="display-6 mb-0">@yearGroups.Count</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-success">Oldest Photo</h5>
                                <p class="h4 mb-0">@(oldestPhoto?.ToString("yyyy") ?? "N/A")</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-warning">Newest Photo</h5>
                                <p class="h4 mb-0">@(newestPhoto?.ToString("yyyy") ?? "N/A")</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Year/Month Groups -->
                @foreach (var yearGroup in yearGroups)
                {
                    <div class="year-section mb-5" id="year-@yearGroup.Year">
                        <div class="year-header sticky-top bg-white border-bottom mb-3">
                            <h2 class="display-6 mb-0 py-2">
                                <span class="text-primary">@yearGroup.Year</span>
                                <small class="text-muted ms-3">@yearGroup.TotalPhotos.ToString("N0") photos</small>
                            </h2>
                        </div>

                        @foreach (var monthGroup in yearGroup.MonthGroups)
                        {
                            <div class="month-section mb-4" id="month-@yearGroup.Year-@monthGroup.Month">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h4 class="text-secondary">
                                        @GetMonthName(monthGroup.Month)
                                        <small class="text-muted">(@monthGroup.PhotoCount photos)</small>
                                    </h4>
                                    <button class="btn btn-sm btn-outline-secondary" 
                                            @onclick="() => ToggleMonth(yearGroup.Year, monthGroup.Month)">
                                        <i class="oi @(IsMonthExpanded(yearGroup.Year, monthGroup.Month) ? "oi-chevron-top" : "oi-chevron-bottom")"></i>
                                        @(IsMonthExpanded(yearGroup.Year, monthGroup.Month) ? "Collapse" : "Expand")
                                    </button>
                                </div>

                                @if (IsMonthExpanded(yearGroup.Year, monthGroup.Month))
                                {
                                    @if (monthGroup.Photos == null)
                                    {
                                        <div class="text-center py-3">
                                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                                <span class="visually-hidden">Loading photos...</span>
                                            </div>
                                            <p class="text-muted mt-2">Loading photos for @GetMonthName(monthGroup.Month) @yearGroup.Year...</p>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="row g-2">
                                            @foreach (var photo in monthGroup.Photos)
                                            {
                                                <ImageViewer Photo="photo" 
                                                           ContainerClass="@(isCompactView ? "col-2 col-sm-1" : "col-6 col-sm-4 col-md-3 col-lg-2")"
                                                           ShowTime="true" />
                                            }
                                        </div>
                                    }
                                }
                            </div>
                        }
                    </div>
                }
            }
        </div>

        <!-- Scroll to top button -->
        @if (showScrollTop)
        {
            <button class="btn btn-primary btn-floating" @onclick="ScrollToTop" title="Scroll to top">
                <i class="oi oi-arrow-top"></i>
            </button>
        }
    </ChildContent>
</AppErrorBoundary>

<style>
    .gallery-page {
        padding-bottom: 2rem;
    }

    .year-header {
        z-index: 10;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .month-section {
        transition: all 0.3s ease;
    }

    .btn-floating {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        width: 56px;
        height: 56px;
        border-radius: 50%;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

    .btn-floating:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.2);
    }

    /* Sticky year headers */
    @@media (min-width: 768px) {
        .year-header {
            position: sticky;
            top: 0;
        }
    }
</style>

@code {
    private class YearGroup
    {
        public int Year { get; set; }
        public int TotalPhotos { get; set; }
        public List<MonthGroup> MonthGroups { get; set; } = new();
    }

    private class MonthGroup
    {
        public int Month { get; set; }
        public int PhotoCount { get; set; }
        public List<tbl_images>? Photos { get; set; }
    }

    private List<YearGroup> yearGroups = new();
    private bool isLoading = true;
    private bool isCompactView = false;
    private int totalPhotos = 0;
    private DateTime? oldestPhoto;
    private DateTime? newestPhoto;
    private bool showScrollTop = false;
    private Dictionary<string, bool> expandedMonths = new();

    protected override async Task OnInitializedAsync()
    {
        ScanStatusService.StatusChanged += OnScanStatusChanged;
        await LoadGalleryStructure();
        
        // Set up scroll detection for scroll-to-top button
        await JSRuntime.InvokeVoidAsync("eval", @"
            window.addEventListener('scroll', function() {
                window.scrollY > 300 ? 
                    DotNet.invokeMethodAsync('MyPhotoHelper', 'SetScrollTopVisible', true) :
                    DotNet.invokeMethodAsync('MyPhotoHelper', 'SetScrollTopVisible', false);
            });
        ");
    }

    private async Task LoadGalleryStructure()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Get photo counts grouped by year and month
            var photoStats = await DbContext.tbl_images
                .Where(img => img.FileExists == 1 && img.IsDeleted == 0)
                .Join(DbContext.tbl_image_metadata,
                      img => img.ImageId,
                      meta => meta.ImageId,
                      (img, meta) => new { img, meta })
                .Select(x => new
                {
                    x.img.ImageId,
                    // Always use DateTaken from metadata, which should never be null
                    // If it is null for some reason, fall back to DateCreated
                    Date = x.meta.DateTaken ?? x.img.DateCreated,
                    Year = (x.meta.DateTaken ?? x.img.DateCreated).Year,
                    Month = (x.meta.DateTaken ?? x.img.DateCreated).Month
                })
                .GroupBy(x => new { x.Year, x.Month })
                .Select(g => new
                {
                    g.Key.Year,
                    g.Key.Month,
                    Count = g.Count()
                })
                .OrderByDescending(x => x.Year)
                .ThenByDescending(x => x.Month)
                .ToListAsync();

            // Calculate totals
            totalPhotos = photoStats.Sum(x => x.Count);
            
            // Get date range
            if (photoStats.Any())
            {
                var years = photoStats.Select(x => x.Year).Distinct().OrderBy(y => y).ToList();
                oldestPhoto = new DateTime(years.First(), 1, 1);
                newestPhoto = new DateTime(years.Last(), 12, 31);
            }

            // Build year/month structure (without loading photos yet)
            yearGroups = photoStats
                .GroupBy(x => x.Year)
                .Select(yearGroup => new YearGroup
                {
                    Year = yearGroup.Key,
                    TotalPhotos = yearGroup.Sum(x => x.Count),
                    MonthGroups = yearGroup
                        .Select(x => new MonthGroup
                        {
                            Month = x.Month,
                            PhotoCount = x.Count,
                            Photos = null // Will load on demand
                        })
                        .OrderByDescending(x => x.Month)
                        .ToList()
                })
                .OrderByDescending(x => x.Year)
                .ToList();

            // Auto-expand current month
            var currentYear = DateTime.Now.Year;
            var currentMonth = DateTime.Now.Month;
            var key = $"{currentYear}-{currentMonth}";
            expandedMonths[key] = true;
            
            // Load photos for current month immediately
            if (yearGroups.Any(y => y.Year == currentYear && y.MonthGroups.Any(m => m.Month == currentMonth)))
            {
                await LoadMonthPhotos(currentYear, currentMonth);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading gallery: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadMonthPhotos(int year, int month)
    {
        var yearGroup = yearGroups.FirstOrDefault(y => y.Year == year);
        var monthGroup = yearGroup?.MonthGroups.FirstOrDefault(m => m.Month == month);
        
        if (monthGroup == null || monthGroup.Photos != null) return;

        try
        {
            // Load photos for this specific month
            var startDate = new DateTime(year, month, 1);
            var endDate = startDate.AddMonths(1);

            monthGroup.Photos = await DbContext.tbl_images
                .Where(img => img.FileExists == 1 && img.IsDeleted == 0)
                .Join(DbContext.tbl_image_metadata,
                      img => img.ImageId,
                      meta => meta.ImageId,
                      (img, meta) => new { img, meta })
                .Where(x => (x.meta.DateTaken ?? x.img.DateCreated) >= startDate &&
                           (x.meta.DateTaken ?? x.img.DateCreated) < endDate)
                .OrderByDescending(x => x.meta.DateTaken ?? x.img.DateCreated)
                .Select(x => x.img)
                .Include(img => img.tbl_image_metadata)
                .Include(img => img.ScanDirectory)
                .ToListAsync();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading photos for {year}-{month}: {ex.Message}");
        }
    }

    private async Task ToggleMonth(int year, int month)
    {
        var key = $"{year}-{month}";
        
        if (expandedMonths.ContainsKey(key))
        {
            expandedMonths[key] = !expandedMonths[key];
        }
        else
        {
            expandedMonths[key] = true;
        }

        // Load photos if expanding and not already loaded
        if (expandedMonths[key])
        {
            await LoadMonthPhotos(year, month);
        }
        
        StateHasChanged();
    }

    private bool IsMonthExpanded(int year, int month)
    {
        var key = $"{year}-{month}";
        return expandedMonths.ContainsKey(key) && expandedMonths[key];
    }

    private string GetMonthName(int month)
    {
        return new DateTime(2000, month, 1).ToString("MMMM");
    }

    private void ToggleView()
    {
        isCompactView = !isCompactView;
    }

    private async Task RefreshGallery()
    {
        expandedMonths.Clear();
        await LoadGalleryStructure();
    }

    private async Task ScrollToTop()
    {
        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
    }

    [JSInvokable]
    public static Task SetScrollTopVisible(bool visible)
    {
        // This would need to be implemented with a static event or similar
        // For now, we'll keep it simple
        return Task.CompletedTask;
    }

    private async void OnScanStatusChanged(object? sender, EventArgs e)
    {
        await InvokeAsync(async () =>
        {
            // Refresh if scan completed
            if (!ScanStatusService.IsScanning)
            {
                await LoadGalleryStructure();
            }
        });
    }

    public void Dispose()
    {
        ScanStatusService.StatusChanged -= OnScanStatusChanged;
    }
}