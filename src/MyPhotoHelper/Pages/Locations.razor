@page "/locations"
@page "/photo-map"
@using MyPhotoHelper.Models
@using MyPhotoHelper.Components.Shared
@using MyPhotoHelper.Data
@using MyPhotoHelper.Services
@using Microsoft.EntityFrameworkCore
@implements IDisposable
@inject MyPhotoHelperDbContext DbContext
@inject NavigationManager Navigation
@inject IScanStatusService ScanStatusService
@inject IImageDetailsService ImageDetailsService

<PageTitle>Photo Map - MyPhotoHelper</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="display-5">üó∫Ô∏è Photo Map</h1>
            <p class="lead text-muted">Explore your photos by where they were taken</p>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-outline-secondary" @onclick="RefreshData">
                <i class="oi oi-reload"></i> Refresh
            </button>
        </div>
    </div>

    @if (ScanStatusService.IsScanning && locationsWithPhotos.Count == 0)
    {
        <div class="alert alert-info d-flex align-items-center mb-4">
            <div class="spinner-border spinner-border-sm text-primary me-3" role="status">
                <span class="visually-hidden">Scanning...</span>
            </div>
            <div>
                <strong>Finding photo locations...</strong><br>
                <small class="text-muted">Your photos will appear here as location details are discovered.</small>
            </div>
        </div>
    }

    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
            <LoadingSpinner />
        </div>
    }
    else if (locationsWithPhotos.Count == 0)
    {
        <div class="text-center py-5">
            <i class="display-1 text-muted">üó∫Ô∏è</i>
            <h3 class="mt-3 text-muted">No Location Information Found</h3>
            <p class="text-muted">
                Photos need GPS information to appear here.<br>
                Most smartphone photos include location data, but some older photos or cameras may not.
            </p>
            @if (!ScanStatusService.IsScanning)
            {
                <button class="btn btn-primary mt-3" @onclick="@(() => Navigation.NavigateTo("/photoscan"))">
                    <i class="oi oi-magnifying-glass"></i> Scan for Photos
                </button>
            }
        </div>
    }
    else
    {
        <div class="row">
            <!-- Locations Overview -->
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="oi oi-map-marker"></i> Location Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="text-center mb-3">
                            <h2 class="text-primary">@locationsWithPhotos.Count</h2>
                            <small class="text-muted">Different Locations</small>
                        </div>
                        <div class="text-center">
                            <h3 class="text-success">@totalPhotosWithLocation</h3>
                            <small class="text-muted">Photos with Location Data</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Locations List -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="oi oi-list"></i> Photo Locations</h5>
                    </div>
                    <div class="card-body">
                        @if (locationsWithPhotos.Any())
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var location in locationsWithPhotos.OrderByDescending(x => x.PhotoCount))
                                {
                                    <div class="list-group-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div class="flex-grow-1">
                                                <h6 class="mb-1">
                                                    @if (!string.IsNullOrEmpty(location.LocationName))
                                                    {
                                                        <text>@location.LocationName</text>
                                                    }
                                                    else
                                                    {
                                                        <text>@location.Latitude.ToString("F4"), @location.Longitude.ToString("F4")</text>
                                                    }
                                                </h6>
                                                <small class="text-muted">
                                                    <i class="oi oi-map-marker"></i> 
                                                    @location.Latitude.ToString("F6"), @location.Longitude.ToString("F6")
                                                </small>
                                                <div class="mt-2">
                                                    <a href="https://www.google.com/maps?q=@location.Latitude,@location.Longitude" 
                                                       target="_blank" class="btn btn-sm btn-outline-primary me-2">
                                                        <i class="oi oi-external-link"></i> View on Map
                                                    </a>
                                                    @if (location.SampleImageIds.Any())
                                                    {
                                                        <button class="btn btn-sm btn-outline-secondary" 
                                                                @onclick="() => ImageDetailsService.ShowImageDetails(location.SampleImageIds.First())">
                                                            <i class="oi oi-info"></i> View Photo Details
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                            <div class="text-end">
                                                <span class="badge bg-primary rounded-pill">@location.PhotoCount</span>
                                                <br>
                                                <small class="text-muted">photos</small>
                                            </div>
                                        </div>
                                        
                                        @* Show sample photos *@
                                        @if (location.SampleImageIds.Any())
                                        {
                                            <div class="mt-3">
                                                <div class="row">
                                                    @foreach (var (imageId, index) in location.SampleImageIds.Take(3).Select((id, i) => (id, i)))
                                                    {
                                                        var image = GetImageForId(imageId);
                                                        <div class="col-4">
                                                            @if (image != null)
                                                            {
                                                                <ImageViewer Photo="image" 
                                                                           ShowTime="false"
                                                                           ContainerClass="col-12" />
                                                            }
                                                            else
                                                            {
                                                                <!-- Placeholder while image loads -->
                                                                <div class="photo-placeholder-box">
                                                                    <div class="spinner-border spinner-border-sm text-muted" role="status">
                                                                        <span class="visually-hidden">Loading...</span>
                                                                    </div>
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                                @if (location.PhotoCount > 3)
                                                {
                                                    <div class="text-center mt-2">
                                                        <small class="text-muted">
                                                            <i class="oi oi-camera-slr"></i> +@(location.PhotoCount - 3) more photos at this location
                                                        </small>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-3 text-muted">
                                <i class="oi oi-info"></i> No photos with location data found
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private List<LocationGroup> locationsWithPhotos = new();
    private int totalPhotosWithLocation = 0;
    private Dictionary<int, tbl_images> imageCache = new();

    public class LocationGroup
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public string? LocationName { get; set; }
        public int PhotoCount { get; set; }
        public List<int> SampleImageIds { get; set; } = new();
    }

    protected override async Task OnInitializedAsync()
    {
        ScanStatusService.StatusChanged += OnScanStatusChanged;
        await LoadLocationData();
    }

    private async Task LoadLocationData(bool showLoadingState = true)
    {
        if (showLoadingState)
        {
            isLoading = true;
            StateHasChanged();
        }

        try
        {
            // OPTIMIZED: Get only essential location data with a more efficient query
            var locationDataQuery = await DbContext.tbl_image_metadata
                .Where(m => m.Latitude.HasValue && m.Longitude.HasValue)
                .Join(DbContext.tbl_images.Where(img => img.FileExists == 1 && img.IsDeleted == 0),
                      meta => meta.ImageId,
                      img => img.ImageId,
                      (meta, img) => new { 
                          ImageId = img.ImageId,
                          Latitude = meta.Latitude!.Value,
                          Longitude = meta.Longitude!.Value,
                          LocationName = meta.LocationName
                      })
                .Take(5000) // Limit to prevent massive queries
                .ToListAsync();

            totalPhotosWithLocation = locationDataQuery.Count;

            // OPTIMIZED: Group and limit locations to top 50 for initial display
            locationsWithPhotos = locationDataQuery
                .GroupBy(x => new 
                { 
                    Lat = Math.Round(x.Latitude, 3),
                    Lon = Math.Round(x.Longitude, 3),
                    LocationName = x.LocationName
                })
                .Select(g => new LocationGroup
                {
                    Latitude = g.Key.Lat,
                    Longitude = g.Key.Lon,
                    LocationName = g.Key.LocationName,
                    PhotoCount = g.Count(),
                    SampleImageIds = g.Take(3).Select(x => x.ImageId).ToList() // Only 3 samples needed
                })
                .OrderByDescending(x => x.PhotoCount)
                .Take(50) // Show top 50 locations initially
                .ToList();

            // Show the page immediately with location data
            if (showLoadingState)
            {
                isLoading = false;
                StateHasChanged();
            }

            // OPTIMIZED: Load sample images in smaller batches in background
            await LoadSampleImagesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading location data: {ex.Message}");
        }
        finally
        {
            if (showLoadingState)
            {
                isLoading = false;
            }
            StateHasChanged();
        }
    }

    private async Task LoadSampleImagesAsync()
    {
        try
        {
            var allSampleImageIds = locationsWithPhotos.SelectMany(l => l.SampleImageIds).Distinct().ToList();
            if (!allSampleImageIds.Any()) return;

            // Load in batches of 20 for better performance
            var batchSize = 20;
            imageCache.Clear();
            
            for (int i = 0; i < allSampleImageIds.Count; i += batchSize)
            {
                var batch = allSampleImageIds.Skip(i).Take(batchSize).ToList();
                
                var batchImages = await DbContext.tbl_images
                    .Where(img => batch.Contains(img.ImageId))
                    .Include(img => img.ScanDirectory)
                    .ToListAsync();
                
                foreach (var img in batchImages)
                {
                    imageCache[img.ImageId] = img;
                }
                
                // Update UI after each batch for progressive loading
                StateHasChanged();
                
                // Small delay to prevent UI blocking
                await Task.Delay(10);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading sample images: {ex.Message}");
        }
    }

    private async Task RefreshData()
    {
        await LoadLocationData();
    }

    private async void OnScanStatusChanged(object? sender, EventArgs e)
    {
        await InvokeAsync(async () =>
        {
            await LoadLocationData(showLoadingState: false);
        });
    }

    private tbl_images? GetImageForId(int imageId)
    {
        return imageCache.TryGetValue(imageId, out var image) ? image : null;
    }

    public void Dispose()
    {
        ScanStatusService.StatusChanged -= OnScanStatusChanged;
    }
}

<style>
    .photo-placeholder-box {
        aspect-ratio: 1;
        background-color: #f8f9fa;
        border-radius: 0.375rem;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
    }
</style>