@page "/memories"
@using MyPhotoHelper.Services
@using MyPhotoHelper.Models
@using MyPhotoHelper.Components.Shared
@using MyPhotoHelper.Data
@using Microsoft.EntityFrameworkCore
@implements IDisposable
@inject IMemoryService MemoryService
@inject IJSRuntime JSRuntime
@inject MyPhotoHelperDbContext DbContext
@inject IServiceProvider ServiceProvider
@inject NavigationManager Navigation
@inject IScanStatusService ScanStatusService

<PageTitle>Memories - @selectedDate.ToString("MMMM d") - MyPhotoHelper</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="display-5">ðŸ“¸ Memories</h1>
            <p class="lead text-muted">Photos from @selectedDate.ToString("MMMM d") in previous years</p>
            @if (selectedDate.Date != DateTime.Today)
            {
                <p class="text-info small mb-0">
                    <i class="oi oi-calendar"></i> Viewing: @selectedDate.ToString("dddd, MMMM d, yyyy")
                    @if (selectedDate.Date > DateTime.Today)
                    {
                        <span class="badge bg-info ms-2">Future Date</span>
                    }
                </p>
            }
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-outline-secondary" @onclick="PreviousDay">
                <i class="oi oi-chevron-left"></i> Previous Day
            </button>
            <button class="btn btn-outline-secondary" @onclick="NextDay">
                <i class="oi oi-chevron-right"></i> Next Day
            </button>
            <button class="btn btn-primary" @onclick="GoToToday">
                <i class="oi oi-home"></i> Today
            </button>
        </div>
    </div>

    @if (ScanStatusService.IsScanning && !hasPhotos)
    {
        <div class="alert alert-info d-flex align-items-center mb-4">
            <div class="spinner-border spinner-border-sm text-primary me-3" role="status">
                <span class="visually-hidden">Scanning...</span>
            </div>
            <div>
                <h6 class="mb-0">Scanning for photos...</h6>
                <small>Your memories will appear here as photos are discovered.</small>
            </div>
        </div>
    }
    
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading memories...</span>
            </div>
            <p class="mt-2 text-muted">Loading memories for @selectedDate.ToString("MMMM d")...</p>
        </div>
    }
    else if (memories?.HasMemories == true)
    {
        <div class="row mb-3">
            <div class="col-12">
                <div class="alert alert-info d-flex align-items-center">
                    <i class="oi oi-info me-2"></i>
                    <span>Found <strong>@memories.TotalPhotos</strong> photos from @memories.FormattedDate across <strong>@memories.YearGroups.Count</strong> years</span>
                </div>
            </div>
        </div>

        @foreach (var yearGroup in memories.YearGroups)
        {
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="mb-0">
                        @yearGroup.Year
                        @if (yearGroup.IsToday(selectedDate))
                        {
                            <span class="badge bg-success ms-2">Today's Photos</span>
                        }
                        else if (yearGroup.Year == DateTime.Today.Year - 1)
                        {
                            <span class="badge bg-info ms-2">Last Year</span>
                        }
                    </h3>
                    <span class="badge bg-secondary">@yearGroup.PhotoCount photos</span>
                </div>
                <div class="card-body">
                    <div class="row g-2">
                        @foreach (var photo in yearGroup.Photos.Take(20))
                        {
                            <ImageViewer Photo="photo" ShowTime="true" OnImageClick="HandleImageClick" />
                        }
                    </div>
                    @if (yearGroup.PhotoCount > 20)
                    {
                        <div class="mt-3 text-center">
                            <button class="btn btn-outline-primary btn-sm" @onclick="() => ShowAllPhotosForYear(yearGroup.Year)">
                                View all @yearGroup.PhotoCount photos from @yearGroup.Year
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <div class="text-center py-5">
            <div class="mb-4">
                <i class="oi oi-camera" style="font-size: 4rem; color: #6c757d;"></i>
            </div>
            <h3 class="text-muted">No memories for @selectedDate.ToString("MMMM d")</h3>
            <p class="text-muted">No photos were taken on this day in previous years.</p>
            <p class="text-muted mb-4">Try browsing other dates or make sure your photos have been scanned and have date information.</p>
            <div class="d-flex gap-2 justify-content-center">
                <button class="btn btn-outline-primary" @onclick="PreviousDay">
                    <i class="oi oi-chevron-left"></i> Previous Day
                </button>
                <button class="btn btn-outline-primary" @onclick="NextDay">
                    <i class="oi oi-chevron-right"></i> Next Day
                </button>
            </div>
        </div>
    }
</div>

@code {
    private DateTime selectedDate = DateTime.Today;
    private MemoryCollection? memories;
    private bool isLoading = true;
    private bool hasPhotos = false;
    private System.Threading.Timer? refreshTimer;
    private int lastPhotoCount = 0;

    protected override async Task OnInitializedAsync()
    {
        // Check if any scan directories are configured
        var hasScanDirectories = await DbContext.tbl_scan_directory.AnyAsync();
        
        if (!hasScanDirectories)
        {
            // No directories configured, redirect to startup wizard
            Navigation.NavigateTo("/startup-wizard", replace: true);
            return;
        }
        
        await LoadMemories();
        
        // Subscribe to scan status changes
        ScanStatusService.StatusChanged += OnScanStatusChanged;
        
        // Start auto-refresh timer if scanning
        if (ScanStatusService.IsScanning)
        {
            StartAutoRefresh();
        }
    }

    private async Task LoadMemories()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            memories = await MemoryService.GetTodaysMemoriesAsync(selectedDate);
            hasPhotos = memories?.TotalPhotos > 0;
        }
        catch (Exception ex)
        {
            // Log error but don't show to user
            Console.WriteLine($"Error loading memories: {ex.Message}");
            memories = new MemoryCollection { Date = selectedDate };
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task PreviousDay()
    {
        selectedDate = selectedDate.AddDays(-1);
        await LoadMemories();
        StateHasChanged(); // Force UI update
    }

    private async Task NextDay()
    {
        selectedDate = selectedDate.AddDays(1);
        await LoadMemories();
        StateHasChanged(); // Force UI update
    }

    private async Task GoToToday()
    {
        selectedDate = DateTime.Today;
        await LoadMemories();
        StateHasChanged(); // Force UI update
    }

    private void HandleImageClick(tbl_images photo)
    {
        // Image viewer handles the click internally, this is just for tracking
        Console.WriteLine($"Image clicked: {photo.FileName}");
    }

    private async Task ShowAllPhotosForYear(int year)
    {
        // TODO: Navigate to photo gallery filtered by year and date
        await JSRuntime.InvokeVoidAsync("alert", $"Show all photos from {year}");
    }
    
    private void OnScanStatusChanged(object? sender, EventArgs e)
    {
        InvokeAsync(async () =>
        {
            if (ScanStatusService.IsScanning)
            {
                StartAutoRefresh();
            }
            else
            {
                StopAutoRefresh();
                // Do one final refresh when scan completes
                await LoadMemories();
            }
        });
    }
    
    private void StartAutoRefresh()
    {
        // Refresh every 3 seconds while scanning
        refreshTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                try
                {
                    // Create a new scoped context for the background timer
                    using var scope = ServiceProvider.CreateScope();
                    var scopedDbContext = scope.ServiceProvider.GetRequiredService<MyPhotoHelperDbContext>();
                    
                    // Check if we have new photos
                    var currentPhotoCount = await scopedDbContext.tbl_images.CountAsync();
                    if (currentPhotoCount != lastPhotoCount)
                    {
                        lastPhotoCount = currentPhotoCount;
                        await LoadMemories();
                    }
                }
                catch (Exception ex)
                {
                    // Log the error but don't crash the timer
                    Console.WriteLine($"Error in auto-refresh timer: {ex.Message}");
                    // Stop the timer to prevent repeated errors
                    StopAutoRefresh();
                }
            });
        }, null, TimeSpan.FromSeconds(3), TimeSpan.FromSeconds(3));
    }
    
    private void StopAutoRefresh()
    {
        refreshTimer?.Dispose();
        refreshTimer = null;
    }
    
    public void Dispose()
    {
        StopAutoRefresh();
        ScanStatusService.StatusChanged -= OnScanStatusChanged;
    }
}