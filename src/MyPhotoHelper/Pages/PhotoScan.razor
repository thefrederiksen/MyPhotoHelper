@page "/photo-scan"
@using MyPhotoHelper.Data
@using MyPhotoHelper.Models
@using MyPhotoHelper.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Hosting
@using Microsoft.JSInterop
@implements IDisposable
@inject MyPhotoHelperDbContext DbContext
@inject MyPhotoHelper.Services.IScanStatusService ScanStatusService
@inject MyPhotoHelper.Services.IMetadataExtractionService MetadataExtractionService
@inject MyPhotoHelper.Services.IPhasedScanService PhasedScanService
@inject IServiceProvider ServiceProvider
@inject NavigationManager Navigation
@inject ILogger<PhotoScan> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Scan Progress - MyPhotoHelper</PageTitle>

<div class="container-fluid">
    <h1 class="display-4">Scan Progress</h1>
    <p class="lead">Monitor the progress of photo scanning operations</p>
    
    <div class="row">
        <div class="col-md-8">
            <!-- Scanner Status -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <span class="oi oi-pulse" aria-hidden="true"></span> 
                        Current Status
                    </h5>
                </div>
                <div class="card-body">
                    @if (scanDirectories == null || !scanDirectories.Any())
                    {
                        <div class="alert alert-warning mb-3">
                            <span class="oi oi-warning" aria-hidden="true"></span>
                            <strong>No scan directories configured!</strong>
                            <br />
                            Please complete the <a href="/startup-wizard" class="alert-link">setup wizard</a> to add directories to scan.
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label class="form-label">Configured Directories</label>
                            <div class="list-group">
                                @foreach (var dir in scanDirectories)
                                {
                                    <div class="list-group-item">
                                        <span class="text-break">@dir.DirectoryPath</span>
                                        @if (Directory.Exists(dir.DirectoryPath))
                                        {
                                            <span class="badge bg-success float-end">Exists</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger float-end">Not Found</span>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                        
                        @if (ScanStatusService.IsScanning)
                        {
                            <div class="alert alert-info">
                                <div class="d-flex align-items-center">
                                    <div class="spinner-border text-primary me-3" role="status">
                                        <span class="visually-hidden">Scanning...</span>
                                    </div>
                                    <div>
                                        <h6 class="mb-0">Phased scan in progress...</h6>
                                        <small>The scanner is running multiple phases. You can navigate away from this page.</small>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    
                    @if (!ScanStatusService.IsScanning)
                    {
                        <div class="text-center py-3">
                            <p class="text-muted mb-0">
                                <i class="oi oi-info"></i> No scan is currently running. 
                                Scans run automatically in the background based on your settings.
                            </p>
                        </div>
                    }
                </div>
            </div>

            <!-- Phased Scan Progress -->
            @if (ScanStatusService.IsScanning && ScanStatusService.CurrentPhasedProgress != null)
            {
                var phasedProgress = ScanStatusService.CurrentPhasedProgress;
                <div class="card mb-4 border-primary">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            Phased Scan Progress - @GetPhaseDisplayName(phasedProgress.CurrentPhase)
                        </h5>
                    </div>
                    <div class="card-body">
                        @foreach (var phase in phasedProgress.PhaseProgress.Values.OrderBy(p => p.Phase))
                        {
                            var isCurrentPhase = phase.Phase == phasedProgress.CurrentPhase;
                            var isCompleted = phase.IsComplete;
                            var isActive = isCurrentPhase && !isCompleted;
                            
                            <div class="mb-4">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div class="d-flex align-items-center">
                                        @if (isCompleted)
                                        {
                                            <span class="badge bg-success me-2">✓</span>
                                        }
                                        else if (isActive)
                                        {
                                            <span class="spinner-grow spinner-grow-sm text-primary me-2"></span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary me-2">⏳</span>
                                        }
                                        <strong class="@(isActive ? "text-primary" : "")">
                                            @GetPhaseDisplayName(phase.Phase)
                                        </strong>
                                    </div>
                                    @if (phase.TotalItems > 0)
                                    {
                                        <span>
                                            <strong>@phase.ProcessedItems</strong> / @phase.TotalItems
                                            @if (phase.ErrorCount > 0)
                                            {
                                                <span class="text-danger ms-2">(@phase.ErrorCount errors)</span>
                                            }
                                        </span>
                                    }
                                </div>
                                
                                @if (phase.TotalItems > 0)
                                {
                                    <div class="progress mb-2" style="height: 25px;">
                                        <div class="progress-bar @(isActive ? "progress-bar-striped progress-bar-animated" : "")" 
                                             style="width: @(phase.ProgressPercentage)%" 
                                             role="progressbar">
                                            <span class="fw-bold">@(phase.ProgressPercentage.ToString("F1"))%</span>
                                        </div>
                                    </div>
                                    
                                    @if (phase.Phase == ScanPhase.Phase1_Discovery && phase.ProcessedItems > 0)
                                    {
                                        <div class="text-muted small">
                                            <i class="oi oi-info"></i> Discovering new files in your directories
                                        </div>
                                    }
                                }
                                
                                @if (isActive && !string.IsNullOrEmpty(phase.CurrentItem))
                                {
                                    <div class="text-muted small">
                                        <i class="oi oi-file"></i> @phase.CurrentItem
                                    </div>
                                }
                            </div>
                        }
                        
                        <div class="mt-3 text-muted">
                            <small>
                                Started: @phasedProgress.StartTime.ToLocalTime().ToString("g")
                                @if (phasedProgress.EndTime.HasValue)
                                {
                                    <span> | Completed: @phasedProgress.EndTime.Value.ToLocalTime().ToString("g")</span>
                                }
                            </small>
                        </div>
                    </div>
                </div>
            }
            
            <!-- Old-style scan progress (fallback) -->
            @if (ScanStatusService.IsScanning && ScanStatusService.CurrentProgress != null && ScanStatusService.CurrentPhasedProgress == null)
            {
                var progress = ScanStatusService.CurrentProgress;
                <div class="card mb-4 border-primary">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            Scan Progress
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <div class="d-flex justify-content-between mb-2">
                                <span class="fw-bold">Processing photos...</span>
                                <span>
                                    <strong class="text-primary">@progress.ProcessedFiles</strong> / @progress.TotalFiles files
                                </span>
                            </div>
                            <div class="progress mb-3" style="height: 30px;">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                     style="width: @(progress.PercentComplete)%" 
                                     role="progressbar">
                                    <span class="fs-6 fw-bold">@(progress.PercentComplete.ToString("F1"))%</span>
                                </div>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(progress.CurrentFile))
                            {
                                <div class="alert alert-light border">
                                    <div class="d-flex align-items-center">
                                        <div class="spinner-grow spinner-grow-sm text-primary me-2" role="status"></div>
                                        <div class="text-truncate">
                                            <small class="text-muted">Directory: @Path.GetFileName(progress.CurrentDirectory)</small><br>
                                            <strong>@Path.GetFileName(progress.CurrentFile)</strong>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            @if (ScanStatusService.LastScanResult != null)
            {
                var result = ScanStatusService.LastScanResult;
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <span class="oi oi-check me-2" aria-hidden="true"></span>
                            Last Scan Results
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-@(result.Success ? "success" : "danger")" role="alert">
                            <h6 class="alert-heading">
                                <span class="oi oi-@(result.Success ? "check" : "x")" aria-hidden="true"></span>
                                @(result.Success ? "Scan Completed Successfully" : "Scan Failed")
                            </h6>
                            <hr>
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>@result.TotalFilesProcessed</strong><br>
                                    <small>Files Processed</small>
                                </div>
                                <div class="col-md-3">
                                    <strong>@result.NewFilesAdded</strong><br>
                                    <small>New Photos</small>
                                </div>
                                <div class="col-md-3">
                                    <strong>@result.ErrorCount</strong><br>
                                    <small>Errors</small>
                                </div>
                                <div class="col-md-3">
                                    <strong>@result.Duration.TotalMinutes.ToString("F1") min</strong><br>
                                    <small>Duration</small>
                                </div>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(result.ErrorMessage))
                            {
                                <hr>
                                <p class="mb-0 text-danger"><strong>Error:</strong> @result.ErrorMessage</p>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Action Buttons -->
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-outline-secondary" @onclick="GoBack">
                            <span class="oi oi-arrow-left" aria-hidden="true"></span> Back to Home
                        </button>
                        <div>
                            <button class="btn btn-outline-warning me-2" @onclick="RescanMetadata" disabled="@(PhasedScanService.IsScanning || isRescanningMetadata)">
                                @if (isRescanningMetadata || PhasedScanService.IsScanning)
                                {
                                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                    <span>Scanning...</span>
                                }
                                else
                                {
                                    <span class="oi oi-loop-circular" aria-hidden="true"></span>
                                    <span>Run Full Scan</span>
                                }
                            </button>
                            <button class="btn btn-outline-primary" @onclick="RefreshStats">
                                <span class="oi oi-reload" aria-hidden="true"></span> Refresh
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <!-- Scan Phases Information -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-list" aria-hidden="true"></span> Scan Phases</h5>
                </div>
                <div class="card-body">
                    <h6>Phase 1: Discovery</h6>
                    <p class="small">Finds new photo files and gathers basic information.</p>
                    
                    <h6>Phase 2: Image Details</h6>
                    <p class="small">Reading photo information like dates, locations, camera settings, and image properties.</p>
                    
                    <h6>Phase 3: Duplicate Detection</h6>
                    <p class="small">Calculates unique fingerprints to identify duplicate photos.</p>
                    
                    <h6>Phase 4: AI Analysis</h6>
                    <p class="small text-muted">Coming soon - AI categorization and tagging.</p>
                </div>
            </div>

            <!-- Database Statistics -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-graph" aria-hidden="true"></span> Photo Collection Overview</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <strong>@totalImagesInDb</strong><br>
                            <small class="text-muted">📷 Photos Found</small>
                        </div>
                        <div class="col-6">
                            <strong>@(ScanStatusService.LastScanTime?.ToString("g") ?? "Never")</strong><br>
                            <small class="text-muted">🕒 Last Updated</small>
                        </div>
                    </div>
                    <hr>
                    <div class="row text-center">
                        <div class="col-6">
                            <strong>@imagesWithHashes</strong><br>
                            <small class="text-muted">🔍 Ready for Duplicate Detection</small>
                        </div>
                        <div class="col-6">
                            <strong>@imagesWithMetadata</strong><br>
                            <small class="text-muted">📋 With Photo Details</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<tbl_scan_directory>? scanDirectories;
    private int totalImagesInDb = 0;
    private int imagesWithHashes = 0;
    private int imagesWithMetadata = 0;
    private bool isRescanningMetadata = false;
    
    // UI update throttling
    private DateTime _lastUIUpdate = DateTime.UtcNow;
    private readonly TimeSpan _uiUpdateInterval = TimeSpan.FromSeconds(1); // Update UI at most once per second
    private bool _pendingUIUpdate = false;

    protected override async Task OnInitializedAsync()
    {
        ScanStatusService.StatusChanged += OnScanStatusChanged;
        PhasedScanService.ProgressChanged += OnPhasedScanProgressChanged;
        PhasedScanService.PhaseCompleted += OnPhaseCompleted;
        await LoadData();
    }

    private async Task LoadData()
    {
        await LoadScanDirectories();
        await LoadDatabaseStats();
    }

    private async Task LoadScanDirectories()
    {
        try
        {
            scanDirectories = await DbContext.tbl_scan_directory
                .OrderBy(d => d.DirectoryPath)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading scan directories");
            scanDirectories = new List<tbl_scan_directory>();
        }
    }

    private async Task LoadDatabaseStats()
    {
        try
        {
            totalImagesInDb = await DbContext.tbl_images.CountAsync();
            imagesWithHashes = await DbContext.tbl_images
                .Where(img => img.FileHash != null && img.FileHash != "")
                .CountAsync();
            imagesWithMetadata = await DbContext.tbl_image_metadata.CountAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading database statistics");
        }
    }


    private async Task RefreshStats()
    {
        await LoadDatabaseStats();
    }

    private async Task RescanMetadata()
    {
        if (PhasedScanService.IsScanning || isRescanningMetadata)
        {
            return; // Already scanning
        }

        // Show confirmation dialog
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "This will run a complete phased scan: Phase 1 (File Discovery), Phase 2 (Metadata Extraction), and Phase 3 (Duplicate Detection). This may take a while depending on your photo collection size. Continue?");
        
        if (!confirmed)
        {
            return;
        }

        isRescanningMetadata = true;
        StateHasChanged();
        
        Logger.LogInformation("Starting phased scan from UI");

        // Start the phased scan
        try
        {
            await PhasedScanService.StartPhasedScanAsync();
            Logger.LogInformation("Phased scan started successfully");
            
            // The UI will be updated through the existing PhasedScanProgress event handlers
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting phased scan");
            isRescanningMetadata = false;
            StateHasChanged();
        }
    }

    private void OnScanStatusChanged(object? sender, EventArgs e)
    {
        InvokeAsync(async () =>
        {
            await LoadDatabaseStats();
            StateHasChanged();
        });
    }

    private void OnPhasedScanProgressChanged(object? sender, PhasedScanProgress e)
    {
        // If scan is complete, update immediately
        if (!e.IsRunning)
        {
            InvokeAsync(() =>
            {
                isRescanningMetadata = false;
                StateHasChanged();
            });
            return;
        }
        
        // Otherwise, throttle updates
        var now = DateTime.UtcNow;
        if (now - _lastUIUpdate >= _uiUpdateInterval)
        {
            _lastUIUpdate = now;
            InvokeAsync(() => StateHasChanged());
        }
        else
        {
            // Schedule an update if we don't have one pending
            if (!_pendingUIUpdate)
            {
                _pendingUIUpdate = true;
                var delay = _uiUpdateInterval - (now - _lastUIUpdate);
                Task.Delay(delay).ContinueWith(_ =>
                {
                    _pendingUIUpdate = false;
                    _lastUIUpdate = DateTime.UtcNow;
                    InvokeAsync(() => StateHasChanged());
                });
            }
        }
    }

    private void OnPhaseCompleted(object? sender, ScanPhase phase)
    {
        InvokeAsync(() =>
        {
            Logger.LogInformation($"Phase {phase} completed");
            StateHasChanged();
        });
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private string GetPhaseDisplayName(ScanPhase phase)
    {
        return phase switch
        {
            ScanPhase.Phase1_Discovery => "Phase 1: File Discovery",
            ScanPhase.Phase2_Metadata => "Phase 2: Getting Image Details",
            ScanPhase.Phase3_Hashing => "Phase 3: Duplicate Detection",
            ScanPhase.Phase4_Analysis => "Phase 4: AI Analysis",
            _ => phase.ToString()
        };
    }

    public void Dispose()
    {
        ScanStatusService.StatusChanged -= OnScanStatusChanged;
        PhasedScanService.ProgressChanged -= OnPhasedScanProgressChanged;
        PhasedScanService.PhaseCompleted -= OnPhaseCompleted;
    }
}