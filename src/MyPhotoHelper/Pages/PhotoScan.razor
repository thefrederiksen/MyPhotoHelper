@page "/photo-scan"
@using MyPhotoHelper.Data
@using MyPhotoHelper.Models
@using MyPhotoHelper.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Hosting
@implements IDisposable
@inject MyPhotoHelperDbContext DbContext
@inject MyPhotoHelper.Services.IScanStatusService ScanStatusService
@inject IServiceProvider ServiceProvider
@inject NavigationManager Navigation
@inject ILogger<PhotoScan> Logger

<PageTitle>Photo Scanner - MyPhotoHelper</PageTitle>

<div class="container-fluid">
    <h1 class="display-4">Photo Scanner</h1>
    <p class="lead">Monitor and control photo scanning operations</p>
    
    <div class="row">
        <div class="col-md-8">
            <!-- Scanner Status -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <span class="oi oi-magnifying-glass" aria-hidden="true"></span> 
                        Scanner Status
                    </h5>
                </div>
                <div class="card-body">
                    @if (scanDirectories == null || !scanDirectories.Any())
                    {
                        <div class="alert alert-warning mb-3">
                            <span class="oi oi-warning" aria-hidden="true"></span>
                            <strong>No scan directories configured!</strong>
                            <br />
                            Please complete the <a href="/startup-wizard" class="alert-link">setup wizard</a> to add directories to scan.
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label class="form-label">Configured Directories</label>
                            <div class="list-group">
                                @foreach (var dir in scanDirectories)
                                {
                                    <div class="list-group-item">
                                        <span class="text-break">@dir.DirectoryPath</span>
                                        @if (Directory.Exists(dir.DirectoryPath))
                                        {
                                            <span class="badge bg-success float-end">Exists</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger float-end">Not Found</span>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                        
                        @if (ScanStatusService.IsScanning)
                        {
                            <div class="alert alert-info">
                                <div class="d-flex align-items-center">
                                    <div class="spinner-border text-primary me-3" role="status">
                                        <span class="visually-hidden">Scanning...</span>
                                    </div>
                                    <div>
                                        <h6 class="mb-0">Background scan in progress...</h6>
                                        <small>The scanner is running in the background. You can navigate away from this page.</small>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary btn-lg" @onclick="StartScan" 
                                disabled="@(ScanStatusService.IsScanning || scanDirectories == null || !scanDirectories.Any())">
                            @if (ScanStatusService.IsScanning)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <text>Scanning in Progress...</text>
                            }
                            else
                            {
                                <span class="oi oi-media-play me-2" aria-hidden="true"></span>
                                <text>Start Manual Scan</text>
                            }
                        </button>
                    </div>
                </div>
            </div>

            <!-- Scan Progress -->
            @if (ScanStatusService.IsScanning && ScanStatusService.CurrentProgress != null)
            {
                var progress = ScanStatusService.CurrentProgress;
                <div class="card mb-4 border-primary">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            Scan Progress
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <div class="d-flex justify-content-between mb-2">
                                <span class="fw-bold">Processing photos...</span>
                                <span>
                                    <strong class="text-primary">@progress.ProcessedFiles</strong> / @progress.TotalFiles files
                                </span>
                            </div>
                            <div class="progress mb-3" style="height: 30px;">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                     style="width: @(progress.PercentComplete)%" 
                                     role="progressbar">
                                    <span class="fs-6 fw-bold">@(progress.PercentComplete.ToString("F1"))%</span>
                                </div>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(progress.CurrentFile))
                            {
                                <div class="alert alert-light border">
                                    <div class="d-flex align-items-center">
                                        <div class="spinner-grow spinner-grow-sm text-primary me-2" role="status"></div>
                                        <div class="text-truncate">
                                            <small class="text-muted">Directory: @Path.GetFileName(progress.CurrentDirectory)</small><br>
                                            <strong>@Path.GetFileName(progress.CurrentFile)</strong>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            @if (ScanStatusService.LastScanResult != null)
            {
                var result = ScanStatusService.LastScanResult;
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <span class="oi oi-check me-2" aria-hidden="true"></span>
                            Last Scan Results
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-@(result.Success ? "success" : "danger")" role="alert">
                            <h6 class="alert-heading">
                                <span class="oi oi-@(result.Success ? "check" : "x")" aria-hidden="true"></span>
                                @(result.Success ? "Scan Completed Successfully" : "Scan Failed")
                            </h6>
                            <hr>
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>@result.TotalFilesProcessed</strong><br>
                                    <small>Files Processed</small>
                                </div>
                                <div class="col-md-3">
                                    <strong>@result.NewFilesAdded</strong><br>
                                    <small>New Photos</small>
                                </div>
                                <div class="col-md-3">
                                    <strong>@result.ErrorCount</strong><br>
                                    <small>Errors</small>
                                </div>
                                <div class="col-md-3">
                                    <strong>@result.Duration.TotalMinutes.ToString("F1") min</strong><br>
                                    <small>Duration</small>
                                </div>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(result.ErrorMessage))
                            {
                                <hr>
                                <p class="mb-0 text-danger"><strong>Error:</strong> @result.ErrorMessage</p>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Action Buttons -->
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-outline-secondary" @onclick="GoBack">
                            <span class="oi oi-arrow-left" aria-hidden="true"></span> Back to Home
                        </button>
                        <button class="btn btn-outline-primary" @onclick="RefreshStats">
                            <span class="oi oi-reload" aria-hidden="true"></span> Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <!-- Scan Information -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-info" aria-hidden="true"></span> Scan Information</h5>
                </div>
                <div class="card-body">
                    <h6>Background Scanning:</h6>
                    <p class="small">
                        Photos are automatically scanned in the background when the application starts 
                        and every hour thereafter. You can also trigger a manual scan using the button above.
                    </p>
                    
                    <h6>What the Scanner Does:</h6>
                    <ul class="small">
                        <li>Discovers new photo files</li>
                        <li>Reads image metadata</li>
                        <li>Identifies photo dates and locations</li>
                        <li>Builds your photo timeline</li>
                        <li>Updates the memories feature</li>
                    </ul>
                </div>
            </div>

            <!-- Database Statistics -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-graph" aria-hidden="true"></span> Database Stats</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <strong>@totalImagesInDb</strong><br>
                            <small class="text-muted">Total Photos</small>
                        </div>
                        <div class="col-6">
                            <strong>@(ScanStatusService.LastScanTime?.ToString("g") ?? "Never")</strong><br>
                            <small class="text-muted">Last Scan</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<tbl_scan_directory>? scanDirectories;
    private int totalImagesInDb = 0;

    protected override async Task OnInitializedAsync()
    {
        ScanStatusService.StatusChanged += OnScanStatusChanged;
        await LoadData();
    }

    private async Task LoadData()
    {
        await LoadScanDirectories();
        await LoadDatabaseStats();
    }

    private async Task LoadScanDirectories()
    {
        try
        {
            scanDirectories = await DbContext.tbl_scan_directory
                .OrderBy(d => d.DirectoryPath)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading scan directories");
            scanDirectories = new List<tbl_scan_directory>();
        }
    }

    private async Task LoadDatabaseStats()
    {
        try
        {
            totalImagesInDb = await DbContext.tbl_images.CountAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading database statistics");
        }
    }

    private void StartScan()
    {
        try
        {
            using var scope = ServiceProvider.CreateScope();
            var hostedServices = scope.ServiceProvider.GetServices<IHostedService>();
            var backgroundService = hostedServices.OfType<BackgroundTaskService>().FirstOrDefault();
            
            if (backgroundService != null)
            {
                // Trigger scan in background
                _ = Task.Run(async () => await backgroundService.TriggerScanAsync());
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting scan");
        }
    }

    private async Task RefreshStats()
    {
        await LoadDatabaseStats();
    }

    private void OnScanStatusChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        ScanStatusService.StatusChanged -= OnScanStatusChanged;
    }
}