@page "/photo-scan"
@using MyPhotoHelper.Data
@using MyPhotoHelper.Models
@using MyPhotoHelper.Services
@using Microsoft.EntityFrameworkCore
@implements IDisposable
@inject MyPhotoHelperDbContext DbContext
@inject IPathService PathService
@inject NavigationManager Navigation
@inject ILogger<PhotoScan> Logger

<PageTitle>Photo Scanner - FaceVault</PageTitle>

<div class="container-fluid">
    <h1 class="display-4">Photo Scanner</h1>
    <p class="lead">Hash calculation and duplicate detection</p>
    
    <div class="alert alert-info" role="alert">
        <h4 class="alert-heading">üìù Current Functionality</h4>
        <p>This scanner focuses on:</p>
        <ul class="mb-0">
            <li>File hash calculation for duplicate detection</li>
            <li>Basic file metadata collection</li>
            <li>Database storage using new EF models</li>
        </ul>
    </div>

    <div class="row">
        <div class="col-md-8">
            <!-- Scanner Configuration -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-magnifying-glass" aria-hidden="true"></span> Scan Configuration</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Directory to Scan</label>
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="scanDirectory" placeholder="Enter directory path...">
                            <button class="btn btn-outline-secondary" type="button" @onclick="BrowseForDirectory">
                                <span class="oi oi-folder" aria-hidden="true"></span> Browse
                            </button>
                        </div>
                    </div>
                    
                </div>
            </div>

            <!-- Scan Progress -->
            @if (isScanning || scanCompleted)
            {
                <div class="card mb-4 @(isScanning ? "border-primary" : "")">
                    <div class="card-header d-flex justify-content-between align-items-center @(isScanning ? "bg-primary text-white" : "")">
                        <h5 class="mb-0">
                            @if (isScanning)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            else
                            {
                                <span class="oi oi-check me-2" aria-hidden="true"></span>
                            }
                            Scan Progress
                        </h5>
                        @if (isScanning)
                        {
                            <button class="btn btn-outline-light btn-sm" @onclick="CancelScan">
                                <span class="oi oi-media-stop" aria-hidden="true"></span> Cancel
                            </button>
                        }
                    </div>
                    <div class="card-body">
                        @if (isScanning)
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between mb-2">
                                    <span class="fw-bold">@currentStatus</span>
                                    @if (totalFiles > 0)
                                    {
                                        <span>
                                            <strong class="text-primary">@processedFiles</strong> / @totalFiles files
                                            @if (scanSpeed > 0)
                                            {
                                                <span class="text-muted ms-2">(@(scanSpeed.ToString("F1")) files/sec)</span>
                                            }
                                        </span>
                                    }
                                </div>
                                <div class="progress mb-3" style="height: 30px;">
                                    @if (totalFiles > 0)
                                    {
                                        var percent = (double)processedFiles / totalFiles * 100;
                                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                             style="width: @(percent)%" 
                                             role="progressbar">
                                            <span class="fs-6 fw-bold">@(percent.ToString("F1"))%</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-info" 
                                             style="width: 100%" role="progressbar">
                                            <span class="fs-6">Discovering files...</span>
                                        </div>
                                    }
                                </div>
                                
                                <!-- Live Statistics -->
                                <div class="row text-center mb-3">
                                    <div class="col-4">
                                        <div class="border rounded p-2 @(newImagesAdded > 0 ? "border-success bg-success bg-opacity-10" : "")">
                                            <h5 class="mb-0 @(newImagesAdded > 0 ? "text-success" : "")">@newImagesAdded</h5>
                                            <small class="text-muted">New Images</small>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="border rounded p-2 @(duplicatesFound > 0 ? "border-warning bg-warning bg-opacity-10" : "")">
                                            <h5 class="mb-0 @(duplicatesFound > 0 ? "text-warning" : "")">@duplicatesFound</h5>
                                            <small class="text-muted">Duplicates</small>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="border rounded p-2 @(errorsCount > 0 ? "border-danger bg-danger bg-opacity-10" : "")">
                                            <h5 class="mb-0 @(errorsCount > 0 ? "text-danger" : "")">@errorsCount</h5>
                                            <small class="text-muted">Errors</small>
                                        </div>
                                    </div>
                                </div>
                                
                                @if (!string.IsNullOrEmpty(currentFile))
                                {
                                    <div class="alert alert-light border">
                                        <div class="d-flex align-items-center">
                                            <div class="spinner-grow spinner-grow-sm text-primary me-2" role="status"></div>
                                            <div class="text-truncate">
                                                <small class="text-muted">Processing:</small><br>
                                                <strong>@Path.GetFileName(currentFile)</strong>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                        @if (scanCompleted && !isScanning)
                        {
                            <div class="alert alert-@(scanSuccessful ? "success" : "danger")" role="alert">
                                <h6 class="alert-heading">
                                    <span class="oi oi-@(scanSuccessful ? "check" : "x")" aria-hidden="true"></span>
                                    Scan @(scanSuccessful ? "Completed Successfully" : "Failed")
                                </h6>
                                <hr>
                                <div class="row">
                                    <div class="col-md-3">
                                        <strong>@totalFiles</strong><br>
                                        <small>Files Found</small>
                                    </div>
                                    <div class="col-md-3">
                                        <strong>@newImagesAdded</strong><br>
                                        <small>New Images</small>
                                    </div>
                                    <div class="col-md-3">
                                        <strong>@duplicatesFound</strong><br>
                                        <small>Duplicates</small>
                                    </div>
                                    <div class="col-md-3">
                                        <strong>@errorsCount</strong><br>
                                        <small>Errors</small>
                                    </div>
                                </div>
                                
                                @if (!string.IsNullOrEmpty(scanError))
                                {
                                    <hr>
                                    <p class="mb-0 text-danger"><strong>Error:</strong> @scanError</p>
                                }
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Action Buttons -->
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-outline-secondary" @onclick="GoBack">
                            <span class="oi oi-arrow-left" aria-hidden="true"></span> Back to Home
                        </button>
                        <button class="btn btn-primary" @onclick="StartScan" 
                                disabled="@(isScanning || string.IsNullOrWhiteSpace(scanDirectory))">
                            @if (isScanning)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Scan
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <!-- Scan Information -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-info" aria-hidden="true"></span> Scan Information</h5>
                </div>
                <div class="card-body">
                    <h6>Supported File Types:</h6>
                    <div class="d-flex flex-wrap mb-3">
                        @foreach (var ext in supportedExtensions)
                        {
                            <span class="badge bg-secondary me-1 mb-1">@ext.ToUpper()</span>
                        }
                    </div>

                    <h6>What This Scanner Does:</h6>
                    <ul class="small">
                        <li>Calculates SHA-256 file hashes</li>
                        <li>Detects duplicate images</li>
                        <li>Stores basic file metadata</li>
                        <li>Updates database with new findings</li>
                    </ul>
                </div>
            </div>

            <!-- Database Statistics -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-graph" aria-hidden="true"></span> Database Stats</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <strong>@totalImagesInDb</strong><br>
                            <small class="text-muted">Total Images</small>
                        </div>
                        <div class="col-6">
                            <strong>@imagesWithHashes</strong><br>
                            <small class="text-muted">With Hashes</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string scanDirectory = "";
    private readonly string[] supportedExtensions = { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp", ".tiff", ".tif" };
    
    private bool isScanning = false;
    private bool scanCompleted = false;
    private bool scanSuccessful = false;
    private string currentStatus = "";
    private string currentFile = "";
    private int processedFiles = 0;
    private int totalFiles = 0;
    private int newImagesAdded = 0;
    private int duplicatesFound = 0;
    private int errorsCount = 0;
    private string scanError = "";
    
    private int totalImagesInDb = 0;
    private int imagesWithHashes = 0;
    
    private CancellationTokenSource? cancellationTokenSource;
    private DateTime scanStartTime;
    private double scanSpeed = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDatabaseStats();
        
        // Set default scan directory to user's Pictures folder
        try
        {
            var picturesPath = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
            if (Directory.Exists(picturesPath))
            {
                scanDirectory = picturesPath;
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Could not determine Pictures folder path");
        }
    }

    private async Task LoadDatabaseStats()
    {
        try
        {
            totalImagesInDb = await DbContext.tbl_images.CountAsync();
            imagesWithHashes = await DbContext.tbl_images.CountAsync(i => !string.IsNullOrEmpty(i.FileHash));
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading database statistics");
        }
    }

    private void BrowseForDirectory()
    {
        // For now, just show a message - would need JavaScript integration for folder picker
        scanError = "Use the text box to enter a directory path manually. Example: C:\\Users\\YourName\\Pictures";
        StateHasChanged();
    }

    private async Task StartScan()
    {
        if (string.IsNullOrWhiteSpace(scanDirectory) || !Directory.Exists(scanDirectory))
        {
            scanError = "Please enter a valid directory path.";
            StateHasChanged();
            return;
        }

        try
        {
            // Immediately update UI to show scanning has started
            isScanning = true;
            scanCompleted = false;
            scanSuccessful = false;
            scanError = "";
            processedFiles = 0;
            totalFiles = 0;
            newImagesAdded = 0;
            duplicatesFound = 0;
            errorsCount = 0;
            currentStatus = "Starting scan...";
            currentFile = "";
            scanStartTime = DateTime.Now;
            scanSpeed = 0;
            
            cancellationTokenSource = new CancellationTokenSource();
            
            // Force immediate UI update
            StateHasChanged();
            await Task.Delay(10); // Small delay to ensure UI updates
            
            // Run the actual scanning in a background task
            await Task.Run(async () =>
            {
                try
                {
                    // Update status on UI thread
                    await InvokeAsync(() =>
                    {
                        currentStatus = "Discovering files...";
                        StateHasChanged();
                    });

                    // Get all image files (always include subdirectories)
                    var searchOption = SearchOption.AllDirectories;
                    var allFiles = new List<string>();
                    
                    foreach (var ext in supportedExtensions)
                    {
                        if (cancellationTokenSource.Token.IsCancellationRequested)
                            break;
                            
                        try
                        {
                            var files = Directory.GetFiles(scanDirectory, $"*{ext}", searchOption);
                            allFiles.AddRange(files);
                            
                            // Update UI as we find files
                            await InvokeAsync(() =>
                            {
                                currentStatus = $"Found {allFiles.Count} files...";
                                StateHasChanged();
                            });
                        }
                        catch (Exception ex)
                        {
                            Logger.LogWarning(ex, "Could not search for files with extension {Extension}", ext);
                            errorsCount++;
                        }
                    }

                    totalFiles = allFiles.Count;
                    
                    if (totalFiles == 0)
                    {
                        await InvokeAsync(() =>
                        {
                            currentStatus = "No image files found in the specified directory.";
                            scanCompleted = true;
                            scanSuccessful = true;
                            StateHasChanged();
                        });
                        return;
                    }

                    await InvokeAsync(() =>
                    {
                        currentStatus = $"Processing {totalFiles} files...";
                        StateHasChanged();
                    });

                    // Process each file
                    var lastUpdateTime = DateTime.Now;
                    
                    for (int i = 0; i < allFiles.Count; i++)
                    {
                        if (cancellationTokenSource.Token.IsCancellationRequested)
                        {
                            scanError = "Scan was cancelled by user.";
                            break;
                        }

                        var filePath = allFiles[i];
                        
                        try
                        {
                            // Update UI before processing each file
                            await InvokeAsync(() =>
                            {
                                currentFile = filePath;
                                currentStatus = $"Processing: {Path.GetFileName(filePath)}";
                                StateHasChanged();
                            });
                            
                            var wasNewImage = await ProcessImageFile(filePath);
                            
                            processedFiles++;
                            
                            // Calculate scan speed
                            var elapsed = (DateTime.Now - scanStartTime).TotalSeconds;
                            if (elapsed > 0)
                            {
                                scanSpeed = processedFiles / elapsed;
                            }
                            
                            // Update UI immediately when a new image is added
                            if (wasNewImage || (DateTime.Now - lastUpdateTime).TotalMilliseconds > 100)
                            {
                                lastUpdateTime = DateTime.Now;
                                await InvokeAsync(() =>
                                {
                                    StateHasChanged();
                                });
                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.LogError(ex, "Error processing file: {FilePath}", filePath);
                            errorsCount++;
                        }
                    }

                    scanSuccessful = string.IsNullOrEmpty(scanError);
                    
                    await InvokeAsync(async () =>
                    {
                        scanCompleted = true;
                        currentStatus = scanSuccessful ? "Scan completed successfully!" : "Scan completed with errors.";
                        currentFile = "";
                        await LoadDatabaseStats(); // Refresh stats
                        StateHasChanged();
                    });
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Scan failed: {Message}", ex.Message);
                    
                    await InvokeAsync(() =>
                    {
                        scanError = ex.Message;
                        scanSuccessful = false;
                        scanCompleted = true;
                        currentStatus = "Scan failed!";
                        StateHasChanged();
                    });
                }
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to start scan: {Message}", ex.Message);
            scanError = ex.Message;
            scanSuccessful = false;
            scanCompleted = true;
            currentStatus = "Failed to start scan!";
        }
        finally
        {
            isScanning = false;
            StateHasChanged();
        }
    }

    private async Task<bool> ProcessImageFile(string filePath)
    {
        try
        {
            var fileInfo = new FileInfo(filePath);
            if (!fileInfo.Exists)
                return false;

            // Calculate relative path from scan directory
            var relativePath = Path.GetRelativePath(scanDirectory, filePath);
            
            // Check if image already exists in database
            var existingImage = await DbContext.tbl_images
                .FirstOrDefaultAsync(i => i.RelativePath == relativePath);

            if (existingImage != null)
            {
                // File already exists, skip
                return false;
            }

            // Calculate file hash
            var fileHash = await CalculateFileHash(filePath);
            
            // Check for duplicates by hash
            var duplicateByHash = await DbContext.tbl_images
                .FirstOrDefaultAsync(i => i.FileHash == fileHash);

            if (duplicateByHash != null)
            {
                duplicatesFound++;
                Logger.LogDebug("Duplicate found: {FilePath} matches {ExistingPath}", 
                    filePath, duplicateByHash.RelativePath);
                return false;
            }

            // Create new image record
            var newImage = new tbl_images
            {
                RelativePath = relativePath,
                FileName = fileInfo.Name,
                FileHash = fileHash,
                FileSizeBytes = (int)Math.Min(fileInfo.Length, int.MaxValue), // Cap at int.MaxValue
                DateCreated = DateTime.UtcNow,
                DateModified = fileInfo.LastWriteTimeUtc,
                FileExists = 1, // SQLite uses 1/0 for boolean
                IsDeleted = 0   // SQLite uses 1/0 for boolean
            };

            DbContext.tbl_images.Add(newImage);
            await DbContext.SaveChangesAsync();
            
            // Also create basic metadata record
            var metadata = new tbl_image_metadata
            {
                ImageId = newImage.ImageId,
                DateTaken = fileInfo.CreationTimeUtc // Placeholder - would need EXIF parsing for real date
            };
            
            DbContext.tbl_image_metadata.Add(metadata);
            await DbContext.SaveChangesAsync();

            newImagesAdded++;
            return true; // New image was added
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing image file: {FilePath}", filePath);
            errorsCount++;
            throw;
        }
    }

    private async Task<string> CalculateFileHash(string filePath)
    {
        using var sha256 = System.Security.Cryptography.SHA256.Create();
        using var stream = File.OpenRead(filePath);
        var hashBytes = await Task.Run(() => sha256.ComputeHash(stream));
        return Convert.ToHexString(hashBytes);
    }

    private void CancelScan()
    {
        cancellationTokenSource?.Cancel();
        currentStatus = "Cancelling scan...";
        StateHasChanged();
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        // Cancel any ongoing operations IMMEDIATELY
        try
        {
            cancellationTokenSource?.Cancel();
            isScanning = false;
            
            // Try to update state one last time if possible
            try
            {
                StateHasChanged();
            }
            catch
            {
                // Ignore state update errors during disposal
            }
        }
        catch
        {
            // Ignore cancellation errors during disposal
        }
        finally
        {
            cancellationTokenSource?.Dispose();
        }
    }
}