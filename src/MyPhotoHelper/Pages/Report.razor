@page "/report"
@using MyPhotoHelper.Data
@using MyPhotoHelper.Models
@using MyPhotoHelper.Services
@using MyPhotoHelper.Components.Shared
@using Microsoft.EntityFrameworkCore
@inject MyPhotoHelperDbContext DbContext
@inject IPathService PathService
@inject NavigationManager Navigation
@inject ILogger<Report> Logger
@inject IImageDetailsService ImageDetailsService
@inject IScreenshotAnalysisService ScreenshotAnalysisService
@inject IFastImageCategorizationService FastImageCategorizationService

<PageTitle>Library Report - FaceVault</PageTitle>

<div class="container-fluid">
    <h1 class="display-4">Library Report</h1>
    <p class="lead">Comprehensive analysis of your photo library</p>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show mb-3" role="alert">
            <span class="oi oi-x" aria-hidden="true"></span> <strong>Error:</strong> @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border spinner-border-xl text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Loading report data...</span>
            </div>
            <h4>Generating Your Report</h4>
            <p class="text-muted">
                <span class="d-block">Loading image statistics...</span>
                <span class="d-block">Analyzing AI results...</span>
                <span class="d-block">Calculating duplicates...</span>
            </p>
        </div>
    }
    else
    {
        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-lg-2 col-md-4 mb-3">
                <div class="card text-center h-100">
                    <div class="card-body">
                        <h5 class="card-title">Total Images</h5>
                        <h2 class="text-primary">@totalImages.ToString("N0")</h2>
                        <small class="text-muted">In library</small>
                    </div>
                </div>
            </div>
            <div class="col-lg-2 col-md-4 mb-3">
                <div class="card text-center h-100">
                    <div class="card-body">
                        <h5 class="card-title">Screenshots</h5>
                        <h2 class="text-warning">@screenshotCount.ToString("N0")</h2>
                        <small class="text-muted">@screenshotPercentage% detected</small>
                    </div>
                </div>
            </div>
            <div class="col-lg-2 col-md-4 mb-3">
                <div class="card text-center h-100">
                    <div class="card-body">
                        <h5 class="card-title">AI Analyzed</h5>
                        <h2 class="text-success">@analyzedImages.ToString("N0")</h2>
                        <small class="text-muted">@percentAnalyzed% complete</small>
                    </div>
                </div>
            </div>
            <div class="col-lg-2 col-md-4 mb-3">
                <div class="card text-center h-100">
                    <div class="card-body">
                        <h5 class="card-title">Duplicates</h5>
                        <h2 class="text-danger">@duplicateCount.ToString("N0")</h2>
                        <small class="text-muted">Files found</small>
                    </div>
                </div>
            </div>
            <div class="col-lg-2 col-md-4 mb-3">
                <div class="card text-center h-100">
                    <div class="card-body">
                        <h5 class="card-title">Storage Used</h5>
                        <h2 class="text-info">@totalSizeStr</h2>
                        <small class="text-muted">Total size</small>
                    </div>
                </div>
            </div>
            <div class="col-lg-2 col-md-4 mb-3">
                <div class="card text-center h-100">
                    <div class="card-body">
                        <h5 class="card-title">Real Photos</h5>
                        <h2 class="text-success">@realPhotoCount.ToString("N0")</h2>
                        <small class="text-muted">@realPhotoPercentage% of library</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- AI Analysis Summary -->
        @if (categoryStats.Any())
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-eye" aria-hidden="true"></span> AI Analysis Categories</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        @foreach (var category in categoryStats.OrderByDescending(c => c.Count))
                        {
                            <div class="col-md-4 mb-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h6>@category.Category</h6>
                                    <span class="badge bg-primary">@category.Count</span>
                                </div>
                                <div class="progress mb-2">
                                    @{
                                        var percent = totalImages > 0 ? (double)category.Count / totalImages * 100 : 0;
                                    }
                                    <div class="progress-bar" role="progressbar" style="width: @percent%"></div>
                                </div>
                                <small class="text-muted">@percent.ToString("F1")% of total</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <!-- Image Classification Tracking -->
        <div class="card mb-4">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-0"><span class="oi oi-beaker" aria-hidden="true"></span> Classification Method Breakdown</h5>
                        <small class="text-muted">Track how images are classified by different methods</small>
                    </div>
                    <a href="/test-image-analysis-ai" class="btn btn-sm btn-outline-primary">
                        <span class="oi oi-external-link" aria-hidden="true"></span> Test Metadata Classifier
                    </a>
                </div>
            </div>
            <div class="card-body">
                <div class="row mb-4">
                    <!-- Phase 1: Initial Categorization (Fast) -->
                    <div class="col-md-3 mb-3">
                        <div class="card h-100 border-info">
                            <div class="card-header bg-info bg-opacity-10 text-center">
                                <h6 class="mb-0">üìÅ Phase 1: Fast Analysis</h6>
                                <small class="text-muted">Filename & Resolution</small>
                            </div>
                            <div class="card-body text-center">
                                <h4 class="text-info">@(categorizationStats?.FilenameScreenshots + categorizationStats?.ResolutionScreenshots ?? 0)</h4>
                                <small class="text-muted">Screenshots Detected</small>
                                <hr>
                                <div class="small">
                                    <div>üìù Filename: @(categorizationStats?.FilenameScreenshots ?? 0)</div>
                                    <div>üìê Resolution: @(categorizationStats?.ResolutionScreenshots ?? 0)</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Phase 2: Metadata Analysis -->
                    <div class="col-md-3 mb-3">
                        <div class="card h-100 border-success">
                            <div class="card-header bg-success bg-opacity-10 text-center">
                                <h6 class="mb-0">üì∑ Phase 2: Camera Metadata</h6>
                                <small class="text-muted">EXIF Data Analysis</small>
                            </div>
                            <div class="card-body text-center">
                                <h4 class="text-success">@(categorizationStats?.TotalPhotos ?? 0)</h4>
                                <small class="text-muted">Photos with Camera Data</small>
                                <hr>
                                <div class="small">
                                    <div>üì∏ Camera make/model</div>
                                    <div>‚öôÔ∏è Settings (f-stop, ISO, etc.)</div>
                                    <div>üìç GPS coordinates</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Phase 3: AI Vision Analysis -->
                    <div class="col-md-3 mb-3">
                        <div class="card h-100 border-primary">
                            <div class="card-header bg-primary bg-opacity-10 text-center">
                                <h6 class="mb-0">ü§ñ Phase 3: AI Vision</h6>
                                <small class="text-muted">Deep Learning Analysis</small>
                            </div>
                            <div class="card-body text-center">
                                <h4 class="text-primary">@analyzedImages</h4>
                                <small class="text-muted">AI Analyzed Images</small>
                                <hr>
                                <div class="small">
                                    <div>üîç Visual content analysis</div>
                                    <div>üìù Scene description</div>
                                    <div>üè∑Ô∏è Object detection</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Remaining Unclassified -->
                    <div class="col-md-3 mb-3">
                        <div class="card h-100 border-warning">
                            <div class="card-header bg-warning bg-opacity-10 text-center">
                                <h6 class="mb-0">‚ùì Unclassified</h6>
                                <small class="text-muted">Need More Analysis</small>
                            </div>
                            <div class="card-body text-center">
                                <h4 class="text-warning">@(categorizationStats?.UncategorizedImages ?? 0)</h4>
                                <small class="text-muted">Images Remaining</small>
                                <hr>
                                <div class="small">
                                    <div>üî¨ Awaiting metadata classification</div>
                                    <div>ü§ñ Or AI vision analysis</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Classification Progress Bar -->
                <div class="mb-4">
                    <h6>Overall Classification Progress</h6>
                    @{
                        var fastClassified = (categorizationStats?.FilenameScreenshots + categorizationStats?.ResolutionScreenshots ?? 0);
                        var metadataClassified = (categorizationStats?.TotalPhotos ?? 0);
                        var aiClassified = analyzedImages;
                        var totalClassified = fastClassified + metadataClassified + aiClassified;
                        var unclassified = totalImages - totalClassified;
                        
                        var fastPercent = totalImages > 0 ? (double)fastClassified / totalImages * 100 : 0;
                        var metadataPercent = totalImages > 0 ? (double)metadataClassified / totalImages * 100 : 0; 
                        var aiPercent = totalImages > 0 ? (double)aiClassified / totalImages * 100 : 0;
                        var unclassifiedPercent = totalImages > 0 ? (double)unclassified / totalImages * 100 : 0;
                    }
                    <div class="progress mb-2" style="height: 25px;">
                        <div class="progress-bar bg-info" role="progressbar" style="width: @fastPercent%" title="Fast Analysis: @fastClassified images (@fastPercent.ToString("F1")%)">
                            @if (fastPercent > 8) { <small>Fast: @fastClassified</small> }
                        </div>
                        <div class="progress-bar bg-success" role="progressbar" style="width: @metadataPercent%" title="Metadata Analysis: @metadataClassified images (@metadataPercent.ToString("F1")%)">
                            @if (metadataPercent > 8) { <small>Meta: @metadataClassified</small> }
                        </div>
                        <div class="progress-bar bg-primary" role="progressbar" style="width: @aiPercent%" title="AI Analysis: @aiClassified images (@aiPercent.ToString("F1")%)">
                            @if (aiPercent > 8) { <small>AI: @aiClassified</small> }
                        </div>
                        <div class="progress-bar bg-warning" role="progressbar" style="width: @unclassifiedPercent%" title="Unclassified: @unclassified images (@unclassifiedPercent.ToString("F1")%)">
                            @if (unclassifiedPercent > 8) { <small>Unknown: @unclassified</small> }
                        </div>
                    </div>
                    <div class="d-flex justify-content-between small text-muted">
                        <span>üìÅ Fast: @fastPercent.ToString("F1")%</span>
                        <span>üì∑ Metadata: @metadataPercent.ToString("F1")%</span>
                        <span>ü§ñ AI Vision: @aiPercent.ToString("F1")%</span>
                        <span>‚ùì Unknown: @unclassifiedPercent.ToString("F1")%</span>
                    </div>
                </div>

                <!-- Next Steps Recommendations -->
                @if (unclassified > 0)
                {
                    <div class="alert alert-info">
                        <h6><span class="oi oi-lightbulb" aria-hidden="true"></span> Next Steps for @unclassified Unclassified Images:</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <ol class="mb-0">
                                    <li><strong>Try Metadata Classification:</strong> Use the new rule-based classifier to analyze metadata patterns</li>
                                    <li><strong>Run AI Vision Analysis:</strong> For remaining images that need visual analysis</li>
                                </ol>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex gap-2">
                                    <a href="/test-image-analysis-ai" class="btn btn-sm btn-primary">
                                        <span class="oi oi-beaker" aria-hidden="true"></span> Test Metadata Classifier
                                    </a>
                                    <a href="/database-scan" class="btn btn-sm btn-outline-primary">
                                        <span class="oi oi-eye" aria-hidden="true"></span> AI Vision Analysis
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="alert alert-success">
                        <h6><span class="oi oi-check" aria-hidden="true"></span> All Images Classified!</h6>
                        <p class="mb-0">Great job! All @totalImages images have been analyzed and classified using various methods.</p>
                    </div>
                }
            </div>
        </div>

        <!-- Screenshot Analysis Summary -->
        @if (categorizationStats != null)
        {
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-0"><span class="oi oi-monitor" aria-hidden="true"></span> Screenshot Detection Summary</h5>
                        <small class="text-muted">Automated screenshot filtering results</small>
                    </div>
                    <a href="/screenshot-analysis" class="btn btn-sm btn-outline-primary">
                        <span class="oi oi-external-link" aria-hidden="true"></span> View Details
                    </a>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <div class="text-center">
                                <h4 class="text-warning">@categorizationStats.FilenameScreenshots.ToString("N0")</h4>
                                <h6 class="text-muted">By Filename</h6>
                                <small class="text-muted">Contains "screenshot", "capture", etc.</small>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="text-center">
                                <h4 class="text-info">@categorizationStats.ResolutionScreenshots.ToString("N0")</h4>
                                <h6 class="text-muted">By Resolution</h6>
                                <small class="text-muted">Common screen sizes (1920√ó1080, etc.)</small>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="text-center">
                                <h4 class="text-success">@categorizationStats.TotalScreenshots.ToString("N0")</h4>
                                <h6 class="text-muted">Total Screenshots</h6>
                                <small class="text-muted">@((categorizationStats.TotalImages > 0 ? categorizationStats.TotalScreenshots * 100.0 / categorizationStats.TotalImages : 0).ToString("F1"))% of library</small>
                            </div>
                        </div>
                    </div>
                    
                    @if (screenshotSamples.Any())
                    {
                        <hr>
                        <h6>Sample Screenshots Detected</h6>
                        <div class="row">
                            @foreach (var sample in screenshotSamples.Take(6))
                            {
                                <div class="col-md-2 mb-2">
                                    <div class="card">
                                        <img src="/api/images/thumbnail/@(Uri.EscapeDataString(sample.RelativePath))" 
                                             class="card-img-top" 
                                             alt="@sample.FileName"
                                             style="height: 100px; object-fit: cover;">
                                        <div class="card-body p-2">
                                            <small class="text-muted d-block text-truncate" title="@sample.FileName">
                                                @sample.FileName
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="text-center mt-2">
                            <a href="/gallery?filter=screenshots" class="btn btn-sm btn-outline-warning">
                                <span class="oi oi-layers" aria-hidden="true"></span> View All Screenshots
                            </a>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Image Categorization Summary -->
        @if (categorizationStats != null)
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <span class="oi oi-tag" aria-hidden="true"></span> Image Categorization Summary
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <div class="text-center">
                                <h4 class="text-primary">@categorizationStats.TotalPhotos.ToString("N0")</h4>
                                <h6 class="text-muted">Confirmed Photos</h6>
                                <small class="text-muted">Images with camera metadata</small>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="text-center">
                                <h4 class="text-warning">@categorizationStats.TotalScreenshots.ToString("N0")</h4>
                                <h6 class="text-muted">Screenshots</h6>
                                <small class="text-muted">Detected by patterns</small>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="text-center">
                                <h4 class="text-info">@categorizationStats.CategorizedImages.ToString("N0")</h4>
                                <h6 class="text-muted">Total Categorized</h6>
                                <small class="text-muted">@((categorizationStats.TotalImages > 0 ? categorizationStats.CategorizedImages * 100.0 / categorizationStats.TotalImages : 0).ToString("F1"))% of library</small>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="text-center">
                                <h4 class="text-secondary">@categorizationStats.UncategorizedImages.ToString("N0")</h4>
                                <h6 class="text-muted">Uncategorized</h6>
                                <small class="text-muted">Need AI analysis</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- AI Analysis Samples -->
        @if (aiSamples.Any())
        {
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-0"><span class="oi oi-image" aria-hidden="true"></span> AI Analysis Samples</h5>
                        <small class="text-muted">Recent AI analysis results to verify functionality</small>
                    </div>
                    <div>
                        <small class="text-muted">
                            Page @(currentAiPage + 1) of @((allAiSamples.Count + aiSamplesPerPage - 1) / aiSamplesPerPage)
                        </small>
                    </div>
                </div>
                <div class="card-body">
                    @foreach (var sample in aiSamples)
                    {
                        <div class="card mb-3 border-primary">
                            <div class="card-header bg-light">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0" title="@sample.FileName">
                                        <span class="oi oi-file" aria-hidden="true"></span> @sample.FileName
                                    </h6>
                                    <span class="badge bg-info">@sample.Category</span>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-12 mb-2">
                                        <small class="text-muted">
                                            <strong>Model:</strong> @sample.AIModel | 
                                            <strong>Analyzed:</strong> @sample.AnalyzedAt?.ToString("g")
                                        </small>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        @if (!string.IsNullOrEmpty(sample.Description))
                                        {
                                            <div class="mb-3">
                                                <strong>AI Description:</strong>
                                                <div class="border rounded p-2 bg-light">
                                                    <pre class="mb-0" style="white-space: pre-wrap; word-wrap: break-word;">@sample.Description</pre>
                                                </div>
                                            </div>
                                        }
                                        
                                        @if (!string.IsNullOrEmpty(sample.Keywords))
                                        {
                                            <div class="mb-3">
                                                <strong>AI Analysis Details:</strong>
                                                <div class="border rounded p-2 bg-light mt-1">
                                                    @{
                                                        var keywords = sample.Keywords.Split(new[] { ", " }, StringSplitOptions.RemoveEmptyEntries);
                                                        var isScreenshot = keywords.Any(k => k.Equals("screenshot", StringComparison.OrdinalIgnoreCase));
                                                        var hasText = keywords.Any(k => k.Equals("has_text", StringComparison.OrdinalIgnoreCase));
                                                        var isDocument = keywords.Any(k => k.Equals("document", StringComparison.OrdinalIgnoreCase));
                                                        var peopleCount = keywords.FirstOrDefault(k => k.StartsWith("people:"))?.Split(':').LastOrDefault();
                                                        var objects = keywords.Where(k => k.StartsWith("object:")).Select(k => k.Split(':').LastOrDefault()).ToList();
                                                        var colors = keywords.Where(k => k.StartsWith("color:")).Select(k => k.Split(':').LastOrDefault()).ToList();
                                                    }
                                                    
                                                    <div class="row">
                                                        <div class="col-md-6">
                                                            <div class="mb-2">
                                                                <strong>Type Detection:</strong><br>
                                                                @if (isScreenshot)
                                                                {
                                                                    <span class="badge bg-warning me-1">üì± Screenshot</span>
                                                                }
                                                                @if (isDocument)
                                                                {
                                                                    <span class="badge bg-info me-1">üìÑ Document</span>
                                                                }
                                                                @if (hasText)
                                                                {
                                                                    <span class="badge bg-secondary me-1">üî§ Contains Text</span>
                                                                }
                                                                @if (!string.IsNullOrEmpty(peopleCount) && peopleCount != "0")
                                                                {
                                                                    <span class="badge bg-success me-1">üë• People: @peopleCount</span>
                                                                }
                                                            </div>
                                                            
                                                            @if (objects.Any())
                                                            {
                                                                <div class="mb-2">
                                                                    <strong>Objects Detected:</strong><br>
                                                                    @foreach (var obj in objects.Take(5))
                                                                    {
                                                                        <span class="badge bg-light text-dark me-1">@obj</span>
                                                                    }
                                                                    @if (objects.Count > 5)
                                                                    {
                                                                        <span class="badge bg-light text-muted">+@(objects.Count - 5) more</span>
                                                                    }
                                                                </div>
                                                            }
                                                        </div>
                                                        
                                                        <div class="col-md-6">
                                                            @if (colors.Any())
                                                            {
                                                                <div class="mb-2">
                                                                    <strong>Dominant Colors:</strong><br>
                                                                    @foreach (var color in colors.Take(4))
                                                                    {
                                                                        <span class="badge bg-light text-dark me-1">üé® @color</span>
                                                                    }
                                                                </div>
                                                            }
                                                            
                                                            <div class="small text-muted">
                                                                <strong>All Keywords:</strong><br>
                                                                @sample.Keywords
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        
                                        @if (!string.IsNullOrEmpty(sample.JsonResponse))
                                        {
                                            <div class="mt-3">
                                                <strong>AI Response Data:</strong>
                                                <div class="border rounded p-2 bg-light mt-1">
                                                    <pre class="mb-0" style="white-space: pre-wrap; word-wrap: break-word; font-size: 0.85rem; max-height: 300px; overflow-y: auto;">@sample.JsonResponse</pre>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="mt-3">
                                                <div class="alert alert-warning mb-0">
                                                    <small>No JSON response data available (analyze again to capture full response)</small>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    
                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <button class="btn btn-outline-primary" @onclick="PreviousAiPage" disabled="@(currentAiPage == 0)">
                            <span class="oi oi-arrow-left" aria-hidden="true"></span> Previous
                        </button>
                        <span class="text-muted">
                            Showing @(currentAiPage * aiSamplesPerPage + 1) - @Math.Min((currentAiPage + 1) * aiSamplesPerPage, allAiSamples.Count) of @allAiSamples.Count
                        </span>
                        <button class="btn btn-outline-primary" @onclick="NextAiPage" 
                                disabled="@((currentAiPage + 1) * aiSamplesPerPage >= allAiSamples.Count)">
                            Next <span class="oi oi-arrow-right" aria-hidden="true"></span>
                        </button>
                    </div>
                </div>
            </div>
        }
        else if (analyzedImages == 0)
        {
            <div class="alert alert-info" role="alert">
                <h5 class="alert-heading"><span class="oi oi-info" aria-hidden="true"></span> No AI Analysis Yet</h5>
                <p>No images have been analyzed with AI yet. Visit the <a href="/database-scan" class="alert-link">AI Analysis</a> page to start analyzing your images.</p>
            </div>
        }

        <!-- Duplicate Analysis -->
        @if (duplicateGroups.Any())
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <span class="oi oi-layers me-2 text-warning" aria-hidden="true"></span>
                        üîÑ Duplicate Analysis
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="alert alert-warning text-center">
                                <h4>@duplicateGroups.Count</h4>
                                <small>Duplicate Groups</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="alert alert-danger text-center">
                                <h4>@duplicateCount</h4>
                                <small>Duplicate Files</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="alert alert-info text-center">
                                <h4>@FormatFileSize(duplicateGroups.Sum(g => g.FileSize * (g.Files.Count - 1)))</h4>
                                <small>Wasted Space</small>
                            </div>
                        </div>
                    </div>

                    <h6>Sample Duplicate Groups:</h6>
                    @{
                        int groupIndex = 0;
                    }
                    @foreach (var group in duplicateGroups.Take(5))
                    {
                        <div class="card mb-3 border-warning">
                            <div class="card-header bg-warning bg-opacity-10">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>@group.Files.Count identical files</strong> - 
                                        Wasting @FormatFileSize(group.FileSize * (group.Files.Count - 1))
                                    </div>
                                    <small class="text-muted">Hash: @group.Hash.Substring(0, 12)...</small>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="row mb-3">
                                    @foreach (var image in group.Files.Take(3))
                                    {
                                        <div class="col-4">
                                            <div class="position-relative">
                                                <ImageViewer Photo="image" ContainerClass="w-100" ShowTime="false" />
                                                <div class="position-absolute top-0 start-0 m-1" style="z-index: 10;">
                                                    <span class="badge bg-dark bg-opacity-75">@FormatFileSize(image.FileSizeBytes)</span>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="border-top pt-2">
                                    <h6 class="mb-2">File Locations:</h6>
                                    @foreach (var file in group.Files)
                                    {
                                        <div class="mb-1 small">
                                            <span class="oi oi-folder me-1" aria-hidden="true"></span>
                                            <strong>@(file.ScanDirectory?.DirectoryPath ?? "Unknown"):</strong>
                                            @file.RelativePath
                                            <span class="text-muted ms-2">(@file.DateCreated.ToString("yyyy-MM-dd"))</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        groupIndex++;
                    }
                    
                    @if (duplicateGroups.Count > 5)
                    {
                        <div class="text-center mt-3">
                            <button class="btn btn-outline-primary" @onclick="ShowAllDuplicates">
                                <span class="oi oi-layers me-2" aria-hidden="true"></span>
                                View All @duplicateGroups.Count Duplicate Groups
                            </button>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Scan Directories -->
        @if (scanDirectories.Any())
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <span class="oi oi-folder me-2" aria-hidden="true"></span>
                        üìÅ Scan Directories
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        @foreach (var dir in scanDirectories)
                        {
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <h6 class="card-title">
                                            <span class="oi oi-folder-open me-2" aria-hidden="true"></span>
                                            @Path.GetFileName(dir.DirectoryPath)
                                        </h6>
                                        <p class="small text-muted mb-2">@dir.DirectoryPath</p>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span class="badge bg-primary">@dir.ImageCount images</span>
                                            <small class="text-muted">Added @dir.DateCreated.ToString("MMM dd, yyyy")</small>
                                        </div>
                                        @if (dir.ImageCount > 0)
                                        {
                                            <div class="progress mt-2" style="height: 6px;">
                                                <div class="progress-bar" 
                                                     style="width: @(totalImages > 0 ? (double)dir.ImageCount / totalImages * 100 : 0)%"
                                                     title="@((totalImages > 0 ? (double)dir.ImageCount / totalImages * 100 : 0).ToString("F1"))% of total library"></div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <!-- GPS Coordinates Section -->
        <div class="card mb-4">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <span class="oi oi-map-marker me-2" aria-hidden="true"></span>
                        üó∫Ô∏è GPS Location Data
                    </h5>
                    @if (gpsEnabledImages > 0)
                    {
                        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => Navigation.NavigateTo("/locations"))">
                            <span class="oi oi-external-link me-1"></span>
                            View Photo Map
                        </button>
                    }
                </div>
            </div>
            <div class="card-body">
                @if (gpsEnabledImages == 0)
                {
                    <div class="text-center py-3">
                        <i class="oi oi-map-marker text-muted" style="font-size: 2rem;"></i>
                        <h6 class="mt-2 text-muted">No GPS Data Found</h6>
                        <p class="text-muted mb-0">Photos need location information to appear here. Most smartphone photos include GPS data.</p>
                    </div>
                }
                else
                {
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="text-center">
                                <h4 class="text-success">@gpsEnabledImages</h4>
                                <small class="text-muted">Photos with GPS</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-center">
                                <h4 class="text-info">@uniqueLocations</h4>
                                <small class="text-muted">Different Locations</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-center">
                                <h4 class="text-primary">@gpsPercentage.ToString("F1")%</h4>
                                <small class="text-muted">of Total Photos</small>
                            </div>
                        </div>
                    </div>

                    @if (gpsFileTypeStats.Any())
                    {
                        <h6 class="mb-3">GPS Data by File Type:</h6>
                        <div class="row mb-4">
                            @foreach (var fileType in gpsFileTypeStats.OrderByDescending(f => f.Count))
                            {
                                <div class="col-md-3 mb-2">
                                    <div class="d-flex justify-content-between align-items-center bg-light rounded p-2">
                                        <div>
                                            <strong>@fileType.Extension.ToUpper()</strong><br>
                                            <small class="text-muted">@fileType.Count photos</small>
                                        </div>
                                        <span class="badge bg-success">@fileType.Percentage.ToString("F1")%</span>
                                    </div>
                                </div>
                            }
                        </div>
                    }

                    @if (gpsSampleImages.Any())
                    {
                        <h6 class="mb-3">Sample Photos with GPS Data:</h6>
                        <div class="row">
                            @foreach (var sample in gpsSampleImages)
                            {
                                <div class="col-md-6 mb-3">
                                    <div class="card border-success">
                                        <div class="card-body p-3">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <div class="flex-grow-1">
                                                    <h6 class="mb-1" title="@sample.FileName">
                                                        <span class="oi oi-file me-1"></span>
                                                        @(sample.FileName.Length > 30 ? sample.FileName.Substring(0, 30) + "..." : sample.FileName)
                                                    </h6>
                                                    <div class="small text-muted">
                                                        <span class="badge bg-secondary me-1">@sample.FileExtension.ToUpper()</span>
                                                        @if (sample.DateTaken.HasValue)
                                                        {
                                                            <span>üìÖ @sample.DateTaken.Value.ToString("MMM dd, yyyy")</span>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="mb-2">
                                                <small class="text-success">
                                                    <span class="oi oi-map-marker me-1"></span>
                                                    <strong>@sample.Latitude.ToString("F4"), @sample.Longitude.ToString("F4")</strong>
                                                </small>
                                            </div>
                                            <div class="d-flex gap-2">
                                                <a href="https://www.google.com/maps?q=@sample.Latitude,@sample.Longitude" 
                                                   target="_blank" class="btn btn-sm btn-outline-primary">
                                                    <span class="oi oi-external-link me-1"></span>View on Map
                                                </a>
                                                <button class="btn btn-sm btn-outline-secondary" 
                                                        @onclick="() => ShowImageDetails(sample.ImageId)">
                                                    <span class="oi oi-info me-1"></span>Details
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        @if (gpsEnabledImages > gpsSampleImages.Count)
                        {
                            <div class="text-center mt-3">
                                <button class="btn btn-outline-primary" @onclick="@(() => Navigation.NavigateTo("/locations"))">
                                    <span class="oi oi-map-marker me-2"></span>
                                    View All @gpsEnabledImages Photos with GPS Data
                                </button>
                            </div>
                        }
                    }
                }
            </div>
        </div>

        <!-- File Type Distribution -->
        @if (fileTypeStats.Any())
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-pie-chart" aria-hidden="true"></span> File Type Distribution</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        @foreach (var fileType in fileTypeStats.OrderByDescending(f => f.Count))
                        {
                            <div class="col-md-3 mb-3">
                                <div class="text-center">
                                    <h6>@fileType.Extension.ToUpper()</h6>
                                    <h4 class="text-primary">@fileType.Count.ToString("N0")</h4>
                                    <small class="text-muted">@fileType.Percentage.ToString("F1")%</small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <!-- Action Buttons -->
        <div class="d-flex justify-content-between mb-4">
            <button class="btn btn-outline-secondary" @onclick="GoBack">
                <span class="oi oi-arrow-left" aria-hidden="true"></span> Back to Home
            </button>
            <button class="btn btn-primary" @onclick="RefreshReport" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                }
                <span class="oi oi-reload" aria-hidden="true"></span> Refresh Report
            </button>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private string errorMessage = "";
    
    // Summary stats
    private int totalImages = 0;
    private int analyzedImages = 0;
    private int percentAnalyzed = 0;
    private int duplicateCount = 0;
    private long totalSize = 0;
    private string totalSizeStr = "0 B";
    
    // Screenshot stats
    private int screenshotCount = 0;
    private int screenshotPercentage = 0;
    private int realPhotoCount = 0;
    private int realPhotoPercentage = 0;
    private ImageCategorizationResults? categorizationStats = null;
    private List<tbl_images> screenshotSamples = new();
    
    // Category statistics
    private List<CategoryStat> categoryStats = new();
    
    // AI samples
    private List<AISample> aiSamples = new();
    private List<AISample> allAiSamples = new();
    private int currentAiPage = 0;
    private int aiSamplesPerPage = 6;
    
    // Duplicate groups
    private List<DuplicateGroup> duplicateGroups = new();
    
    // File type statistics
    private List<FileTypeStat> fileTypeStats = new();
    
    // Scan directories
    private List<ScanDirectoryStat> scanDirectories = new();
    
    // GPS/Location statistics
    private int gpsEnabledImages = 0;
    private int uniqueLocations = 0;
    private double gpsPercentage = 0;
    private List<FileTypeStat> gpsFileTypeStats = new();
    private List<GpsSampleImage> gpsSampleImages = new();

    private class CategoryStat
    {
        public string Category { get; set; } = "";
        public int Count { get; set; }
    }

    private class AISample
    {
        public string FileName { get; set; } = "";
        public string Category { get; set; } = "";
        public string Description { get; set; } = "";
        public string AIModel { get; set; } = "";
        public DateTime? AnalyzedAt { get; set; }
        public string JsonResponse { get; set; } = "";
        public string Keywords { get; set; } = "";
    }

    private class DuplicateGroup
    {
        public string Hash { get; set; } = "";
        public long FileSize { get; set; }
        public List<tbl_images> Files { get; set; } = new();
    }

    private class FileTypeStat
    {
        public string Extension { get; set; } = "";
        public int Count { get; set; }
        public double Percentage { get; set; }
    }

    private class ScanDirectoryStat
    {
        public string DirectoryPath { get; set; } = "";
        public int ImageCount { get; set; }
        public DateTime DateCreated { get; set; }
    }

    private class GpsSampleImage
    {
        public int ImageId { get; set; }
        public string FileName { get; set; } = "";
        public string FileExtension { get; set; } = "";
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public DateTime? DateTaken { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        // IMMEDIATE FEEDBACK - SHOW LOADING RIGHT NOW!
        isLoading = true;
        errorMessage = "";
        StateHasChanged();
        
        try
        {
            // Ensure UI updates
            await Task.Delay(100);
            
            // Now load the data
            await LoadReportData();
        }
        catch (OperationCanceledException)
        {
            // Page navigation occurred, ignore
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during report initialization");
            errorMessage = $"Failed to load report: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadReportData()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            StateHasChanged();

            // Load basic statistics
            totalImages = await DbContext.tbl_images.CountAsync(i => i.IsDeleted == 0);
            
            // Load AI analysis statistics
            analyzedImages = await DbContext.tbl_image_analysis.CountAsync();
            percentAnalyzed = totalImages > 0 ? (analyzedImages * 100 / totalImages) : 0;
            
            // Load category statistics
            categoryStats = await DbContext.tbl_image_analysis
                .GroupBy(a => a.ImageCategory ?? "Unknown")
                .Select(g => new CategoryStat 
                { 
                    Category = g.Key, 
                    Count = g.Count() 
                })
                .ToListAsync();
            
            // Load categorization statistics
            categorizationStats = await FastImageCategorizationService.GetCategorizationStatisticsAsync();
            screenshotCount = categorizationStats?.TotalScreenshots ?? 0;
            screenshotPercentage = totalImages > 0 ? (screenshotCount * 100 / totalImages) : 0;
            realPhotoCount = totalImages - screenshotCount;
            realPhotoPercentage = totalImages > 0 ? (realPhotoCount * 100 / totalImages) : 0;
            
            // Load screenshot samples
            screenshotSamples = await DbContext.tbl_images
                .Join(DbContext.tbl_image_analysis,
                    img => img.ImageId,
                    analysis => analysis.ImageId,
                    (img, analysis) => new { Image = img, Analysis = analysis })
                .Where(x => x.Analysis.ImageCategory == "screenshot" && x.Image.IsDeleted == 0)
                .Select(x => x.Image)
                .Take(12)
                .ToListAsync();
            
            // Load ALL AI analysis samples
            allAiSamples = await DbContext.tbl_image_analysis
                .Join(DbContext.tbl_images,
                    analysis => analysis.ImageId,
                    image => image.ImageId,
                    (analysis, image) => new AISample
                    {
                        FileName = image.FileName,
                        Category = analysis.ImageCategory ?? "Unknown",
                        Description = analysis.AIDescription ?? "",
                        AIModel = analysis.AIModelUsed ?? "Unknown",
                        AnalyzedAt = analysis.AIAnalyzedAt,
                        JsonResponse = analysis.AIAnalysisJson ?? "",
                        Keywords = analysis.AIKeywords ?? ""
                    })
                .OrderByDescending(s => s.AnalyzedAt)
                .ToListAsync();
            
            // Set initial page of samples
            currentAiPage = 0;
            UpdateAiSamplesPage();
            
            // Load duplicate statistics with scan directory information
            var duplicates = await DbContext.tbl_images
                .Include(i => i.ScanDirectory)
                .Where(i => i.IsDeleted == 0 && !string.IsNullOrEmpty(i.FileHash))
                .GroupBy(i => i.FileHash)
                .Where(g => g.Count() > 1)
                .Select(g => new DuplicateGroup
                {
                    Hash = g.Key!,
                    FileSize = g.First().FileSizeBytes,
                    Files = g.ToList()
                })
                .ToListAsync();
            
            duplicateGroups = duplicates;
            duplicateCount = duplicates.Sum(g => g.Files.Count - 1); // Don't count the original
            
            // Calculate total size
            totalSize = await DbContext.tbl_images
                .Where(i => i.IsDeleted == 0)
                .SumAsync(i => (long)i.FileSizeBytes);
            totalSizeStr = FormatFileSize(totalSize);
            
            // Load scan directories statistics
            scanDirectories = await DbContext.tbl_scan_directory
                .Select(sd => new ScanDirectoryStat
                {
                    DirectoryPath = sd.DirectoryPath,
                    ImageCount = DbContext.tbl_images.Count(img => img.ScanDirectoryId == sd.ScanDirectoryId && img.IsDeleted == 0),
                    DateCreated = sd.DateCreated
                })
                .OrderBy(sd => sd.DateCreated)
                .ToListAsync();
            
            // Load file type statistics
            var extensions = await DbContext.tbl_images
                .Where(i => i.IsDeleted == 0 && !string.IsNullOrEmpty(i.FileName))
                .Select(i => Path.GetExtension(i.FileName).ToLower())
                .ToListAsync();
            
            fileTypeStats = extensions
                .GroupBy(ext => string.IsNullOrEmpty(ext) ? ".unknown" : ext)
                .Select(g => new FileTypeStat
                {
                    Extension = g.Key,
                    Count = g.Count(),
                    Percentage = totalImages > 0 ? (double)g.Count() / totalImages * 100 : 0
                })
                .OrderByDescending(f => f.Count)
                .ToList();
            
            // Load GPS/Location statistics
            var photosWithGps = await DbContext.tbl_images
                .Where(img => img.FileExists == 1 && img.IsDeleted == 0)
                .Join(DbContext.tbl_image_metadata.Where(m => m.Latitude.HasValue && m.Longitude.HasValue),
                      img => img.ImageId,
                      meta => meta.ImageId,
                      (img, meta) => new { Image = img, Metadata = meta })
                .ToListAsync();

            gpsEnabledImages = photosWithGps.Count;
            gpsPercentage = totalImages > 0 ? (double)gpsEnabledImages / totalImages * 100 : 0;

            // Count unique locations (rounded to ~100m precision)
            uniqueLocations = photosWithGps
                .GroupBy(x => new 
                { 
                    Lat = Math.Round(x.Metadata.Latitude!.Value, 3),
                    Lon = Math.Round(x.Metadata.Longitude!.Value, 3)
                })
                .Count();

            // GPS file type statistics
            if (photosWithGps.Any())
            {
                var gpsExtensions = photosWithGps
                    .Select(x => Path.GetExtension(x.Image.FileName).ToLower())
                    .ToList();

                gpsFileTypeStats = gpsExtensions
                    .GroupBy(ext => string.IsNullOrEmpty(ext) ? ".unknown" : ext)
                    .Select(g => new FileTypeStat
                    {
                        Extension = g.Key,
                        Count = g.Count(),
                        Percentage = gpsEnabledImages > 0 ? (double)g.Count() / gpsEnabledImages * 100 : 0
                    })
                    .OrderByDescending(f => f.Count)
                    .ToList();

                // Load sample GPS images - try to get different file types
                var distinctExtensions = gpsFileTypeStats.Take(4).Select(f => f.Extension).ToList();
                gpsSampleImages = new List<GpsSampleImage>();

                foreach (var extension in distinctExtensions)
                {
                    var sample = photosWithGps
                        .Where(x => Path.GetExtension(x.Image.FileName).ToLower() == extension)
                        .OrderByDescending(x => x.Metadata.DateTaken ?? x.Image.DateModified)
                        .Select(x => new GpsSampleImage
                        {
                            ImageId = x.Image.ImageId,
                            FileName = x.Image.FileName,
                            FileExtension = Path.GetExtension(x.Image.FileName),
                            Latitude = x.Metadata.Latitude!.Value,
                            Longitude = x.Metadata.Longitude!.Value,
                            DateTaken = x.Metadata.DateTaken
                        })
                        .FirstOrDefault();

                    if (sample != null)
                    {
                        gpsSampleImages.Add(sample);
                    }
                }

                // If we have fewer than 6 samples, fill with any remaining photos
                if (gpsSampleImages.Count < 6)
                {
                    var additionalSamples = photosWithGps
                        .Where(x => !gpsSampleImages.Any(s => s.ImageId == x.Image.ImageId))
                        .OrderByDescending(x => x.Metadata.DateTaken ?? x.Image.DateModified)
                        .Take(6 - gpsSampleImages.Count)
                        .Select(x => new GpsSampleImage
                        {
                            ImageId = x.Image.ImageId,
                            FileName = x.Image.FileName,
                            FileExtension = Path.GetExtension(x.Image.FileName),
                            Latitude = x.Metadata.Latitude!.Value,
                            Longitude = x.Metadata.Longitude!.Value,
                            DateTaken = x.Metadata.DateTaken
                        })
                        .ToList();

                    gpsSampleImages.AddRange(additionalSamples);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading report data");
            errorMessage = $"Failed to load report data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshReport()
    {
        // IMMEDIATE FEEDBACK!
        isLoading = true;
        errorMessage = "";
        StateHasChanged();
        
        await Task.Delay(100);
        await LoadReportData();
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private void ShowAllDuplicates()
    {
        // TODO: Navigate to dedicated duplicates page
        // For now, show an alert
        // Navigation.NavigateTo("/duplicates");
    }

    private void UpdateAiSamplesPage()
    {
        aiSamples = allAiSamples
            .Skip(currentAiPage * aiSamplesPerPage)
            .Take(aiSamplesPerPage)
            .ToList();
    }

    private void NextAiPage()
    {
        if ((currentAiPage + 1) * aiSamplesPerPage < allAiSamples.Count)
        {
            currentAiPage++;
            UpdateAiSamplesPage();
            StateHasChanged();
        }
    }

    private void PreviousAiPage()
    {
        if (currentAiPage > 0)
        {
            currentAiPage--;
            UpdateAiSamplesPage();
            StateHasChanged();
        }
    }

    private void ShowImageDetails(int imageId)
    {
        ImageDetailsService.ShowImageDetails(imageId);
    }
}