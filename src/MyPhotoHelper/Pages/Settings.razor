@page "/settings"
@using MyPhotoHelper.Data
@using MyPhotoHelper.Models
@using MyPhotoHelper.Services
@using Microsoft.EntityFrameworkCore
@inject MyPhotoHelperDbContext DbContext
@inject IPathService PathService
@inject NavigationManager Navigation
@inject ILogger<Settings> Logger
@inject IJSRuntime JsRuntime
@inject SystemTrayService SystemTrayService
@inject IServiceProvider ServiceProvider
@inject ISettingsService SettingsService

<PageTitle>Settings - MyPhotoHelper</PageTitle>

<div class="container-fluid">
    <h1 class="display-4">Settings</h1>
    <p class="lead">Configure MyPhotoHelper application settings</p>
    
    @if (showSuccessMessage)
    {
        <div class="alert alert-success alert-dismissible fade show shadow-lg border-success border-2" role="alert" style="animation: slideInDown 0.3s ease-out;">
            <div class="d-flex align-items-center">
                <span class="oi oi-check fs-4 me-3" aria-hidden="true"></span>
                <div>
                    <strong>Success!</strong> Your settings have been saved successfully.
                </div>
            </div>
            <button type="button" class="btn-close" @onclick="() => showSuccessMessage = false"></button>
        </div>
    }
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show @(errorMessage.Contains("database needs to be updated") ? "border-3 shadow-lg" : "")" role="alert">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <span class="oi oi-x" aria-hidden="true"></span> @errorMessage
                    @if (errorMessage.Contains("database needs to be updated"))
                    {
                        <div class="mt-2">
                            <button type="button" class="btn btn-sm btn-warning" @onclick="OpenDatabaseUpdate">
                                <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Update Database Now
                            </button>
                        </div>
                    }
                </div>
                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
            </div>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading settings...</span>
            </div>
            <p class="mt-2">Loading settings...</p>
        </div>
    }
    else
    {
        <form @onsubmit="SaveSettings" @onsubmit:preventDefault="true">
            <div class="row">
                <!-- General Settings -->
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0"><span class="oi oi-cog" aria-hidden="true"></span> General Settings</h5>
                        </div>
                        <div class="card-body">
                            <h6>System Settings</h6>
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="runOnStartup" 
                                       checked="@runOnWindowsStartup"
                                       @onchange="@((e) => runOnWindowsStartup = (bool)e.Value!)">
                                <label class="form-check-label" for="runOnStartup">
                                    Start MyPhotoHelper when Windows starts
                                    <small class="text-muted d-block">Application will start minimized to system tray</small>
                                </label>
                            </div>
                            
                            <h6 class="mt-4">Scanning Settings</h6>
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="autoScan" 
                                       checked="@autoScanOnStartup"
                                       @onchange="@((e) => autoScanOnStartup = (bool)e.Value!)">
                                <label class="form-check-label" for="autoScan">
                                    Auto-scan on Startup
                                    <small class="text-muted d-block">Automatically scan for new photos when the app starts</small>
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Scan Directories -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0"><span class="oi oi-folder" aria-hidden="true"></span> Scan Directories</h5>
                        </div>
                        <div class="card-body">
                            @if (scanDirectories == null || !scanDirectories.Any())
                            {
                                <div class="alert alert-warning">
                                    <span class="oi oi-warning" aria-hidden="true"></span>
                                    No scan directories configured. Add directories to scan for photos.
                                </div>
                            }
                            else
                            {
                                <div class="mb-3">
                                    <label class="form-label">Configured Directories</label>
                                    <div class="list-group">
                                        @foreach (var dir in scanDirectories)
                                        {
                                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                                <div>
                                                    <span class="text-break">@dir.DirectoryPath</span>
                                                    <br />
                                                    <small class="text-muted">Added: @dir.DateCreated.ToString("yyyy-MM-dd")</small>
                                                </div>
                                                <button class="btn btn-sm btn-danger" @onclick="() => RemoveScanDirectory(dir.ScanDirectoryId)">
                                                    <span class="oi oi-trash" aria-hidden="true"></span>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            
                            <div class="mb-3">
                                <label class="form-label">Add New Directory</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" @bind="newDirectoryPath" 
                                           placeholder="C:\Users\YourName\Pictures" />
                                    <button class="btn btn-primary" @onclick="AddScanDirectory" 
                                            disabled="@(string.IsNullOrWhiteSpace(newDirectoryPath))">
                                        <span class="oi oi-plus" aria-hidden="true"></span> Add
                                    </button>
                                </div>
                                @if (!string.IsNullOrEmpty(directoryError))
                                {
                                    <div class="text-danger mt-1">@directoryError</div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Performance & AI Settings -->
                <div class="col-md-6">
                    <!-- Performance Settings -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0"><span class="oi oi-dashboard" aria-hidden="true"></span> Performance Settings</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Batch Size</label>
                                <input type="number" class="form-control" @bind="batchSize" 
                                       min="1" max="1000">
                                <div class="form-text">Number of files to process at once</div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Max Concurrent Tasks</label>
                                <input type="number" class="form-control" @bind="maxConcurrentTasks" 
                                       min="1" max="20">
                                <div class="form-text">Maximum parallel operations</div>
                            </div>
                        </div>
                    </div>

                    @* AI Settings - Hidden for now
                    <div class="card mb-4">
                        <div class="card-header bg-warning text-dark">
                            <h5 class="mb-0"><span class="oi oi-warning" aria-hidden="true"></span> AI Settings</h5>
                        </div>
                        <div class="card-body">
                            <div class="alert alert-warning">
                                <h6><span class="oi oi-wrench" aria-hidden="true"></span> Temporarily Unavailable</h6>
                                <p class="mb-2">AI settings are being migrated to work with the new flexible settings system.</p>
                                <p class="mb-0 small">All AI features (image analysis, categorization, etc.) are temporarily disabled while we complete the system upgrade.</p>
                            </div>
                        </div>
                    </div>
                    *@
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="d-flex justify-content-between mb-4">
                <div>
                    <button type="button" class="btn btn-outline-secondary" @onclick="GoBack">
                        <span class="oi oi-arrow-left" aria-hidden="true"></span> Back to Home
                    </button>
                    <button type="button" class="btn btn-outline-info ms-2" @onclick="OpenDatabaseUpdate">
                        <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Update Database
                    </button>
                </div>
                <div>
                    <button type="button" class="btn btn-outline-warning me-2" @onclick="ResetToDefaults" disabled="@isResetting">
                        @if (isResetting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Resetting...</span>
                        }
                        else
                        {
                            <span class="oi oi-reload" aria-hidden="true"></span>
                            <text> Reset to Defaults</text>
                        }
                    </button>
                    <button type="submit" class="btn btn-primary btn-lg px-4" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Saving...</span>
                        }
                        else
                        {
                            <span class="oi oi-check" aria-hidden="true"></span>
                            <text> Save Settings</text>
                        }
                    </button>
                </div>
            </div>
        </form>
    }
</div>

<style>
    @@keyframes slideInDown {
        from {
            transform: translateY(-20px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }
    
    .btn:not(:disabled):hover {
        transform: scale(1.05);
        transition: transform 0.2s ease;
    }
    
    .btn:not(:disabled):active {
        transform: scale(0.98);
    }
    
    .btn {
        transition: all 0.2s ease;
    }
    
    .alert-success {
        position: relative;
        z-index: 1000;
    }
</style>

@code {
    // Settings values
    private string themeName = "default";
    private bool runOnWindowsStartup = true;
    private bool autoScanOnStartup = true;
    private int batchSize = 100;
    private int maxConcurrentTasks = 4;
    
    private List<tbl_scan_directory>? scanDirectories;
    private string newDirectoryPath = string.Empty;
    private string directoryError = string.Empty;
    private bool isSaving = false;
    private bool isLoading = true;
    private bool showSuccessMessage = false;
    private string errorMessage = string.Empty;
    private bool isResetting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
        await LoadScanDirectories();
        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadSettings()
    {
        try
        {
            // Load all settings using SettingsService
            themeName = await SettingsService.GetSettingAsync<string>(SettingNames.ThemeName, "default");
            runOnWindowsStartup = await SettingsService.GetSettingAsync<bool>(SettingNames.RunOnWindowsStartup, true);
            autoScanOnStartup = await SettingsService.GetSettingAsync<bool>(SettingNames.AutoScanOnStartup, true);
            batchSize = await SettingsService.GetSettingAsync<int>(SettingNames.BatchSize, 100);
            maxConcurrentTasks = await SettingsService.GetSettingAsync<int>(SettingNames.MaxConcurrentTasks, 4);
            
            // Sync Windows startup status
            var actualStartupEnabled = SystemTrayService.IsWindowsStartupEnabled();
            if (actualStartupEnabled != runOnWindowsStartup)
            {
                Logger.LogInformation($"Syncing Windows startup status. DB: {runOnWindowsStartup}, Actual: {actualStartupEnabled}");
                runOnWindowsStartup = actualStartupEnabled;
                await SettingsService.SetSettingAsync(SettingNames.RunOnWindowsStartup, runOnWindowsStartup);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading settings");
            errorMessage = "Failed to load settings: " + ex.Message;
        }
    }

    private async Task SaveSettings()
    {
        try
        {
            isSaving = true;
            errorMessage = string.Empty;
            
            // Handle Windows startup changes
            try
            {
                var isCurrentlyEnabled = SystemTrayService.IsWindowsStartupEnabled();
                
                if (runOnWindowsStartup != isCurrentlyEnabled)
                {
                    if (runOnWindowsStartup)
                    {
                        SystemTrayService.EnableWindowsStartup();
                        Logger.LogInformation("Enabled Windows startup");
                    }
                    else
                    {
                        SystemTrayService.DisableWindowsStartup();
                        Logger.LogInformation("Disabled Windows startup");
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to update Windows startup setting");
                errorMessage = "Failed to update Windows startup setting. You may need to run as administrator.";
                return;
            }
            
            // Save all settings using SettingsService
            await SettingsService.SetMultipleSettingsAsync(new Dictionary<string, object>
            {
                { SettingNames.RunOnWindowsStartup, runOnWindowsStartup },
                { SettingNames.AutoScanOnStartup, autoScanOnStartup },
                { SettingNames.BatchSize, batchSize },
                { SettingNames.MaxConcurrentTasks, maxConcurrentTasks }
            });
            
            showSuccessMessage = true;
            Logger.LogInformation("Settings saved successfully");
            
            // Hide success message after 5 seconds
            _ = Task.Delay(5000).ContinueWith(_ => 
            {
                showSuccessMessage = false;
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving settings");
            errorMessage = "Failed to save settings: " + ex.Message;
        }
        finally
        {
            isSaving = false;
        }
    }

    private Task ResetToDefaults()
    {
        isResetting = true;
        errorMessage = "";
        StateHasChanged();
        
        try
        {
            // Reset to default values
            themeName = "default";
            autoScanOnStartup = true;
            batchSize = 100;
            maxConcurrentTasks = 4;
            
            // Keep current Windows startup state
            runOnWindowsStartup = SystemTrayService.IsWindowsStartupEnabled();
            
            StateHasChanged();
        }
        finally
        {
            isResetting = false;
        }
        
        return Task.CompletedTask;
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private async Task LoadScanDirectories()
    {
        try
        {
            scanDirectories = await DbContext.tbl_scan_directory
                .OrderBy(d => d.DirectoryPath)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading scan directories");
            scanDirectories = new List<tbl_scan_directory>();
        }
    }

    private async Task AddScanDirectory()
    {
        directoryError = string.Empty;
        
        if (string.IsNullOrWhiteSpace(newDirectoryPath))
        {
            directoryError = "Please enter a directory path";
            return;
        }

        // Normalize the path
        var normalizedPath = Path.GetFullPath(newDirectoryPath.Trim());
        
        // Check if directory exists
        if (!Directory.Exists(normalizedPath))
        {
            directoryError = "Directory does not exist";
            return;
        }

        try
        {
            // Check if already exists
            var exists = await DbContext.tbl_scan_directory
                .AnyAsync(d => d.DirectoryPath == normalizedPath);
                
            if (exists)
            {
                directoryError = "This directory is already configured";
                return;
            }

            // Add new scan directory
            var scanDir = new tbl_scan_directory
            {
                DirectoryPath = normalizedPath,
                DateCreated = DateTime.UtcNow
            };

            DbContext.tbl_scan_directory.Add(scanDir);
            await DbContext.SaveChangesAsync();
            
            // Reload the list
            await LoadScanDirectories();
            newDirectoryPath = string.Empty;
            
            Logger.LogInformation("Added scan directory: {Path}", normalizedPath);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding scan directory");
            directoryError = "Failed to add directory: " + ex.Message;
        }
    }

    private async Task RemoveScanDirectory(int scanDirectoryId)
    {
        try
        {
            var scanDir = await DbContext.tbl_scan_directory
                .FirstOrDefaultAsync(d => d.ScanDirectoryId == scanDirectoryId);
                
            if (scanDir != null)
            {
                // Count associated images
                var imageCount = await DbContext.tbl_images
                    .CountAsync(i => i.ScanDirectoryId == scanDirectoryId);
                    
                if (imageCount > 0)
                {
                    // Show confirmation dialog
                    var result = await JsRuntime.InvokeAsync<bool>("confirm", 
                        $"This directory contains {imageCount} images. Removing it will delete all associated images from the database. Continue?");
                        
                    if (!result)
                        return;
                }

                DbContext.tbl_scan_directory.Remove(scanDir);
                await DbContext.SaveChangesAsync();
                
                await LoadScanDirectories();
                Logger.LogInformation("Removed scan directory: {Path}", scanDir.DirectoryPath);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error removing scan directory");
            errorMessage = "Failed to remove directory: " + ex.Message;
        }
    }
    
    private void OpenDatabaseUpdate()
    {
        try
        {
            // Create and show the database update form
            var updateForm = new MyPhotoHelper.Forms.DatabaseUpdateForm(ServiceProvider);
            updateForm.ShowDialog();
            
            // Reload settings after database update
            InvokeAsync(async () =>
            {
                await LoadSettings();
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error opening database update form");
            errorMessage = "Failed to open database update tool: " + ex.Message;
        }
    }
}