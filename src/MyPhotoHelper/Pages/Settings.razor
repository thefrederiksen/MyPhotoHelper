@page "/settings"
@using MyPhotoHelper.Data
@using MyPhotoHelper.Models
@using MyPhotoHelper.Services
@using Microsoft.EntityFrameworkCore
@inject MyPhotoHelperDbContext DbContext
@inject IPathService PathService
@inject NavigationManager Navigation
@inject ILogger<Settings> Logger
@inject IJSRuntime JsRuntime
@inject SystemTrayService SystemTrayService
@inject IServiceProvider ServiceProvider
@inject ISettingsService SettingsService

<PageTitle>Settings - MyPhotoHelper</PageTitle>

<div class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <!-- Page Header -->
        <div class="mb-8">
            <h1 class="text-4xl font-bold text-gray-900 mb-2">Settings</h1>
            <p class="text-lg text-gray-600">Configure your MyPhotoHelper application settings</p>
        </div>
        
        <!-- Success Message -->
        @if (showSuccessMessage)
        {
            <div class="mb-6 bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded-lg relative shadow-sm animate-slideInDown" role="alert">
                <div class="flex items-center">
                    <span class="oi oi-check text-xl mr-3 text-green-600" aria-hidden="true"></span>
                    <div>
                        <strong class="font-semibold">Success!</strong> Your settings have been saved successfully.
                    </div>
                </div>
                <button type="button" class="absolute top-3 right-3 text-green-600 hover:text-green-800 transition-colors" @onclick="() => showSuccessMessage = false">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </button>
            </div>
        }
        
        <!-- Error Message -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="mb-6 bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-lg @(errorMessage.Contains("database needs to be updated") ? "shadow-lg" : "shadow-sm")" role="alert">
                <div class="flex items-start justify-between">
                    <div class="flex">
                        <span class="oi oi-x text-xl mr-3 text-red-600 flex-shrink-0 mt-0.5" aria-hidden="true"></span>
                        <div>
                            <span class="font-medium">@errorMessage</span>
                            @if (errorMessage.Contains("database needs to be updated"))
                            {
                                <div class="mt-3">
                                    <button type="button" class="bg-yellow-500 hover:bg-yellow-600 text-white text-sm font-medium py-2 px-3 rounded transition-colors duration-200" @onclick="OpenDatabaseUpdate">
                                        <span class="oi oi-data-transfer-download mr-2" aria-hidden="true"></span>Update Database Now
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                    <button type="button" class="text-red-600 hover:text-red-800 transition-colors ml-4" @onclick="() => errorMessage = string.Empty">
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                </div>
            </div>
        }

        <!-- Loading State -->
        @if (isLoading)
        {
            <div class="flex flex-col items-center justify-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"></div>
                <p class="text-gray-600 text-lg">Loading settings...</p>
            </div>
        }
        else
        {
            <form @onsubmit="SaveSettings" @onsubmit:preventDefault="true">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <!-- Left Column - General & Directory Settings -->
                    <div class="space-y-6">
                        <!-- General Settings -->
                        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                            <div class="bg-gray-50 px-6 py-4 border-b border-gray-200 rounded-t-lg">
                                <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                                    <span class="oi oi-cog mr-3 text-blue-600" aria-hidden="true"></span>
                                    General Settings
                                </h3>
                            </div>
                            <div class="p-6 space-y-6">
                                <!-- System Settings Section -->
                                <div>
                                    <h4 class="text-md font-medium text-gray-900 mb-4">System Settings</h4>
                                    <div class="flex items-start space-x-3">
                                        <input type="checkbox" id="runOnStartup" 
                                               class="w-4 h-4 text-blue-600 rounded focus:ring-blue-500 mt-1"
                                               checked="@runOnWindowsStartup"
                                               @onchange="@((e) => runOnWindowsStartup = (bool)e.Value!)">
                                        <label class="text-sm text-gray-700 leading-relaxed" for="runOnStartup">
                                            <span class="font-medium">Start MyPhotoHelper when Windows starts</span>
                                            <span class="block text-gray-500 mt-1">Application will start minimized to system tray</span>
                                        </label>
                                    </div>
                                </div>
                                
                                <!-- Scanning Settings Section -->
                                <div class="border-t border-gray-100 pt-6">
                                    <h4 class="text-md font-medium text-gray-900 mb-4">Scanning Settings</h4>
                                    <div class="space-y-4">
                                        <div class="flex items-start space-x-3">
                                            <input type="checkbox" id="autoScan" 
                                                   class="w-4 h-4 text-blue-600 rounded focus:ring-blue-500 mt-1"
                                                   checked="@autoScanOnStartup"
                                                   @onchange="@((e) => autoScanOnStartup = (bool)e.Value!)">
                                            <label class="text-sm text-gray-700 leading-relaxed" for="autoScan">
                                                <span class="font-medium">Auto-scan on startup</span>
                                                <span class="block text-gray-500 mt-1">Automatically scan for new photos when the app starts</span>
                                            </label>
                                        </div>
                                        
                                        <div class="flex items-start space-x-3">
                                            <input type="checkbox" id="directoryMonitoring" 
                                                   class="w-4 h-4 text-blue-600 rounded focus:ring-blue-500 mt-1"
                                                   checked="@enableDirectoryMonitoring"
                                                   @onchange="@((e) => enableDirectoryMonitoring = (bool)e.Value!)">
                                            <label class="text-sm text-gray-700 leading-relaxed" for="directoryMonitoring">
                                                <span class="font-medium">Enable directory monitoring</span>
                                                <span class="block text-gray-500 mt-1">Automatically detect and scan new photos, remove deleted files</span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Scan Directories -->
                        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                            <div class="bg-gray-50 px-6 py-4 border-b border-gray-200 rounded-t-lg">
                                <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                                    <span class="oi oi-folder mr-3 text-blue-600" aria-hidden="true"></span>
                                    Scan Directories
                                </h3>
                            </div>
                            <div class="p-6">
                                @if (scanDirectories == null || !scanDirectories.Any())
                                {
                                    <div class="bg-yellow-50 border border-yellow-200 text-yellow-800 px-4 py-3 rounded-lg mb-4">
                                        <div class="flex">
                                            <span class="oi oi-warning mr-3 text-yellow-600 flex-shrink-0" aria-hidden="true"></span>
                                            <span>No scan directories configured. Add directories to scan for photos.</span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="mb-6">
                                        <label class="block text-sm font-medium text-gray-700 mb-3">Configured Directories</label>
                                        <div class="space-y-2">
                                            @foreach (var dir in scanDirectories)
                                            {
                                                <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg border border-gray-200">
                                                    <div class="flex-1 min-w-0">
                                                        <p class="text-sm font-medium text-gray-900 truncate">@dir.DirectoryPath</p>
                                                        <p class="text-sm text-gray-500">Added: @dir.DateCreated.ToString("yyyy-MM-dd")</p>
                                                    </div>
                                                    <button type="button" 
                                                            class="ml-4 bg-red-600 hover:bg-red-700 text-white p-2 rounded transition-colors duration-200"
                                                            @onclick="() => RemoveScanDirectory(dir.ScanDirectoryId)"
                                                            title="Remove directory">
                                                        <span class="oi oi-trash" aria-hidden="true"></span>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Add New Directory</label>
                                    <div class="flex space-x-2">
                                        <input type="text" 
                                               class="flex-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                               @bind="newDirectoryPath" 
                                               placeholder="C:\Users\YourName\Pictures" />
                                        <button type="button" 
                                                class="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed text-white font-medium px-4 py-2 rounded-md transition-colors duration-200 flex items-center" 
                                                @onclick="AddScanDirectory" 
                                                disabled="@(string.IsNullOrWhiteSpace(newDirectoryPath))">
                                            <span class="oi oi-plus mr-2" aria-hidden="true"></span>Add
                                        </button>
                                    </div>
                                    @if (!string.IsNullOrEmpty(directoryError))
                                    {
                                        <p class="mt-2 text-sm text-red-600">@directoryError</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Right Column - Performance Settings -->
                    <div class="space-y-6">
                        <!-- Performance Settings -->
                        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                            <div class="bg-gray-50 px-6 py-4 border-b border-gray-200 rounded-t-lg">
                                <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                                    <span class="oi oi-dashboard mr-3 text-blue-600" aria-hidden="true"></span>
                                    Performance Settings
                                </h3>
                            </div>
                            <div class="p-6 space-y-6">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Batch Size</label>
                                    <input type="number" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           @bind="batchSize" 
                                           min="1" max="1000">
                                    <p class="mt-1 text-sm text-gray-500">Number of files to process at once</p>
                                </div>
                                
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Max Concurrent Tasks</label>
                                    <input type="number" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           @bind="maxConcurrentTasks" 
                                           min="1" max="20">
                                    <p class="mt-1 text-sm text-gray-500">Maximum parallel operations</p>
                                </div>
                            </div>
                        </div>

                        @* AI Settings - Hidden for now
                        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                            <div class="bg-yellow-50 px-6 py-4 border-b border-yellow-200 rounded-t-lg">
                                <h3 class="text-lg font-semibold text-yellow-800 flex items-center">
                                    <span class="oi oi-warning mr-3" aria-hidden="true"></span>
                                    AI Settings
                                </h3>
                            </div>
                            <div class="p-6">
                                <div class="bg-yellow-50 border border-yellow-200 text-yellow-800 px-4 py-3 rounded-lg">
                                    <h4 class="font-semibold flex items-center mb-2">
                                        <span class="oi oi-wrench mr-2" aria-hidden="true"></span>
                                        Temporarily Unavailable
                                    </h4>
                                    <p class="mb-2">AI settings are being migrated to work with the new flexible settings system.</p>
                                    <p class="text-sm">All AI features (image analysis, categorization, etc.) are temporarily disabled while we complete the system upgrade.</p>
                                </div>
                            </div>
                        </div>
                        *@
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="flex flex-col sm:flex-row justify-between items-center mt-8 pt-6 border-t border-gray-200 space-y-4 sm:space-y-0">
                    <div class="flex flex-wrap gap-3">
                        <button type="button" 
                                class="bg-white hover:bg-gray-50 text-gray-700 border border-gray-300 font-medium py-2 px-4 rounded-md transition-colors duration-200 flex items-center" 
                                @onclick="GoBack">
                            <span class="oi oi-arrow-left mr-2" aria-hidden="true"></span>Back to Home
                        </button>
                        <button type="button" 
                                class="bg-white hover:bg-cyan-50 text-cyan-600 border border-cyan-300 font-medium py-2 px-4 rounded-md transition-colors duration-200 flex items-center" 
                                @onclick="OpenDatabaseUpdate">
                            <span class="oi oi-data-transfer-download mr-2" aria-hidden="true"></span>Update Database
                        </button>
                    </div>
                    <div class="flex space-x-3">
                        <button type="button" 
                                class="bg-white hover:bg-yellow-50 text-yellow-600 border border-yellow-300 font-medium py-2 px-4 rounded-md transition-colors duration-200 flex items-center disabled:opacity-50 disabled:cursor-not-allowed" 
                                @onclick="ResetToDefaults" 
                                disabled="@isResetting">
                            @if (isResetting)
                            {
                                <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-yellow-600 mr-2"></div>
                                <span>Resetting...</span>
                            }
                            else
                            {
                                <span class="oi oi-reload mr-2" aria-hidden="true"></span>
                                <span>Reset to Defaults</span>
                            }
                        </button>
                        <button type="submit" 
                                class="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 disabled:cursor-not-allowed text-white font-medium py-2.5 px-6 rounded-md transition-colors duration-200 flex items-center text-base" 
                                disabled="@isSaving">
                            @if (isSaving)
                            {
                                <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                                <span>Saving...</span>
                            }
                            else
                            {
                                <span class="oi oi-check mr-2" aria-hidden="true"></span>
                                <span>Save Settings</span>
                            }
                        </button>
                    </div>
                </div>
            </form>
        }
    </div>
</div>

<style>
    .animate-slideInDown {
        animation: slideInDown 0.3s ease-out;
    }
    
    @@keyframes slideInDown {
        from {
            transform: translateY(-20px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }
</style>

@code {
    // Settings values
    private string themeName = "default";
    private bool runOnWindowsStartup = true;
    private bool autoScanOnStartup = true;
    private bool enableDirectoryMonitoring = true;
    private int batchSize = 100;
    private int maxConcurrentTasks = 4;
    
    private List<tbl_scan_directory>? scanDirectories;
    private string newDirectoryPath = string.Empty;
    private string directoryError = string.Empty;
    private bool isSaving = false;
    private bool isLoading = true;
    private bool showSuccessMessage = false;
    private string errorMessage = string.Empty;
    private bool isResetting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
        await LoadScanDirectories();
        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadSettings()
    {
        try
        {
            // Load all settings using SettingsService
            themeName = await SettingsService.GetSettingAsync<string>(SettingNames.ThemeName, "default");
            runOnWindowsStartup = await SettingsService.GetSettingAsync<bool>(SettingNames.RunOnWindowsStartup, true);
            autoScanOnStartup = await SettingsService.GetSettingAsync<bool>(SettingNames.AutoScanOnStartup, true);
            enableDirectoryMonitoring = await SettingsService.GetSettingAsync<bool>(SettingNames.EnableDirectoryMonitoring, true);
            batchSize = await SettingsService.GetSettingAsync<int>(SettingNames.BatchSize, 100);
            maxConcurrentTasks = await SettingsService.GetSettingAsync<int>(SettingNames.MaxConcurrentTasks, 4);
            
            // Sync Windows startup status
            var actualStartupEnabled = SystemTrayService.IsWindowsStartupEnabled();
            if (actualStartupEnabled != runOnWindowsStartup)
            {
                Logger.LogInformation($"Syncing Windows startup status. DB: {runOnWindowsStartup}, Actual: {actualStartupEnabled}");
                runOnWindowsStartup = actualStartupEnabled;
                await SettingsService.SetSettingAsync(SettingNames.RunOnWindowsStartup, runOnWindowsStartup);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading settings");
            errorMessage = "Failed to load settings: " + ex.Message;
        }
    }

    private async Task SaveSettings()
    {
        try
        {
            isSaving = true;
            errorMessage = string.Empty;
            
            // Handle Windows startup changes
            try
            {
                var isCurrentlyEnabled = SystemTrayService.IsWindowsStartupEnabled();
                
                if (runOnWindowsStartup != isCurrentlyEnabled)
                {
                    if (runOnWindowsStartup)
                    {
                        SystemTrayService.EnableWindowsStartup();
                        Logger.LogInformation("Enabled Windows startup");
                    }
                    else
                    {
                        SystemTrayService.DisableWindowsStartup();
                        Logger.LogInformation("Disabled Windows startup");
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to update Windows startup setting");
                errorMessage = "Failed to update Windows startup setting. You may need to run as administrator.";
                return;
            }
            
            // Save all settings using SettingsService
            await SettingsService.SetMultipleSettingsAsync(new Dictionary<string, object>
            {
                { SettingNames.RunOnWindowsStartup, runOnWindowsStartup },
                { SettingNames.AutoScanOnStartup, autoScanOnStartup },
                { SettingNames.EnableDirectoryMonitoring, enableDirectoryMonitoring },
                { SettingNames.BatchSize, batchSize },
                { SettingNames.MaxConcurrentTasks, maxConcurrentTasks }
            });
            
            showSuccessMessage = true;
            Logger.LogInformation("Settings saved successfully");
            
            // Hide success message after 5 seconds
            _ = Task.Delay(5000).ContinueWith(_ => 
            {
                showSuccessMessage = false;
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving settings");
            errorMessage = "Failed to save settings: " + ex.Message;
        }
        finally
        {
            isSaving = false;
        }
    }

    private Task ResetToDefaults()
    {
        isResetting = true;
        errorMessage = "";
        StateHasChanged();
        
        try
        {
            // Reset to default values
            themeName = "default";
            autoScanOnStartup = true;
            batchSize = 100;
            maxConcurrentTasks = 4;
            
            // Keep current Windows startup state
            runOnWindowsStartup = SystemTrayService.IsWindowsStartupEnabled();
            
            StateHasChanged();
        }
        finally
        {
            isResetting = false;
        }
        
        return Task.CompletedTask;
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private async Task LoadScanDirectories()
    {
        try
        {
            scanDirectories = await DbContext.tbl_scan_directory
                .OrderBy(d => d.DirectoryPath)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading scan directories");
            scanDirectories = new List<tbl_scan_directory>();
        }
    }

    private async Task AddScanDirectory()
    {
        directoryError = string.Empty;
        
        if (string.IsNullOrWhiteSpace(newDirectoryPath))
        {
            directoryError = "Please enter a directory path";
            return;
        }

        // Normalize the path
        var normalizedPath = Path.GetFullPath(newDirectoryPath.Trim());
        
        // Check if directory exists
        if (!Directory.Exists(normalizedPath))
        {
            directoryError = "Directory does not exist";
            return;
        }

        try
        {
            // Check if already exists
            var exists = await DbContext.tbl_scan_directory
                .AnyAsync(d => d.DirectoryPath == normalizedPath);
                
            if (exists)
            {
                directoryError = "This directory is already configured";
                return;
            }

            // Add new scan directory
            var scanDir = new tbl_scan_directory
            {
                DirectoryPath = normalizedPath,
                DateCreated = DateTime.UtcNow
            };

            DbContext.tbl_scan_directory.Add(scanDir);
            await DbContext.SaveChangesAsync();
            
            // Reload the list
            await LoadScanDirectories();
            newDirectoryPath = string.Empty;
            
            Logger.LogInformation("Added scan directory: {Path}", normalizedPath);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding scan directory");
            directoryError = "Failed to add directory: " + ex.Message;
        }
    }

    private async Task RemoveScanDirectory(int scanDirectoryId)
    {
        try
        {
            var scanDir = await DbContext.tbl_scan_directory
                .FirstOrDefaultAsync(d => d.ScanDirectoryId == scanDirectoryId);
                
            if (scanDir != null)
            {
                // Count associated images
                var imageCount = await DbContext.tbl_images
                    .CountAsync(i => i.ScanDirectoryId == scanDirectoryId);
                    
                if (imageCount > 0)
                {
                    // Show confirmation dialog
                    var result = await JsRuntime.InvokeAsync<bool>("confirm", 
                        $"This directory contains {imageCount} images. Removing it will delete all associated images from the database. Continue?");
                        
                    if (!result)
                        return;
                }

                DbContext.tbl_scan_directory.Remove(scanDir);
                await DbContext.SaveChangesAsync();
                
                await LoadScanDirectories();
                Logger.LogInformation("Removed scan directory: {Path}", scanDir.DirectoryPath);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error removing scan directory");
            errorMessage = "Failed to remove directory: " + ex.Message;
        }
    }
    
    private void OpenDatabaseUpdate()
    {
        try
        {
            // Create and show the database update form
            var updateForm = new MyPhotoHelper.Forms.DatabaseUpdateForm(ServiceProvider);
            updateForm.ShowDialog();
            
            // Reload settings after database update
            InvokeAsync(async () =>
            {
                await LoadSettings();
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error opening database update form");
            errorMessage = "Failed to open database update tool: " + ex.Message;
        }
    }
}