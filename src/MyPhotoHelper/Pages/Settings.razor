@page "/settings"
@using MyPhotoHelper.Data
@using MyPhotoHelper.Models
@using MyPhotoHelper.Services
@using Microsoft.EntityFrameworkCore
@inject MyPhotoHelperDbContext DbContext
@inject IPathService PathService
@inject NavigationManager Navigation
@inject ILogger<Settings> Logger
@inject IJSRuntime JsRuntime
@inject SystemTrayService SystemTrayService
@inject IServiceProvider ServiceProvider

<PageTitle>Settings - FaceVault</PageTitle>

<div class="container-fluid">
    <h1 class="display-4">Settings</h1>
    <p class="lead">Configure FaceVault application settings</p>
    
    @if (showSuccessMessage)
    {
        <div class="alert alert-success alert-dismissible fade show shadow-lg border-success border-2" role="alert" style="animation: slideInDown 0.3s ease-out;">
            <div class="d-flex align-items-center">
                <span class="oi oi-check fs-4 me-3" aria-hidden="true"></span>
                <div>
                    <strong>Success!</strong> Your settings have been saved successfully.
                </div>
            </div>
            <button type="button" class="btn-close" @onclick="() => showSuccessMessage = false"></button>
        </div>
    }
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <span class="oi oi-x" aria-hidden="true"></span> @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }
    
    @if (showResetMessage)
    {
        <div class="alert alert-info alert-dismissible fade show shadow-lg border-info border-2" role="alert" style="animation: slideInDown 0.3s ease-out;">
            <div class="d-flex align-items-center">
                <span class="oi oi-reload fs-4 me-3" aria-hidden="true"></span>
                <div>
                    <strong>Reset!</strong> Settings have been reset to defaults. Remember to save your changes.
                </div>
            </div>
            <button type="button" class="btn-close" @onclick="() => showResetMessage = false"></button>
        </div>
    }

    @if (settings == null)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <form @onsubmit="SaveSettings" @onsubmit:preventDefault="true">
            <div class="row">
                <!-- General Settings -->
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0"><span class="oi oi-cog" aria-hidden="true"></span> General Settings</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Theme</label>
                                <select class="form-select" @bind="settings.ThemeName">
                                    <option value="">Default</option>
                                    <option value="dark">Dark</option>
                                    <option value="light">Light</option>
                                </select>
                            </div>
                            
                            <h6 class="mt-4">System Settings</h6>
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="runOnStartup" 
                                       checked="@(settings.RunOnWindowsStartup == 1)"
                                       @onchange="@((e) => settings.RunOnWindowsStartup = (bool)e.Value! ? 1 : 0)">
                                <label class="form-check-label" for="runOnStartup">
                                    Start MyPhotoHelper when Windows starts
                                    <small class="text-muted d-block">Application will start minimized to system tray</small>
                                </label>
                            </div>
                            
                            <h6 class="mt-4">Feature Toggles</h6>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="enableAI" 
                                       checked="@(settings.EnableAIImageAnalysis == 1)"
                                       @onchange="@((e) => settings.EnableAIImageAnalysis = (bool)e.Value! ? 1 : 0)">
                                <label class="form-check-label" for="enableAI">
                                    Enable AI Image Analysis
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Scan Directories -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0"><span class="oi oi-folder" aria-hidden="true"></span> Scan Directories</h5>
                        </div>
                        <div class="card-body">
                            @if (scanDirectories == null || !scanDirectories.Any())
                            {
                                <div class="alert alert-warning">
                                    <span class="oi oi-warning" aria-hidden="true"></span>
                                    No scan directories configured. Add directories to scan for photos.
                                </div>
                            }
                            else
                            {
                                <div class="mb-3">
                                    <label class="form-label">Configured Directories</label>
                                    <div class="list-group">
                                        @foreach (var dir in scanDirectories)
                                        {
                                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                                <div>
                                                    <span class="text-break">@dir.DirectoryPath</span>
                                                    <br />
                                                    <small class="text-muted">Added: @dir.DateCreated.ToString("yyyy-MM-dd")</small>
                                                </div>
                                                <button class="btn btn-sm btn-danger" @onclick="() => RemoveScanDirectory(dir.ScanDirectoryId)">
                                                    <span class="oi oi-trash" aria-hidden="true"></span>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            
                            <div class="mb-3">
                                <label class="form-label">Add New Directory</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" @bind="newDirectoryPath" 
                                           placeholder="C:\Users\YourName\Pictures" />
                                    <button class="btn btn-primary" @onclick="AddScanDirectory" 
                                            disabled="@(string.IsNullOrWhiteSpace(newDirectoryPath))">
                                        <span class="oi oi-plus" aria-hidden="true"></span> Add
                                    </button>
                                </div>
                                @if (!string.IsNullOrEmpty(directoryError))
                                {
                                    <div class="text-danger mt-1">@directoryError</div>
                                }
                            </div>
                            
                            <hr />
                            
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="autoScan" 
                                       checked="@(settings.AutoScanOnStartup == 1)"
                                       @onchange="@((e) => settings.AutoScanOnStartup = (bool)e.Value! ? 1 : 0)">
                                <label class="form-check-label" for="autoScan">
                                    Auto-scan on Startup
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- AI Settings -->
                <div class="col-md-6">
                    <div class="card mb-4" id="ai-settings">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0"><span class="oi oi-beaker" aria-hidden="true"></span> AI Settings</h5>
                        </div>
                        <div class="card-body">
                            @if (settings.EnableAIImageAnalysis != 1)
                            {
                                <div class="alert alert-warning">
                                    <span class="oi oi-warning" aria-hidden="true"></span> 
                                    Enable AI Image Analysis above to configure these settings.
                                </div>
                            }
                            
                            <div class="mb-3">
                                <label class="form-label">AI Provider <span class="text-danger">*</span></label>
                                <select class="form-select" value="@settings.AIProvider" 
                                        @onchange="OnAIProviderChanged"
                                        disabled="@(settings.EnableAIImageAnalysis != 1)">
                                    <option value="">-- Select Provider --</option>
                                    <option value="OpenAI">OpenAI</option>
                                    <option value="Azure">Azure Cognitive Services</option>
                                    <option value="Google">Google Vision AI</option>
                                    <option value="AWS">AWS Rekognition</option>
                                    <option value="Local">Local Model</option>
                                </select>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">API Key <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <input type="@(showApiKey ? "text" : "password")" 
                                           class="form-control" @bind="settings.AIApiKey" 
                                           placeholder="Enter your API key"
                                           disabled="@(settings.EnableAIImageAnalysis != 1)">
                                    <button class="btn btn-outline-secondary" type="button" 
                                            @onclick="() => showApiKey = !showApiKey"
                                            disabled="@(settings.EnableAIImageAnalysis != 1)">
                                        <span class="oi oi-@(showApiKey ? "eye" : "lock-locked")" aria-hidden="true"></span>
                                    </button>
                                </div>
                                <div class="form-text">Your API key is stored locally and never shared</div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">API Endpoint</label>
                                <input type="text" class="form-control" @bind="settings.AIApiEndpoint" 
                                       placeholder="@GetEndpointPlaceholder()"
                                       disabled="@(settings.EnableAIImageAnalysis != 1)">
                                <div class="form-text">Default endpoint will be used if left empty</div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Model</label>
                                <input type="text" class="form-control" @bind="settings.AIModel" 
                                       placeholder="@GetModelPlaceholder()"
                                       disabled="@(settings.EnableAIImageAnalysis != 1)">
                                <div class="form-text">Recommended model will be used if left empty</div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Temperature</label>
                                <input type="number" class="form-control" @bind="settings.AITemperature" 
                                       step="0.1" min="0" max="2"
                                       disabled="@(settings.EnableAIImageAnalysis != 1)">
                                <div class="form-text">0.0 = Most focused, 2.0 = Most creative</div>
                            </div>
                        </div>
                    </div>

                    <!-- Performance Settings -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0"><span class="oi oi-dashboard" aria-hidden="true"></span> Performance Settings</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Batch Size</label>
                                <input type="number" class="form-control" @bind="settings.BatchSize" 
                                       min="1" max="1000">
                                <div class="form-text">Number of files to process at once</div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Max Concurrent Tasks</label>
                                <input type="number" class="form-control" @bind="settings.MaxConcurrentTasks" 
                                       min="1" max="20">
                                <div class="form-text">Maximum parallel operations</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <!-- Action Buttons -->
            <div class="d-flex justify-content-between mb-4">
                <div>
                    <button type="button" class="btn btn-outline-secondary" @onclick="GoBack">
                        <span class="oi oi-arrow-left" aria-hidden="true"></span> Back to Home
                    </button>
                    <button type="button" class="btn btn-outline-info ms-2" @onclick="OpenDatabaseUpdate">
                        <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Update Database
                    </button>
                </div>
                <div>
                    <button type="button" class="btn btn-outline-warning me-2" @onclick="ResetToDefaults" disabled="@isResetting">
                        @if (isResetting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Resetting...</span>
                        }
                        else
                        {
                            <span class="oi oi-reload" aria-hidden="true"></span>
                            <text> Reset to Defaults</text>
                        }
                    </button>
                    <button type="submit" class="btn btn-primary btn-lg px-4" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Saving...</span>
                        }
                        else
                        {
                            <span class="oi oi-check" aria-hidden="true"></span>
                            <text> Save Settings</text>
                        }
                    </button>
                </div>
            </div>
        </form>
    }
</div>

<style>
    @@keyframes slideInDown {
        from {
            transform: translateY(-20px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }
    
    .btn:not(:disabled):hover {
        transform: scale(1.05);
        transition: transform 0.2s ease;
    }
    
    .btn:not(:disabled):active {
        transform: scale(0.98);
    }
    
    .btn {
        transition: all 0.2s ease;
    }
    
    .alert-success {
        position: relative;
        z-index: 1000;
    }
</style>

@code {
    private tbl_app_settings? settings;
    private List<tbl_scan_directory>? scanDirectories;
    private string newDirectoryPath = string.Empty;
    private string directoryError = string.Empty;
    private bool isSaving = false;
    private bool showSuccessMessage = false;
    private string errorMessage = string.Empty;
    private bool showApiKey = false;
    private bool isResetting = false;
    private bool showResetMessage = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
        await LoadScanDirectories();
    }

    private async Task LoadSettings()
    {
        try
        {
            settings = await DbContext.tbl_app_settings.FirstOrDefaultAsync();
            
            if (settings == null)
            {
                // Create default settings if none exist
                settings = CreateDefaultSettings();
                DbContext.tbl_app_settings.Add(settings);
                await DbContext.SaveChangesAsync();
                Logger.LogInformation("Created default application settings");
            }
            
            // Sync Windows startup status with actual system state
            var actualStartupEnabled = SystemTrayService.IsWindowsStartupEnabled();
            var dbStartupEnabled = settings.RunOnWindowsStartup == 1;
            
            if (actualStartupEnabled != dbStartupEnabled)
            {
                Logger.LogInformation($"Syncing Windows startup status. DB: {dbStartupEnabled}, Actual: {actualStartupEnabled}");
                settings.RunOnWindowsStartup = actualStartupEnabled ? 1 : 0;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading settings");
            errorMessage = "Failed to load settings: " + ex.Message;
        }
    }

    private tbl_app_settings CreateDefaultSettings()
    {
        var defaultPhotoDir = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
        
        return new tbl_app_settings
        {
            Id = 1,
            EnableDuplicateDetection = 1,
            EnableAIImageAnalysis = 0,
            AutoScanOnStartup = 0,
            RunOnWindowsStartup = 0,
            ScanSubdirectories = 1,
            SupportJpeg = 1,
            SupportPng = 1,
            SupportGif = 1,
            SupportBmp = 1,
            SupportWebp = 1,
            SupportHeic = 0,
            BatchSize = 100,
            MaxConcurrentTasks = 4,
            ThemeName = "default",
            DateCreated = DateTime.UtcNow,
            DateModified = DateTime.UtcNow
        };
    }

    private async Task SaveSettings()
    {
        if (settings == null) return;

        try
        {
            isSaving = true;
            errorMessage = string.Empty;
            
            // Validate AI settings if enabled
            if (settings.EnableAIImageAnalysis == 1)
            {
                if (string.IsNullOrWhiteSpace(settings.AIProvider))
                {
                    errorMessage = "Please select an AI Provider";
                    return;
                }
                
                if (string.IsNullOrWhiteSpace(settings.AIApiKey))
                {
                    errorMessage = "Please enter an API Key for AI analysis";
                    return;
                }
            }
            
            // Handle Windows startup changes
            try
            {
                var shouldEnableStartup = settings.RunOnWindowsStartup == 1;
                var isCurrentlyEnabled = SystemTrayService.IsWindowsStartupEnabled();
                
                if (shouldEnableStartup != isCurrentlyEnabled)
                {
                    if (shouldEnableStartup)
                    {
                        SystemTrayService.EnableWindowsStartup();
                        Logger.LogInformation("Enabled Windows startup");
                    }
                    else
                    {
                        SystemTrayService.DisableWindowsStartup();
                        Logger.LogInformation("Disabled Windows startup");
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to update Windows startup setting");
                errorMessage = "Failed to update Windows startup setting. You may need to run as administrator.";
                return;
            }
            
            // Update modified date
            settings.DateModified = DateTime.UtcNow;
            
            // Save to database
            DbContext.Update(settings);
            await DbContext.SaveChangesAsync();
            
            showSuccessMessage = true;
            Logger.LogInformation("Settings saved successfully");
            
            // Hide success message after 5 seconds
            _ = Task.Delay(5000).ContinueWith(_ => 
            {
                showSuccessMessage = false;
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving settings");
            errorMessage = "Failed to save settings: " + ex.Message;
        }
        finally
        {
            isSaving = false;
        }
    }

    private Task ResetToDefaults()
    {
        if (settings == null) return Task.CompletedTask;
        
        isResetting = true;
        showResetMessage = false;
        errorMessage = "";
        StateHasChanged();
        
        var defaultSettings = CreateDefaultSettings();
        
        // Preserve the ID, creation date, and current Windows startup state
        defaultSettings.Id = settings.Id;
        defaultSettings.DateCreated = settings.DateCreated;
        defaultSettings.RunOnWindowsStartup = SystemTrayService.IsWindowsStartupEnabled() ? 1 : 0;
        
        settings = defaultSettings;
        
        showResetMessage = true;
        isResetting = false;
        StateHasChanged();
        
        // Hide reset message after 3 seconds
        _ = Task.Delay(3000).ContinueWith(_ => 
        {
            showResetMessage = false;
            InvokeAsync(StateHasChanged);
        });
        
        return Task.CompletedTask;
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private void OnAIProviderChanged(ChangeEventArgs e)
    {
        if (settings == null) return;
        
        var provider = e.Value?.ToString();
        if (string.IsNullOrEmpty(provider)) return;
        
        settings.AIProvider = provider;
        
        // Set default API endpoints and models based on provider
        switch (provider)
        {
            case "OpenAI":
                if (string.IsNullOrWhiteSpace(settings.AIApiEndpoint))
                    settings.AIApiEndpoint = "https://api.openai.com/v1";
                if (string.IsNullOrWhiteSpace(settings.AIModel))
                    settings.AIModel = "gpt-4o-mini";
                break;
                
            case "Azure":
                if (string.IsNullOrWhiteSpace(settings.AIApiEndpoint))
                    settings.AIApiEndpoint = "https://YOUR-RESOURCE-NAME.cognitiveservices.azure.com/";
                if (string.IsNullOrWhiteSpace(settings.AIModel))
                    settings.AIModel = "gpt-4";
                break;
                
            case "Google":
                if (string.IsNullOrWhiteSpace(settings.AIApiEndpoint))
                    settings.AIApiEndpoint = "https://vision.googleapis.com/v1";
                if (string.IsNullOrWhiteSpace(settings.AIModel))
                    settings.AIModel = "gemini-pro-vision";
                break;
                
            case "AWS":
                if (string.IsNullOrWhiteSpace(settings.AIApiEndpoint))
                    settings.AIApiEndpoint = "https://rekognition.us-east-1.amazonaws.com";
                if (string.IsNullOrWhiteSpace(settings.AIModel))
                    settings.AIModel = "rekognition-v1";
                break;
                
            case "Local":
                if (string.IsNullOrWhiteSpace(settings.AIApiEndpoint))
                    settings.AIApiEndpoint = "http://localhost:1234/v1";
                if (string.IsNullOrWhiteSpace(settings.AIModel))
                    settings.AIModel = "llava-v1.5-7b";
                break;
        }
        
        StateHasChanged();
    }

    private string GetEndpointPlaceholder()
    {
        return settings?.AIProvider switch
        {
            "OpenAI" => "https://api.openai.com/v1",
            "Azure" => "https://YOUR-RESOURCE-NAME.cognitiveservices.azure.com/",
            "Google" => "https://vision.googleapis.com/v1",
            "AWS" => "https://rekognition.us-east-1.amazonaws.com",
            "Local" => "http://localhost:1234/v1",
            _ => "https://api.example.com/v1"
        };
    }

    private string GetModelPlaceholder()
    {
        return settings?.AIProvider switch
        {
            "OpenAI" => "gpt-4o-mini",
            "Azure" => "gpt-4",
            "Google" => "gemini-pro-vision",
            "AWS" => "rekognition-v1",
            "Local" => "llava-v1.5-7b",
            _ => "e.g., gpt-4o-mini, claude-3"
        };
    }

    private async Task LoadScanDirectories()
    {
        try
        {
            scanDirectories = await DbContext.tbl_scan_directory
                .OrderBy(d => d.DirectoryPath)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading scan directories");
            scanDirectories = new List<tbl_scan_directory>();
        }
    }

    private async Task AddScanDirectory()
    {
        directoryError = string.Empty;
        
        if (string.IsNullOrWhiteSpace(newDirectoryPath))
        {
            directoryError = "Please enter a directory path";
            return;
        }

        // Normalize the path
        var normalizedPath = Path.GetFullPath(newDirectoryPath.Trim());
        
        // Check if directory exists
        if (!Directory.Exists(normalizedPath))
        {
            directoryError = "Directory does not exist";
            return;
        }

        try
        {
            // Check if already exists
            var exists = await DbContext.tbl_scan_directory
                .AnyAsync(d => d.DirectoryPath == normalizedPath);
                
            if (exists)
            {
                directoryError = "This directory is already configured";
                return;
            }

            // Add new scan directory
            var scanDir = new tbl_scan_directory
            {
                DirectoryPath = normalizedPath,
                DateCreated = DateTime.UtcNow
            };

            DbContext.tbl_scan_directory.Add(scanDir);
            await DbContext.SaveChangesAsync();
            
            // Reload the list
            await LoadScanDirectories();
            newDirectoryPath = string.Empty;
            
            Logger.LogInformation("Added scan directory: {Path}", normalizedPath);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding scan directory");
            directoryError = "Failed to add directory: " + ex.Message;
        }
    }

    private async Task RemoveScanDirectory(int scanDirectoryId)
    {
        try
        {
            var scanDir = await DbContext.tbl_scan_directory
                .FirstOrDefaultAsync(d => d.ScanDirectoryId == scanDirectoryId);
                
            if (scanDir != null)
            {
                // Count associated images
                var imageCount = await DbContext.tbl_images
                    .CountAsync(i => i.ScanDirectoryId == scanDirectoryId);
                    
                if (imageCount > 0)
                {
                    // Show confirmation dialog
                    var result = await JsRuntime.InvokeAsync<bool>("confirm", 
                        $"This directory contains {imageCount} images. Removing it will delete all associated images from the database. Continue?");
                        
                    if (!result)
                        return;
                }

                DbContext.tbl_scan_directory.Remove(scanDir);
                await DbContext.SaveChangesAsync();
                
                await LoadScanDirectories();
                Logger.LogInformation("Removed scan directory: {Path}", scanDir.DirectoryPath);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error removing scan directory");
            errorMessage = "Failed to remove directory: " + ex.Message;
        }
    }
    
    private void OpenDatabaseUpdate()
    {
        try
        {
            // Create and show the database update form
            var updateForm = new MyPhotoHelper.Forms.DatabaseUpdateForm(ServiceProvider);
            updateForm.ShowDialog();
            
            // Reload settings after database update
            InvokeAsync(async () =>
            {
                await LoadSettings();
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error opening database update form");
            errorMessage = "Failed to open database update tool: " + ex.Message;
        }
    }
}