@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace MyPhotoHelper.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="MyPhotoHelper.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png"/>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script>
        // Custom Modal functionality to replace Bootstrap
        window.showModal = (modalId) => {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.style.display = 'block';
                modal.classList.add('show');
                document.body.style.overflow = 'hidden';
                
                // Add backdrop
                const backdrop = document.createElement('div');
                backdrop.className = 'modal-backdrop fade show';
                backdrop.style.position = 'fixed';
                backdrop.style.top = '0';
                backdrop.style.left = '0';
                backdrop.style.width = '100%';
                backdrop.style.height = '100%';
                backdrop.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
                backdrop.style.zIndex = '1050';
                backdrop.onclick = () => window.hideModal(modalId);
                document.body.appendChild(backdrop);
            }
        };
        
        window.hideModal = (modalId) => {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.style.display = 'none';
                modal.classList.remove('show');
                document.body.style.overflow = '';
                
                // Remove backdrop
                const backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) {
                    document.body.removeChild(backdrop);
                }
            }
        };
        
        // Handle modal close buttons
        document.addEventListener('click', (e) => {
            if (e.target.dataset.bsDismiss === 'modal') {
                const modal = e.target.closest('.modal');
                if (modal) {
                    window.hideModal(modal.id);
                }
            }
        });
        
        // Close modal on Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                const modal = document.querySelector('.modal.show');
                if (modal) {
                    window.hideModal(modal.id);
                }
            }
        });
    </script>
    <script>
        window.setupNavigationInterceptor = (dotNetHelper) => {
            // Intercept all navigation link clicks
            document.addEventListener('click', (e) => {
                const link = e.target.closest('a');
                if (link && link.href && !link.target && link.href.startsWith(window.location.origin)) {
                    // This is an internal navigation link
                    dotNetHelper.invokeMethodAsync('ShowNavigationSpinner');
                }
            }, true);
            
            // Also intercept programmatic navigation via Blazor
            const originalNavigateTo = Blazor.navigateTo;
            if (originalNavigateTo) {
                Blazor.navigateTo = function(uri, options) {
                    dotNetHelper.invokeMethodAsync('ShowNavigationSpinner');
                    return originalNavigateTo.call(this, uri, options);
                };
            }
        };
        
        // Safer clipboard copy fallback
        window.copyToClipboardFallback = async (text) => {
            const textarea = document.createElement('textarea');
            textarea.value = text;
            textarea.style.position = 'fixed';
            textarea.style.opacity = '0';
            textarea.style.top = '0';
            textarea.style.left = '0';
            document.body.appendChild(textarea);
            textarea.focus();
            textarea.select();
            
            try {
                const successful = document.execCommand('copy');
                if (!successful) {
                    throw new Error('Copy command failed');
                }
            } finally {
                document.body.removeChild(textarea);
            }
        };
        
        // Safe image preloading function (replaces eval usage)
        window.preloadImage = (url) => {
            if (url && typeof url === 'string') {
                const img = new Image();
                img.src = url;
                // Store in cache for potential reuse
                img.onload = () => {
                    // Image loaded successfully
                };
                img.onerror = () => {
                    console.warn('Failed to preload image:', url);
                };
            }
        };
        
        // Full-screen viewer global key handler
        let fullScreenKeyHandler = null;
        
        window.addFullScreenKeyListener = () => {
            if (fullScreenKeyHandler) {
                document.removeEventListener('keydown', fullScreenKeyHandler);
            }
            
            fullScreenKeyHandler = (e) => {
                const viewerOverlay = document.querySelector('.viewer-overlay');
                if (viewerOverlay && e.key === 'Escape') {
                    e.preventDefault();
                    e.stopPropagation();
                    // Trigger click on overlay to close viewer
                    viewerOverlay.click();
                }
            };
            
            document.addEventListener('keydown', fullScreenKeyHandler, { capture: true });
        };
        
        window.removeFullScreenKeyListener = () => {
            if (fullScreenKeyHandler) {
                document.removeEventListener('keydown', fullScreenKeyHandler);
                fullScreenKeyHandler = null;
            }
        };
    </script>
</body>
</html>
