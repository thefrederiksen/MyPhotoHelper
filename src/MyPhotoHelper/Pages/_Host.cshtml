@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace MyPhotoHelper.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="MyPhotoHelper.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png"/>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script>
        window.setupNavigationInterceptor = (dotNetHelper) => {
            // Intercept all navigation link clicks
            document.addEventListener('click', (e) => {
                const link = e.target.closest('a');
                if (link && link.href && !link.target && link.href.startsWith(window.location.origin)) {
                    // This is an internal navigation link
                    dotNetHelper.invokeMethodAsync('ShowNavigationSpinner');
                }
            }, true);
            
            // Also intercept programmatic navigation via Blazor
            const originalNavigateTo = Blazor.navigateTo;
            if (originalNavigateTo) {
                Blazor.navigateTo = function(uri, options) {
                    dotNetHelper.invokeMethodAsync('ShowNavigationSpinner');
                    return originalNavigateTo.call(this, uri, options);
                };
            }
        };
        
        // Safer clipboard copy fallback
        window.copyToClipboardFallback = async (text) => {
            const textarea = document.createElement('textarea');
            textarea.value = text;
            textarea.style.position = 'fixed';
            textarea.style.opacity = '0';
            textarea.style.top = '0';
            textarea.style.left = '0';
            document.body.appendChild(textarea);
            textarea.focus();
            textarea.select();
            
            try {
                const successful = document.execCommand('copy');
                if (!successful) {
                    throw new Error('Copy command failed');
                }
            } finally {
                document.body.removeChild(textarea);
            }
        };
    </script>
</body>
</html>
