using FaceVault.Services;
using CSnakes.Runtime;
using Microsoft.Extensions.Logging;

namespace FaceVault.Tests;

/// <summary>
/// Test class to verify C# integration with Python screenshot detection.
/// This tests the ScreenshotDetectionService calling into the Python screenshots.py module.
/// </summary>
public class ScreenshotDetectionTests
{
    private readonly IScreenshotDetectionService _screenshotService;
    private readonly ILogger<ScreenshotDetectionTests> _logger;

    public ScreenshotDetectionTests(IPythonEnvironment pythonEnv, ILogger<ScreenshotDetectionTests> logger)
    {
        _logger = logger;
        _screenshotService = new ScreenshotDetectionService(pythonEnv, new MockLogger<ScreenshotDetectionService>());
    }

    public async Task<TestResult> TestScreenshotDetection()
    {
        var results = new List<string>();
        var success = true;

        try
        {
            // Test with the screenshot image
            var screenshotPath = Path.Combine("Python", "test", "images", "screenshot.jpg");
            if (File.Exists(screenshotPath))
            {
                var screenshotResult = await _screenshotService.DetectScreenshotAsync(screenshotPath);
                results.Add($"Screenshot test: {screenshotResult.IsScreenshot} (confidence: {screenshotResult.Confidence:F2})");
                
                if (!screenshotResult.IsScreenshot || screenshotResult.Confidence < 0.5)
                {
                    results.Add("WARNING: Screenshot was not detected as screenshot");
                    success = false;
                }
            }
            else
            {
                results.Add("ERROR: screenshot.jpg not found");
                success = false;
            }

            // Test with the photo image
            var photoPath = Path.Combine("Python", "test", "images", "photo.jpg");
            if (File.Exists(photoPath))
            {
                var photoResult = await _screenshotService.DetectScreenshotAsync(photoPath);
                results.Add($"Photo test: {photoResult.IsScreenshot} (confidence: {photoResult.Confidence:F2})");
                
                if (photoResult.IsScreenshot && photoResult.Confidence > 0.5)
                {
                    results.Add("WARNING: Photo was incorrectly detected as screenshot");
                    success = false;
                }
            }
            else
            {
                results.Add("ERROR: photo.jpg not found");
                success = false;
            }

            // Test error handling with non-existent file
            var invalidPath = "non_existent_file.jpg";
            var errorResult = await _screenshotService.DetectScreenshotAsync(invalidPath);
            results.Add($"Error handling test: Error = {errorResult.Error != null}");
            
            if (errorResult.Error == null)
            {
                results.Add("WARNING: Expected error for non-existent file but got none");
                success = false;
            }

        }
        catch (Exception ex)
        {
            results.Add($"EXCEPTION: {ex.Message}");
            success = false;
        }

        return new TestResult
        {
            Success = success,
            Results = results,
            TestName = "Screenshot Detection Integration Test"
        };
    }

    public async Task<TestResult> TestPythonIntegration()
    {
        var results = new List<string>();
        var success = true;

        try
        {
            // Test basic connectivity to Python module
            var testPath = Path.Combine("Python", "test", "images", "photo.jpg");
            
            if (!File.Exists(testPath))
            {
                // Create a test case if files don't exist
                results.Add($"Test image not found at: {testPath}");
                success = false;
                return new TestResult
                {
                    Success = success,
                    Results = results,
                    TestName = "Python Integration Test"
                };
            }

            // Test basic method calls
            var confidence = await _screenshotService.GetScreenshotConfidenceAsync(testPath);
            results.Add($"Confidence method test: {confidence:F2}");

            var isScreenshot = await _screenshotService.IsScreenshotAsync(testPath);
            results.Add($"IsScreenshot method test: {isScreenshot}");

            var fullResult = await _screenshotService.DetectScreenshotAsync(testPath);
            results.Add($"Full detection test: IsScreenshot={fullResult.IsScreenshot}, Confidence={fullResult.Confidence:F2}");
            
            if (fullResult.Analysis.Count > 0)
            {
                results.Add($"Analysis details available: {fullResult.Analysis.Count} items");
            }
            else
            {
                results.Add("WARNING: No analysis details returned");
                success = false;
            }

        }
        catch (Exception ex)
        {
            results.Add($"EXCEPTION: {ex.Message}");
            if (ex.InnerException != null)
            {
                results.Add($"INNER EXCEPTION: {ex.InnerException.Message}");
            }
            success = false;
        }

        return new TestResult
        {
            Success = success,
            Results = results,
            TestName = "Python Integration Test"
        };
    }
}

public class TestResult
{
    public bool Success { get; set; }
    public List<string> Results { get; set; } = new();
    public string TestName { get; set; } = "";
}

/// <summary>
/// Mock logger for testing - logs to console
/// </summary>
public class MockLogger<T> : ILogger<T>
{
    public IDisposable? BeginScope<TState>(TState state) where TState : notnull => null;
    public bool IsEnabled(Microsoft.Extensions.Logging.LogLevel logLevel) => true;
    
    public void Log<TState>(Microsoft.Extensions.Logging.LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter)
    {
        Console.WriteLine($"[{logLevel}] {formatter(state, exception)}");
        if (exception != null)
        {
            Console.WriteLine($"Exception: {exception}");
        }
    }
}